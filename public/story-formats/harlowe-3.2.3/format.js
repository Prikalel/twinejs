window.storyFormat({"name":"Harlowe","version":"3.3.0-alpha","author":"Leon Arnott","description":"The default story format for Twine 2, with numerous programming features and a rich passage editor. No HTML, JS or CSS experience required. Consult its <a href='https://twine2.neocities.org/' target='_blank' rel='noopener noreferrer'>documentation</a>.","image":"icon.svg","url":"http://twinery.org/","license":"Zlib","proofing":false,"source":"","hydrate":"'use strict';\n\nfunction _toArray(arr) {\n\treturn (\n\t\t_arrayWithHoles(arr) ||\n\t\t_iterableToArray(arr) ||\n\t\t_unsupportedIterableToArray(arr) ||\n\t\t_nonIterableRest()\n\t);\n}\n\nfunction _slicedToArray(arr, i) {\n\treturn (\n\t\t_arrayWithHoles(arr) ||\n\t\t_iterableToArrayLimit(arr, i) ||\n\t\t_unsupportedIterableToArray(arr, i) ||\n\t\t_nonIterableRest()\n\t);\n}\n\nfunction _nonIterableRest() {\n\tthrow new TypeError(\n\t\t'Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'\n\t);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n\tvar _i =\n\t\tarr == null\n\t\t\t? null\n\t\t\t: (typeof Symbol !== 'undefined' && arr[Symbol.iterator]) ||\n\t\t\t  arr['@@iterator'];\n\tif (_i == null) return;\n\tvar _arr = [];\n\tvar _n = true;\n\tvar _d = false;\n\tvar _s, _e;\n\ttry {\n\t\tfor (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n\t\t\t_arr.push(_s.value);\n\t\t\tif (i && _arr.length === i) break;\n\t\t}\n\t} catch (err) {\n\t\t_d = true;\n\t\t_e = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_n && _i['return'] != null) _i['return']();\n\t\t} finally {\n\t\t\tif (_d) throw _e;\n\t\t}\n\t}\n\treturn _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n\tif (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n\treturn (\n\t\t_arrayWithoutHoles(arr) ||\n\t\t_iterableToArray(arr) ||\n\t\t_unsupportedIterableToArray(arr) ||\n\t\t_nonIterableSpread()\n\t);\n}\n\nfunction _nonIterableSpread() {\n\tthrow new TypeError(\n\t\t'Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'\n\t);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n\tif (!o) return;\n\tif (typeof o === 'string') return _arrayLikeToArray(o, minLen);\n\tvar n = Object.prototype.toString.call(o).slice(8, -1);\n\tif (n === 'Object' && o.constructor) n = o.constructor.name;\n\tif (n === 'Map' || n === 'Set') return Array.from(o);\n\tif (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\n\t\treturn _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n\tif (\n\t\t(typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||\n\t\titer['@@iterator'] != null\n\t)\n\t\treturn Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n\tif (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n\tif (len == null || len > arr.length) len = arr.length;\n\tfor (var i = 0, arr2 = new Array(len); i < len; i++) {\n\t\tarr2[i] = arr[i];\n\t}\n\treturn arr2;\n}\n\nfunction _typeof(obj) {\n\t'@babel/helpers - typeof';\n\treturn (\n\t\t(_typeof =\n\t\t\t'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator\n\t\t\t\t? function (obj) {\n\t\t\t\t\t\treturn typeof obj;\n\t\t\t\t  }\n\t\t\t\t: function (obj) {\n\t\t\t\t\t\treturn obj &&\n\t\t\t\t\t\t\t'function' == typeof Symbol &&\n\t\t\t\t\t\t\tobj.constructor === Symbol &&\n\t\t\t\t\t\t\tobj !== Symbol.prototype\n\t\t\t\t\t\t\t? 'symbol'\n\t\t\t\t\t\t\t: typeof obj;\n\t\t\t\t  }),\n\t\t_typeof(obj)\n\t);\n}\n\n/*\n\tThe Lexer accepts plain strings, and, given a set of rules, transforms\n\tthem to a tree of tokens.\n\t\n\tConsumers must augment this object's 'rules' property.\n*/\n\n/*jshint strict:true*/\n(function () {\n\t'use strict';\n\n\tvar Lexer;\n\tvar rules = {};\n\t/*\n  \tThe \"prototype\" object for lexer tokens.\n  \tIt just has some basic methods that iterate over tokens' children,\n  \tbut which nonetheless lexer customers may find valuable.\n  */\n\n\tfunction Token(tokenData) {\n\t\tfor (var j in tokenData) {\n\t\t\tthis[j] = tokenData[j];\n\t\t}\n\t}\n\n\tToken.prototype = {\n\t\tconstructor: Token,\n\n\t\t/*\n    \tCreate a token and put it in the children array.\n    */\n\t\taddChild: function addChild(tokenData) {\n\t\t\tvar index = this.lastChildEnd();\n\t\t\t/*\n      \tNow, create the token, then assign to it the idiosyncratic data\n      \tproperties and the tokenMethods.\n      */\n\n\t\t\tvar childToken = new Token(tokenData);\n\t\t\t/*\n      \tSmall optimisation: these properties are set individually.\n      */\n\n\t\t\tchildToken.start = index;\n\t\t\tchildToken.end = tokenData.text && index + tokenData.text.length;\n\t\t\t/*\n      \t\"Place\" holds the original passage name of the source code.\n      */\n\n\t\t\tchildToken.place = this.place;\n\t\t\tchildToken.children = [];\n\t\t\t/*\n      \tIf the token has non-empty innerText, lex the innerText\n      \tand append to its children array.\n      */\n\n\t\t\tif (childToken.innerText) {\n\t\t\t\t_lex(childToken);\n\t\t\t}\n\t\t\t/*\n      \tHaving finished, push the child token to the children array.\n      */\n\n\t\t\tthis.children.push(childToken);\n\t\t\t/*\n      \tLet other things probe and manipulate the childToken; return it.\n      */\n\n\t\t\treturn childToken;\n\t\t},\n\n\t\t/*\n    \tlastChildEnd provides the end index of the last child token,\n    \tallowing the start index of a new token to be calculated.\n    \t\n    \tHence, when there are no children, it defaults to the start\n    \tindex of this token.\n    */\n\t\tlastChildEnd: function lastChildEnd() {\n\t\t\tvar lastToken = this.children\n\t\t\t\t? this.children[this.children.length - 1] || null\n\t\t\t\t: null;\n\t\t\treturn lastToken\n\t\t\t\t? lastToken.end\n\t\t\t\t: this.start +\n\t\t\t\t\t\t/*\n      \tSome macros' children do not exactly overlap their parents in terms of\n      \ttheir ranges - an example is (if:), which is a macro token whose start is 0,\n      \tbut contains a macroName token whose start is 1.\n      \tIn that case, the index of the first child should be 1.\n      \t\n      \tWe determine the difference by comparing the text and innerText positions -\n      \t(if:)'s text is \"(if:)\" but innerText is \"if:\"\n      */\n\t\t\t\t\t\tMath.max(0, this.text.indexOf(this.innerText));\n\t\t},\n\n\t\t/*\n    \tGiven an index in this token's text, find the deepest leaf,\n    \tif any, that corresponds to it.\n    */\n\t\ttokenAt: function tokenAt(index) {\n\t\t\t// First, a basic range check.\n\t\t\tif (index < this.start || index >= this.end) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t/*\n      \tAsk each child, if any, what their deepest token\n      \tfor this index is.\n      */\n\n\t\t\tif (this.children.length) {\n\t\t\t\tfor (var i = 0; i < this.children.length; i += 1) {\n\t\t\t\t\tvar childToken = this.children[i].tokenAt(index);\n\n\t\t\t\t\tif (childToken) {\n\t\t\t\t\t\treturn childToken;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/*\n        \tAs described in lastChildEnd(), some tokens can have a gap between their\n        \tstart and their first child's start. The index may have fallen in that gap\n        \tif no children were matched in the previous call.\n        \tIn which case, fall through and return this.\n        */\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/*\n    \tGiven an index in this token's text, return an array of tokens,\n    \tdeepest-first, leading to and including that token.\n    */\n\t\tpathAt: function pathAt(index) {\n\t\t\t// First, a basic range check.\n\t\t\tif (index < this.start || index >= this.end) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\t/*\n      \tAsk each child, if any, what their path for this index is.\n      */\n\n\t\t\tvar path = [];\n\n\t\t\tif (this.children.length) {\n\t\t\t\tfor (var i = 0; i < this.children.length; i += 1) {\n\t\t\t\t\tvar childPath = this.children[i].pathAt(index);\n\n\t\t\t\t\tif (childPath.length) {\n\t\t\t\t\t\tpath = path.concat(childPath);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn path.concat(this);\n\t\t},\n\n\t\t/*\n    \tGiven an index in this token's text, find the closest leaf\n    \t(that is, only from among the token's immediate children)\n    \tthat corresponds to it.\n    */\n\t\tnearestTokenAt: function nearestTokenAt(index) {\n\t\t\t// First, a basic range check.\n\t\t\tif (index < this.start || index >= this.end) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t/*\n      \tFind whichever child has the index within its start-end range.\n      */\n\n\t\t\tif (this.children) {\n\t\t\t\treturn this.children.reduce(function (prevValue, child) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tprevValue ||\n\t\t\t\t\t\t(index >= child.start && index < child.end ? child : null)\n\t\t\t\t\t);\n\t\t\t\t}, null);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/*\n    \tRuns a function on every leaf token in the tree,\n    \tand returns true if all returned truthy values.\n    */\n\t\teveryLeaf: function everyLeaf(fn) {\n\t\t\tif (!this.children || this.children.length === 0) {\n\t\t\t\treturn !!fn(this);\n\t\t\t}\n\n\t\t\treturn this.children.reduce(function (a, e) {\n\t\t\t\treturn a && e.everyLeaf(fn);\n\t\t\t}, true);\n\t\t},\n\n\t\t/*\n    \tConvert this token in-place into a text token, in the simplest manner possible.\n    \t\n    \tTODO: Really, this should combine this with all adjacent text tokens.\n    */\n\t\tdemote: function demote() {\n\t\t\tthis.type = 'text';\n\t\t},\n\n\t\t/*\n    \tConvert this token in-place into an early error token, which renders as a <tw-error>.\n    */\n\t\terror: function error(message) {\n\t\t\tthis.type = 'error';\n\t\t\tthis.message = message;\n\t\t},\n\n\t\t/*\n    \tThis is used primarily for browser console debugging purposes - output from\n    \tLEX() may be turned to string to provide an overview of its contents.\n    */\n\t\ttoString: function toString() {\n\t\t\tvar ret = this.type + '(' + this.start + '→' + this.end + ')';\n\n\t\t\tif (this.children && this.children.length > 0) {\n\t\t\t\tret += '[' + this.children + ']';\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t},\n\n\t\t/*\n    \tCreate a copy with a new child array containing the same children, passed by reference, and all other\n    \tproperties shallow-copied.\n    */\n\t\tcopy: function copy() {\n\t\t\tvar ret = new Token(this);\n\t\t\tret.children = ret.children.slice();\n\t\t\treturn ret;\n\t\t},\n\n\t\t/*\n    \tFold the non-folded immediate children of this token.\n    */\n\t\tfoldChildren: function foldChildren() {\n\t\t\tvar frontTokenStack = [];\n\t\t\tvar oldChildren = this.children.slice();\n\n\t\t\tfor (var i = 0; i < oldChildren.length; i += 1) {\n\t\t\t\tvar token = oldChildren[i];\n\t\t\t\tvar folded = false;\n\t\t\t\t/*\n        \tBecause lex() already lexes tokens as if they were folded,\n        \ti.e. using the correct mode (macroMode etc.), then re-lexing\n        \tdoesn't need to occur when folding tokens here.\n        */\n\n\t\t\t\tif (token.matches) {\n\t\t\t\t\tfor (var ft = 0; ft < frontTokenStack.length; ft += 1) {\n\t\t\t\t\t\tvar type = frontTokenStack[ft].type;\n\n\t\t\t\t\t\tif (type in token.matches) {\n\t\t\t\t\t\t\tfoldTokens(this, token, frontTokenStack[ft]);\n\t\t\t\t\t\t\tfrontTokenStack = frontTokenStack.slice(ft + 1);\n\t\t\t\t\t\t\tfolded = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!folded && token.isFront) {\n\t\t\t\t\tfrontTokenStack.unshift(token);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t/*\n  \tThe main lexing routine. Given a token with an innerText property and\n  \taddChild methods, this function will lex its text into new tokens\n  \tand add them as children.\n  */\n\n\tfunction _lex(parentToken, fold) {\n\t\tvar src = parentToken.innerText;\n\t\tvar /*\n    \tThe frontTokenStack's items are \"front\" tokens, those\n    \tthat pair up with a \"back\" token to make a token representing\n    \tan arbitrarily nestable rule.\n    */\n\t\t\tfrontTokenStack = null,\n\t\t\t/*\n    \tindex ticks upward as we advance through the src.\n    \tfirstUnmatchedIndex is bumped up whenever a match is made,\n    \tand is used to create \"text\" tokens between true tokens.\n    */\n\t\t\tindex = 0,\n\t\t\tfirstUnmatchedIndex = index,\n\t\t\t/*\n    \tThe endIndex is the terminating position in which to stop lexing.\n    */\n\t\t\tendIndex = src.length,\n\t\t\t/*\n    \tThis caches the most recently created token between iterations.\n    \tThis must be 'null' and not 'undefined' because some canFollow\n    \tarrays may contain null, to mean the start of input.\n    */\n\t\t\tlastToken = null;\n\t\t/*\n    \tRun through the src, character by character, matching all the\n    \trules on every slice, creating tokens as we go, until exhausted.\n    */\n\n\t\twhile (index < endIndex) {\n\t\t\tvar slice = src.slice(index);\n\t\t\t/*\n      \tThis is used to store what \"mode\" the lexer is in, which is\n      \teither parentToken.innerMode, or the innerMode of the recentmost\n      \tunmatched frontToken.\n      */\n\n\t\t\tvar mode = (\n\t\t\t\tfrontTokenStack && frontTokenStack.length\n\t\t\t\t\t? frontTokenStack[0]\n\t\t\t\t\t: parentToken\n\t\t\t).innerMode;\n\t\t\t/*\n      \tRun through all the rules in the current mode in turn.\n      \tNote that modeStack[0] means \"the current mode in the modeStack\".\n      \tSpeed paranoia precludes the deployment of [].forEach() here.\n      */\n\n\t\t\tvar i = 0,\n\t\t\t\tl = mode.length;\n\n\t\t\tfor (; i < l; i += 1) {\n\t\t\t\tvar rule = rules[mode[i]];\n\t\t\t\t/*\n        \tBefore running the pattern, check to see if this rule is valid right now.\n        \tIf so, then do it.\n        */\n\n\t\t\t\tif (\n\t\t\t\t\t(rule.constraint && !rule.constraint(lastToken)) ||\n\t\t\t\t\t/*\n        \tIf a token cannot follow text, the check is a bit tricky: the last text token hasn't been forged yet.\n        \tSo, this line must be used:\n        */\n\t\t\t\t\t(rule.cannotFollowText &&\n\t\t\t\t\t\t((lastToken && lastToken.type === 'text') ||\n\t\t\t\t\t\t\tfirstUnmatchedIndex < index)) ||\n\t\t\t\t\t/*\n        \tPlainCompare rules are compared only as strings.\n        */\n\t\t\t\t\t(rule.plainCompare\n\t\t\t\t\t\t? !slice.startsWith(rule.pattern)\n\t\t\t\t\t\t: /*\n        \t.test() is several times faster than .exec(), so only run the latter\n        \tonce the former passes. This means there's a perf hit when a match IS\n        \tfound (as .exec() must be run separately to .test()) but it should be balanced\n        \tby the number of rules which will not match.\n        */\n\t\t\t\t\t\t  !rule.pattern.test(slice))\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t/*\n        \tHaving run the pattern, we now create tokenData from the match. PlainCompare\n        \trules only need to pass in themselves (as they equal the matched portion),\n        \tbut normal rules need to pass in .exec() sub-matches.\n        \t\tWe use this to create the token, but we shouldn't do so if certain invalidation criteria\n        \tare met...\n        */\n\n\t\t\t\tvar tokenData = rule.fn(\n\t\t\t\t\trule.plainCompare ? rule.pattern : rule.pattern.exec(slice)\n\t\t\t\t);\n\t\t\t\t/*\n        \t...such as this: if it would be a Back token, it must match with a Front token.\n        */\n\n\t\t\t\tvar isMatchingBack = false;\n\t\t\t\tvar ft = 0;\n\n\t\t\t\tif (tokenData.matches) {\n\t\t\t\t\t/*\n          \tSpeed paranoia necessitates a for-loop here, which sets\n          \tft to either the index of the rightmost frontToken matching\n          \ttokenData's matches, or -1.\n          */\n\t\t\t\t\tfor (; frontTokenStack && ft < frontTokenStack.length; ft += 1) {\n\t\t\t\t\t\tvar _frontTokenStack$ft = frontTokenStack[ft],\n\t\t\t\t\t\t\ttype = _frontTokenStack$ft.type,\n\t\t\t\t\t\t\taka = _frontTokenStack$ft.aka;\n\n\t\t\t\t\t\tif (type in tokenData.matches) {\n\t\t\t\t\t\t\tisMatchingBack = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*\n            \tIf the token has an \"also known as\", then use that instead\n            \tof the actual type for cannotCross comparisons. This is currently\n            \t(as of 11-2021) used only for verbatimOpeners.\n            */\n\n\t\t\t\t\t\tif (aka) {\n\t\t\t\t\t\t\ttype = aka;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*\n            \tIf there is a front token which this back token \"cannot cross\" -\n            \tthat is, cannot pair with a front token behind it - then\n            \tabandon this rule. An example is (print: \")\") - the\n            \tparenthesis cannot cross the stringOpener to match the\n            \tmacroFront.\n            */\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttokenData.cannotCross &&\n\t\t\t\t\t\t\ttokenData.cannotCross.indexOf(type) > -1\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// This unconventional way to break the loop is used to simplify the\n\t\t\t\t\t\t\t// \"was the loop fruitless\" check below.\n\t\t\t\t\t\t\tft = frontTokenStack.length - 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/*\n          \tIf it doesn't match, then abandon this rule and try the next one.\n          */\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(!frontTokenStack || ft >= frontTokenStack.length) &&\n\t\t\t\t\t\t!tokenData.isFront\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/*\n        \tNow that it's fully confirmed, let's build this token.\n        \tFirst, create a token out of the interstitial unmatched\n        \ttext between this and the last \"proper\" token.\n        */\n\n\t\t\t\tif (firstUnmatchedIndex < index) {\n\t\t\t\t\tparentToken.addChild({\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\ttext: src.slice(firstUnmatchedIndex, index),\n\t\t\t\t\t\tinnerMode: mode\n\t\t\t\t\t});\n\t\t\t\t} // Create a token using the matched rule's fn.\n\n\t\t\t\tlastToken = parentToken.addChild(tokenData); // Increment the index in the src\n\n\t\t\t\tindex += lastToken.text.length;\n\t\t\t\tfirstUnmatchedIndex = index;\n\t\t\t\t/*\n        \tThe preceding test confirmed whether this is a matching Back token or not.\n        \tIf so, we fold them together.\n        */\n\n\t\t\t\tvar folded = false;\n\n\t\t\t\tif (isMatchingBack) {\n\t\t\t\t\t/*\n          \tIf folding is disabled (e.g. by the syntax highlighter trying to do incremental\n          \tparsing) then simply remove the front token from the stack without folding.\n          */\n\t\t\t\t\tif (fold) {\n\t\t\t\t\t\t/*\n            \tNote: this function splices the children array in-place!!\n            \tFortunately, nothing needs to be adjusted to account for this.\n            */\n\t\t\t\t\t\tfoldTokens(parentToken, lastToken, frontTokenStack[ft]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfrontTokenStack = frontTokenStack.slice(ft + 1);\n\t\t\t\t\t/*\n          \tEven though we don't actually fold the token if this is a flat lex,\n          \tact like it was so that this lastToken isn't saved, immediately below.\n          */\n\n\t\t\t\t\tfolded = true;\n\t\t\t\t}\n\t\t\t\t/*\n        \tFront tokens are saved, in case a Back token arrives\n        \tlater that can match it. This MUST come after the isMatchingBack check\n        \tso that the tokens which are both Front and Back will work properly.\n        */\n\n\t\t\t\tif (!folded && lastToken.isFront) {\n\t\t\t\t\tif (!frontTokenStack) {\n\t\t\t\t\t\tfrontTokenStack = [lastToken];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfrontTokenStack.unshift(lastToken);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/*\n        \tBreak from the for-loop.\n        */\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*\n      \tIf no match was available, then advance one character and loop again.\n      */\n\n\t\t\tif (i === l) {\n\t\t\t\tindex += 1;\n\n\t\t\t\tif (lastToken === null) {\n\t\t\t\t\tlastToken = {\n\t\t\t\t\t\ttype: 'text'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*\n    \tPush the last run of unmatched text before we go.\n    */\n\n\t\tif (firstUnmatchedIndex < index) {\n\t\t\tparentToken.addChild({\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: src.slice(firstUnmatchedIndex, index),\n\t\t\t\tinnerMode: (frontTokenStack && frontTokenStack.length\n\t\t\t\t\t? frontTokenStack[0]\n\t\t\t\t\t: parentToken\n\t\t\t\t).innerMode\n\t\t\t});\n\t\t}\n\t\t/*\n    \tWe're done, except that we may still have unmatched frontTokens.\n    */\n\n\t\twhile (frontTokenStack && frontTokenStack.length > 0) {\n\t\t\tfrontTokenStack.shift().demote();\n\t\t}\n\n\t\treturn parentToken;\n\t}\n\t/*\n  \tTo waylay speed concerns, the tokens are passed in as tuples:\n  \tthe token object itself, and its index within the parentToken's\n  \tchildren array.\n  */\n\n\tfunction foldTokens(parentToken, backToken, frontToken) {\n\t\t/*\n    \tHaving found a matching pair of tokens, we fold them together.\n    \tFor convenience, let's promote the Back token (currently, \"child\")\n    \tinto the folded-up single token.\n    */\n\t\tvar backTokenIndex = parentToken.children.indexOf(backToken),\n\t\t\tfrontTokenIndex = parentToken.children.indexOf(frontToken);\n\t\t/*\n    \tFirst, find the tokens enclosed by the pair, and make them the\n    \tBack token's children.\n    */\n\n\t\tbackToken.children = parentToken.children.splice(\n\t\t\tfrontTokenIndex + 1,\n\t\t\t/*\n    \tThis quantity selects only those after the Front token\n    \tand before the Back token.\n    */\n\t\t\tbackTokenIndex - (frontTokenIndex + 1)\n\t\t);\n\t\t/*\n    \tChange its type to the actual type, without the \"Back\" suffix.\n    \t\n    \tRecall that a Back token's \"matches\" array maps Front token types\n    \t(the key) to full token types (the value).\n    */\n\n\t\tbackToken.type = backToken.matches[frontToken.type];\n\t\t/*\n    \tChange its text and innerText to reflect its contents.\n    */\n\n\t\tbackToken.innerText = '';\n\n\t\tfor (var i = 0, l = backToken.children.length; i < l; i++) {\n\t\t\tbackToken.innerText += backToken.children[i].text;\n\t\t}\n\t\t/*\n    \tGive it the correct start index.\n    */\n\n\t\tbackToken.start = frontToken.start;\n\t\t/*\n    \tThe text includes the original enclosing tokens around the\n    \tinnerText.\n    \t\n    \tIn the case of a hook, this reflects the syntax structure:\n    \t\"[\" + hook contents + \"]\"\n    */\n\n\t\tbackToken.text = frontToken.text + backToken.innerText + backToken.text;\n\t\t/*\n    \tCopy other properties that the Front token possesses but\n    \tthe Back token does not.\n    \t\n    \tAssumption: that the Back token and Front token will never\n    \thave colliding props. If so, then they are left as they are.\n    \t\n    \tThis uses Object.keys() because Chrome deopts for-in over\n    \tthe frontToken object.\n    */\n\n\t\tfor (var key in frontToken) {\n\t\t\tif (\n\t\t\t\thasOwnProperty.call(frontToken, key) &&\n\t\t\t\t!hasOwnProperty.call(backToken, key)\n\t\t\t) {\n\t\t\t\tbackToken[key] = frontToken[key];\n\t\t\t}\n\t\t}\n\t\t/*\n    \tDo not inherit the isFront property from the frontToken.\n    */\n\n\t\tif (backToken.isFront) {\n\t\t\tbackToken.isFront = false;\n\t\t}\n\t\t/*\n    \tRemove the Front token.\n    */\n\n\t\tparentToken.children.splice(frontTokenIndex, 1);\n\t}\n\t/*\n  \tThis is the returned object representing the lexer inner state.\n  */\n\n\tLexer = {\n\t\t/*\n    \tThe main function.\n    \tThis returns the entire set of tokens, rooted in a \"root\"\n    \ttoken that has all of tokenMethods's methods.\n    \tPlace holds the original passage name of the code, and is used for\n    \tpure value computation in Runner.\n    \tFlat refers to whether the tokens are folded (front and back\n    \ttokens converted into a single subtree node).\n    */\n\t\tlex: function lex(src) {\n\t\t\tvar place =\n\t\t\t\targuments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\t\t\tvar innerMode =\n\t\t\t\targuments.length > 2 && arguments[2] !== undefined\n\t\t\t\t\t? arguments[2]\n\t\t\t\t\t: 'start';\n\t\t\tvar flat =\n\t\t\t\targuments.length > 3 && arguments[3] !== undefined\n\t\t\t\t\t? arguments[3]\n\t\t\t\t\t: false;\n\t\t\treturn _lex(\n\t\t\t\tnew Token({\n\t\t\t\t\ttype: 'root',\n\t\t\t\t\tplace: place,\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tend: src.length,\n\t\t\t\t\ttext: src,\n\t\t\t\t\tinnerText: src,\n\t\t\t\t\tchildren: [],\n\t\t\t\t\tinnerMode: Lexer.modes[innerMode]\n\t\t\t\t}),\n\t\t\t\t!flat\n\t\t\t);\n\t\t},\n\n\t\t/*\n    \tThe (initially empty) rules object should be augmented with\n    \twhatever rules the language requires.\n    */\n\t\trules: rules,\n\n\t\t/*\n    \tThe (initially empty) modes object should be filled with\n    \tthe language's modes, as well.\n    */\n\t\tmodes: {}\n\t};\n\n\tif (\n\t\t(typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object'\n\t) {\n\t\tmodule.exports = Lexer;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine('lexer', [], function () {\n\t\t\treturn Lexer;\n\t\t});\n\t} // Loaded as a story format in TwineJS 2.3.\n\telse if (this && this.loaded) {\n\t\tthis.modules || (this.modules = {});\n\t\tthis.modules.Lexer = Lexer;\n\t} // Loaded in TwineJS 2.4.\n\telse {\n\t\tthis.Lexer = Lexer;\n\t}\n}.call(eval('this') || (typeof global !== 'undefined' ? global : window)));\n/*\n\tThe Patterns are the raw strings used by the lexer to match tokens.\n\tThese are used primarily by the Markup module, where they are attached to\n\tlexer rules.\n*/\n\n/*jshint strict:true*/\n\n(function () {\n\t'use strict';\n\n\tvar Patterns;\n\t/*\n  \tEscapes characters in a string so that RegExp(str) produces a valid regex.\n  */\n\n\tfunction escape(str) {\n\t\t// This function may also accept objects, whereupon it applies itself\n\t\t// to every enumerable in the object.\n\t\tif (str && _typeof(str) === 'object') {\n\t\t\tObject.keys(str).forEach(function (e) {\n\t\t\t\tstr[e] = escape(str[e]);\n\t\t\t});\n\t\t\treturn str;\n\t\t}\n\n\t\treturn (str + '').replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n\t}\n\t/*\n  \tA sugar REstring function for negative character sets.\n  \tThis escapes its input.\n  */\n\n\tfunction /* variadic */\n\tnotChars() {\n\t\treturn '[^' + Array.apply(0, arguments).map(escape).join('') + ']*';\n\t}\n\t/*\n  \tCreates sugar functions which put multiple REstrings into parentheses, separated with |,\n  \tthus producing a capturer or a lookahead.\n  \tThis does NOT escape its input.\n  */\n\n\tfunction makeWrapper(starter) {\n\t\treturn function () /* variadic */\n\t\t{\n\t\t\treturn '(' + starter + Array.apply(0, arguments).join('|') + ')';\n\t\t};\n\t}\n\n\tvar either = makeWrapper('?:'),\n\t\tnotBefore = makeWrapper('?!'),\n\t\tbefore = makeWrapper('?=');\n\tvar /*d:\n  \tWhitespace markup\n  \t\t\"Whitespace\" is a term that refers to \"space\" characters that you use to separate programming code tokens,\n  \tsuch as the spacebar space, and the tab character. They are considered interchangeable in type and quantity -\n  \tusing two spaces usually has the same effect as using one space, one tab, and so forth.\n  \t\tHarlowe tries to also recognise most forms of [Unicode-defined whitespace](https://en.wikipedia.org/wiki/Whitespace_character#Unicode),\n  \tincluding the quads, the per-em and per-en spaces, but not the zero-width space characters (as they may\n  \tcause confusion and syntax errors if unnoticed in your code).\n  \t\t#whitespace 1\n  */\n\t\t// This includes all forms of Unicode 6 whitespace except \\n, \\r, and Ogham space mark.\n\t\tws =\n\t\t\t'[ \\\\f\\\\t\\\\v\\\\u00a0\\\\u2000-\\\\u200a\\\\u2028\\\\u2029\\\\u202f\\\\u205f\\\\u3000]*',\n\t\t// Mandatory whitespace\n\t\tmws = ws.replace('*', '+'),\n\t\t// Word break\n\t\twb = '\\\\b',\n\t\t//Escaped line\n\t\tescapedLine = '\\\\\\\\\\\\n\\\\\\\\?|\\\\n\\\\\\\\',\n\t\t// Line break without postfix escape\n\t\tbr = '\\\\n(?!\\\\\\\\)',\n\t\t// Handles Unicode ranges not covered by \\w.\n\t\t// This includes every surrogate pair character, but doesn't check their order or pairing.\n\t\tanyLetter =\n\t\t\t'[\\\\w\\\\-\\\\u00c0-\\\\u00de\\\\u00df-\\\\u00ff\\\\u0150\\\\u0170\\\\u0151\\\\u0171\\\\uD800-\\\\uDFFF]',\n\t\t// Identical to the above, but excludes hyphens.\n\t\tanyLetterStrict = anyLetter.replace('\\\\-', ''),\n\t\teol = either('\\\\n', '$'),\n\t\t/*d:\n  \tBulleted list markup\n  \t\tYou can create bullet-point lists in your text by beginning lines with an asterisk `*`, followed by whitespace,\n  \tfollowed by the list item text. The asterisk will be replaced with an indented bullet-point. Consecutive lines\n  \tof bullet-point items will be joined into a single list, with appropriate vertical spacing.\n  \t\tRemember that there must be whitespace between the asterisk and the list item text! Otherwise, this markup\n  \twill conflict with the emphasis markup.\n  \t\tIf you use multiple asterisks (`**`, `***` etc.) for the bullet, you will make a nested list, which is indented deeper than\n  \ta normal list. Use nested lists for \"children\" of normal list items.\n  \t\n  \tExample usage:\n  \t```\n  \t * Bulleted item\n  \t    *    Bulleted item 2\n  \t  ** Indented bulleted item\n  \t```\n  \t\t#list\n  */\n\t\tbullet = '\\\\*',\n\t\tbulleted = ws + '(' + bullet + '+)' + mws,\n\t\t/*d:\n  \tNumbered list markup\n  \t\tYou can create numbered lists in your text, which are similar to bulleted lists, but feature numbers in place of bullets.\n  \tSimply begin single lines with `0.`, followed by whitespace, followed by the list item text. Consecutive items will be\n  \tjoined into a single list, with appropriate vertical spacing. Each of the `0.`s will be replaced\n  \twith a number corresponding to the item's position in the list.\n  \t\tRemember that there must be whitespace between the `0.` and the list item text! Otherwise, it will be regarded as a plain\n  \tnumber.\n  \t\tIf you use multiple `0.` tokens (`0.0.`, `0.0.0.` etc.) for the bullet, you will make a nested list, which uses different\n  \tnumbering from outer lists, and are indented deeper. Use nested lists for \"children\" of normal list items.\n  \t\tExample usage:\n  \t```\n  \t0. Numbered item\n  \t   0. Numbered item 2\n  \t 0.0. Indented numbered item\n  \t```\n  \t\t#list\n  */\n\t\tnumberPoint = '(?:0\\\\.)',\n\t\tnumbered = ws + '(' + numberPoint + '+)' + mws,\n\t\t/*d:\n  \tHorizontal rule markup\n  \t\tA hr (horizontal rule) is a thin horizontal line across the entire passage. In HTML, it is a `<hr>` element.\n  \tIn Harlowe, it is an entire line consisting of 3 or more consecutive hyphens `-`.\n  \t\tExample usage:\n  \t```\n  \t        ---\n  \t  ----\n  \t     -----\n  \t```\n  \tAgain, opening whitespace is permitted prior to the first `-` and after the final `-`.\n  \t\t#section\n  */\n\t\thr = ws + '-{3,}' + ws + eol,\n\t\t/*d:\n  \tHeading markup\n  \t\tHeading markup is used to create large headings, such as in structured prose or title splash passages.\n  \tIt is almost the same as the Markdown heading syntax: it starts on a fresh line,\n  \thas one to six consecutive `#`s, and ends at the line break.\n  \t\tExample usage:\n  \t```\n  \t#Level 1 heading renders as an enclosing `<h1>`\n  \t   ###Level 3 heading renders as an enclosing `<h3>`\n  \t ######Level 6 heading renders as an enclosing `<h6>`\n  \t```\n  \t\tAs you can see, unlike in Markdown, opening whitespace is permitted before the first #.\n  \t\t#section\n  */\n\t\theading = ws + '(#{1,6})' + ws,\n\t\t/*d:\n  \tAligner markup\n  \t\tAn aligner is a special single-line token which specifies the alignment of the subsequent text. It is essentially\n  \t'modal' - all text from the token onward (until another aligner is encountered) is wrapped in a `<tw-align>` element\n  \t(or unwrapped in the case of left-alignment, as that is the default).\n  \t\t * Right-alignment, resembling `==>`~ is produced with 2 or more `=`s followed by a `>`.\n  \t * Left-alignment, resembling `<==`~ is restored with a `<` followed by 2 or more `=`.\n  \t * Justified alignment, resembling `<==>`~ is produced with `<`, 2 or more `=`, and a closing `>`.\n  \t * Mixed alignment is 1 or more `=`, then `><`, then 1 or more `=`. The ratio of quantity of left `=`s and right `=`s determines\n  \tthe alignment: for instance, one `=` to the left and three `=`s to the right produces 25% left alignment.\n  \t\n  \tAny amount of whitespace is permitted before or after each token, as long as it is on a single line.\n  \t\tExample usage:\n  \t```\n  \t==>\n  \tThis is right-aligned\n  \t  =><=\n  \tThis is centered\n  \t <==>\n  \tThis is justified\n  \t<==\n  \tThis is left-aligned (undoes the above)\n  \t===><=\n  \tThis has margins 3/4 left, 1/4 right\n  \t  =><=====\n  \tThis has margins 1/6 left, 5/6 right.\n  \t\t(Try expanding this code preview using the bar on the left.)\n  \t```\n  \t\tYou may apply alignment to specific hooks in your passages by attaching the (align:) macro to them.\n  \t\t#section\n  */\n\t\talign = ws + '(==+>|<=+|=+><=+|<==+>)' + ws + eol,\n\t\t/*d:\n  \tColumn markup\n  \t\tColumn markup is, like aligner markup, a special single-line token which indicates that the subsequent text should be laid out in columns. They consist of a number of `|` marks, indicating the size of the column relative to the other columns - the total width of all columns equals the page width, and this is divided among the columns by their `|` marks. They also have a number of `=` marks surrounding it, indicating the size of the column's margins in CSS \"em\" units (which are about the width of a capital M).\n  \t\tAll text from the token onward, until the next token is encountered, is contained in the specified column. A `|==|` token ends the set of columns and returns the page to normal.\n  \t\tColumns are laid out from left to right, in order of appearance.\n  \t\n  \tAny amount of whitespace is permitted before or after each token, as long as it is on a single line.\n  \t\tExample usage:\n  \t```\n  \t(change:?passage, (text-size:0.6))\n  \t|==\n  \tThis is in the leftmost column, which has a right margin of about 2 letters wide.\n  \t    =|||=\n  \tThis is in the next column, which has margins of 1 letter wide. It is three times as wide as the left column.\n  \t =====||\n  \tThis is in the right column, which has a right margin of about 5 letters wide. It is twice as wide as the left column.\n  \t  |==|\n  \tThis text is not in columns, but takes up the entire width, as usual.\n  \t\t(Try expanding this code preview using the bar on the left.)\n  \t```\n  \t\tYou can create nested columns by enclosing the inner set of columns in an unnamed hook, like so.\n  \t```\n  \t(change:?passage, (text-size:0.6))\n  \t|==\n  \tThis is the outer left column.\n  \t==|\n  \tThis is the outer right column.\n  \t[\\\n  \t  |==\n  \tThis is the inner left column, inside the outer right column.\n  \t  ==|\n  \tThis is the inner right column, inside the outer right column.\n  \t\\]\n  \t```\n  \t\t#section\n  */\n\t\tcolumn = ws + '(=+\\\\|+|\\\\|+=+|=+\\\\|+=+|\\\\|=+\\\\|)' + ws + eol,\n\t\t/*d:\n  \tLink markup\n  \t\tHyperlinks are the player's means of moving between passages and affecting the story. They consist of\n  \t*link text*, which the player clicks on, and a *passage name* to send the player to.\n  \t\tInside matching non-nesting pairs of `[[` and `]]`, place the link text and the passage name,\n  \tseparated by either `->` or `<-`, with the arrow pointing to the passage name.\n  \t\tYou can also write a shorthand form, where there is no `<-` or `->` separator.\n  \tThe entire content is treated as a passage name, and its evaluation is treated as the link text.\n  \t\tExample usage:\n  \t```\n  \t[[Go to the cellar->Cellar]] is a link that goes to a passage named \"Cellar\".\n  \t[[Parachuting<-Jump]] is a link that goes to a passage named \"Parachuting\".\n  \t[[Down the hatch]] is a link that goes to a passage named \"Down the hatch\".\n  \t```\n  \t\tDetails:\n  \t\tThe interior of a link (the text between `[[` and `]]`) may contain any character except `]`. If additional\n  \t`->`s or `<-`s appear, the rightmost right arrow or leftmost left arrow is regarded as the canonical separator.\n  \t* `[[A->B->C->D->E]]` has a link text of \"A->B->C->D\" and a passage name of \"E\"\n  \t* `[[A<-B<-C<-D<-E]]` has a link text of \"B<-C<-D<-E\" and a passage name of \"A\".\n  \t\tIf the passage name of a link does not exactly match that of an existing passage, but it does if you render the\n  \tmarkup in or around it, then Harlowe will use that name. So, you can put markup inside the link, as well as variables\n  \tor value macros like (either:).\n  \t* `[[//Seagulls!//]]` will link to the passage named \"//Seagulls!//\" if it exists, or the passage named \"Seagulls!\" if that exists.\n  \t* `[[Shelly?->$shellyPlace]]` is a link that goes to the passage whose name is in the variable `$shellyPlace`.\n  \t\tHowever, you can't put commands or changers in the passage name. `[[Really, now.->(print:$explain)]]` will cause an error.\n  \t\tLinks can be customised by attaching changer macros, like (transition-depart:) or (text-style:). Just\n  \tplace one in front of the link, like so: `(t8n-depart:\"dissolve\")[[Recall that day]]` - or attach a variable containing\n  \tone: `$memory[[Recall that day]]`. You can also customise every link in the passage using (change:) or (enchant:), and ?Link.\n  \t\tThis syntax is not the only way to create links – there are many link macros, such as (link:), which can\n  \tbe used to make more versatile hyperlinks in your story.\n  \t\t#basics\n  */\n\t\tpassageLink = {\n\t\t\topener: '\\\\[\\\\[(?!\\\\[)',\n\t\t\ttext: '(' + notChars(']') + ')',\n\t\t\trightSeparator: either('\\\\->', '\\\\|'),\n\t\t\tleftSeparator: '<\\\\-',\n\t\t\tcloser: '\\\\]\\\\]',\n\t\t\tlegacySeparator: '\\\\|',\n\t\t\tlegacyText: '(' + either('[^\\\\|\\\\]]', '\\\\]' + notBefore('\\\\]')) + '+)'\n\t\t},\n\t\t/*\n  \tThis determines the valid characters for a property name. Sadly, \"-\" is not allowed.\n  \tAs of 1.1, this must include at least 1 non-numeral non-underscore.\n  */\n\t\tvalidPropertyName =\n\t\t\tanyLetterStrict +\n\t\t\t'*' +\n\t\t\tanyLetterStrict.replace('\\\\w', 'a-zA-Z') +\n\t\t\tanyLetterStrict +\n\t\t\t'*',\n\t\t/*d:\n  \tVariable markup\n  \t\n  \tAs described in the documentation for the (set:) macro, variables are used to remember data values\n  \tin your game, keep track of the player's status, and so forth. They start with `$` (for normal variables)\n  \tor `_` (for temp variables, which only exist inside a single passage, hook or lambda).\n  \t\tDue to this syntax potentially conflicting with dollar values (such as $1.50) in your story text,\n  \tvariables cannot begin with a numeral.\n  \t\tYou can print the contents of variables, or any further items within them, using the (print:) and (for:)\n  \tmacros. Or, if you only want to print a single variable, you can just enter the variable's name directly\n  \tin your passage's prose.\n  \t\t```\n  \t(set: $plushieName to \"Whispy\", _heldItem to \"briefcase\")\n  \tYour beloved plushie, $plushieName, awaits you after a long work day.\n  \tYou put your _heldItem down and lift it for a snuggle.\n  \t```\n  \t\tFurthermore, if the variable contains a changer command, such as that created by (text-style:) and such,\n  \tthen the variable can be attached to a hook to apply the changer to the hook:\n  \t\t```\n  \t(set: $robotText to (font:\"Courier New\"), _assistantText to (size:0.8))\n  \t$robotText[Good golly! Your flesh... it's so soft!]\n  \t_assistantText[Don't touch me, please! I'm ticklish.]\n  \t```\n  \t\t**Note:** While you can normally display the contents of variables by simply placing their names directly in passage prose,\n  \tsuch as `$ship` or `$crew`, you have to use another macro, such as (print:), to display the contents of arrays, datamaps, or other structures,\n  \tsuch as `(print: $ship's mast)` or `(print: $crew's 1st)`.\n  \t\t**Note 2:** Even though named hooks' names are case-insensitive, variable names are case-sensitive. So, `$Chips` and `$chips` are considered\n  \tdifferent variables.\n  \t\t**Note 3:** In Harlowe 3, If you use a story-wide variable that doesn't exist (that is, it hasn't been created via (set:), (put:), and so forth), then\n  \ta default value of 0 will be used in its place. So, `(print: $nonexistantVariable)` will show the text \"0\". This is likely to change in a future version\n  \tof Harlowe, however.\n  \t\t#coding 2\n  */\n\t\tvariable = '\\\\$(' + validPropertyName + ')',\n\t\ttempVariable = '_(' + validPropertyName + ')',\n\t\tproperty = \"'s\" + mws + '(' + validPropertyName + ')',\n\t\tbelongingProperty =\n\t\t\t'(' + validPropertyName + ')' + mws + 'of' + wb + notBefore('it' + wb),\n\t\t/*\n  \tComputed properties are of the form:\n  \t$a's (expression)\n  \tor\n  \t(expression) of $a\n  */\n\t\tpossessiveOperator = \"'s\" + mws,\n\t\t/*\n  \tComputed properties are of the form:\n  \t$a's (expression)\n  */\n\t\tbelongingOperator = 'of' + wb,\n\t\t/*\n  \tIdentifiers: either \"it\", \"time\", \"visit\", \"visits\", \"exit\", \"exits\", or \"pos\".\n  \t\"it\" is a bit of a problem because its possessive is \"its\", not \"it's\",\n  \tso we can't use a derivation similar to property.\n  */\n\t\tidentifier =\n\t\t\teither('it', 'time', 'turns?', 'visits?', 'exits?', 'pos') + wb,\n\t\titsProperty = 'its' + mws + '(' + validPropertyName + ')',\n\t\titsOperator = 'its' + wb,\n\t\tbelongingItProperty =\n\t\t\t'(' + validPropertyName + ')' + mws + 'of' + mws + 'it' + wb,\n\t\tbelongingItOperator = 'of' + mws + 'it' + wb,\n\t\tmacro = {\n\t\t\topener: '\\\\(',\n\t\t\tname:\n\t\t\t\t'(' + either('\\\\$', '_') + '?' + anyLetter + '+):' + notBefore('\\\\/'),\n\t\t\tcloser: '\\\\)'\n\t\t},\n\t\ttwine1Macro =\n\t\t\t'<<[^>\\\\s]+\\\\s*(?:\\\\\\\\.|\\'(?:[^\\'\\\\\\\\]*\\\\\\\\.)*[^\\'\\\\\\\\]*\\'|\"(?:[^\"\\\\\\\\]*\\\\\\\\.)*[^\"\\\\\\\\]*\"|[^\\'\"\\\\\\\\>]|>(?!>))*>>',\n\t\tincorrectOperator = either(\n\t\t\t'=<',\n\t\t\t'=>',\n\t\t\t'[gl]te?' + wb,\n\t\t\t'n?eq' + wb,\n\t\t\t'isnot' + wb,\n\t\t\t'are' + wb,\n\t\t\t'x' + wb,\n\t\t\t'isa' + wb,\n\t\t\t'or' + mws + 'a' + wb\n\t\t),\n\t\ttag = {\n\t\t\tname: '[a-zA-Z][\\\\w\\\\-]*',\n\t\t\tattrs: '(?:\"[^\"]*\"|\\'[^\\']*\\'|[^\\'\">])*?'\n\t\t},\n\t\thookTagFront = '\\\\|(' + anyLetter + '+)(>|\\\\))',\n\t\thookTagBack = '(<|\\\\()(' + anyLetter + '+)\\\\|',\n\t\tnumber =\n\t\t\t'((?:\\\\b\\\\d+(?:\\\\.\\\\d+)?|\\\\.\\\\d+)(?:[eE][+\\\\-]?\\\\d+)?)' +\n\t\t\tnotBefore('m?s') +\n\t\t\twb;\n\tpassageLink.main =\n\t\tpassageLink.opener +\n\t\teither(\n\t\t\tpassageLink.text + passageLink.rightSeparator,\n\t\t\t/*\n  \tThe rightmost right arrow or leftmost left arrow\n  \tis regarded as the canonical separator.\n  \n  \t[[A->B->C->D->E]] has a link text of\n  \t\tA->B->C->D\n  \t\tand a passage name of\n  \t\tE\n  \n  \t[[A<-B<-C<-D<-E]] has a link text of\n  \t\tB<-C<-D<-E\n  \t\tand a passage name of\n  \t\tA\n  \n  \tThus, the left separator's preceding text must be non-greedy.\n  */\n\t\t\tpassageLink.text.replace('*', '*?') + passageLink.leftSeparator\n\t\t) +\n\t\tpassageLink.text;\n\t/*\n  \tReturn the Patterns object.\n  \t\n  \tNote that some of these properties are \"opener\" objects, which are used by the\n  \tlexer. It's a bit #awkward having them alongside the string properties like this,\n  \tkeyed to a similar but otherwise disconnected property name...\n  */\n\n\tPatterns = {\n\t\tupperLetter: '[A-Z\\\\u00c0-\\\\u00de\\\\u0150\\\\u0170]',\n\t\tlowerLetter: '[a-z0-9_\\\\-\\\\u00df-\\\\u00ff\\\\u0151\\\\u0171]',\n\t\tanyLetter: anyLetter,\n\t\tanyLetterStrict: anyLetterStrict,\n\t\t// This is used only for macroMode, NOT markup modes.\n\t\twhitespace: mws.replace('[', '[\\\\n\\\\r'),\n\n\t\t/*d:\n    \tEscaped line break markup\n    \t\n    \tSometimes, you may want to write an especially long line, potentially containing many macros.\n    \tThis may not be particularly readable in the passage editor, though. One piece of markup that\n    \tmay help you is the `\\` mark - placing it just before a line break, or just after it, will cause the line break\n    \tto be removed from the passage, thus \"joining together\" the lines.\n    \t\tExample usage:\n    \t```\n    \tThis line \\\n    \tand this line\n    \t\\ and this line, are actually just one line.\n    \t```\n    \t\tDetails:\n    \tThere must not be any whitespace between the `\\` and the line break. Otherwise, it won't work.\n    \t\tLike most passage text markup, this cannot be used inside a macro call (for instance, `(print: \\`<br>\n    \t`3)`) - but since line breaks between values in macro calls are ignored, this doesn't matter.\n    \t\t#whitespace 4\n    */\n\t\tescapedLine: escapedLine,\n\t\tbr: br,\n\n\t\t/*d:\n    \tHTML markup\n    \t\tIf you are familiar with them, HTML tags (like `<img>`) and HTML escapes (like `&sect;`) can be inserted\n    \tstraight into your passage text. They are treated very naively - they essentially pass through Harlowe's\n    \tmarkup-to-HTML conversion process untouched.\n    \t\tExample usage:\n    \t```\n    \t<mark>This is marked text.\n    \t\t&para; So is this.\n    \t\tAnd this.</mark>\n    \t```\n    \t\tDetails:\n    \t\tHTML elements included in this manner are given a `data-raw` attribute by Harlowe, to distinguish them\n    \tfrom elements created via markup.\n    \t\tYou can include a `<script>` tag in your passage to run Javascript code. The code will run as soon as the\n    \tcontaining passage code is rendered. See the \"HTML script tag\" article for more details.\n    \t\tYou can also include a `<style>` tag containing CSS code. The CSS should affect the entire page\n    \tuntil the element is removed from the DOM. You could use this in a \"header\" or \"footer\" tagged passage, inside an (if:) hook,\n    \tto make the CSS apply to every passage where the (if:) condition is fulfilled.\n    \t\tFinally, you can also include HTML comments `<!-- Comment -->` in your code, if you wish to leave\n    \treminder messages or explanations about the passage's code to yourself.\n    \t\t#extra\n    */\n\t\ttag: '<\\\\/?' + tag.name + tag.attrs + '>',\n\n\t\t/*\n    \t<textarea> elements also have the exemption from their contents being interpreted as Harlowe code.\n    */\n\t\tscriptStyleTag:\n\t\t\t'<(' +\n\t\t\teither('script', 'style', 'textarea') +\n\t\t\t')' +\n\t\t\ttag.attrs +\n\t\t\t'>' +\n\t\t\t'[^]*?' +\n\t\t\t'<\\\\/\\\\1>',\n\t\tscriptStyleTagOpener: '<',\n\t\turl:\n\t\t\t'(' +\n\t\t\teither('https?', 'mailto', 'javascript', 'ftp', 'data') +\n\t\t\t':\\\\/\\\\/[^\\\\s<]+[^<.,:;\"\\')\\\\]\\\\s])',\n\t\tbullet: bullet,\n\t\thr: hr,\n\t\theading: heading,\n\t\talign: align,\n\t\tcolumn: column,\n\t\tbulleted: bulleted,\n\t\tnumbered: numbered,\n\n\t\t/*d:\n    \tVerbatim markup\n    \t\tAs plenty of symbols have special uses in Harlowe, you may wonder how you can use them normally, as mere symbols,\n    \twithout invoking their special functionality. You can do this by placing them between a pair of `` ` `` marks.\n    \t\tIf you want to escape a section of text which already contains single `` ` `` marks, simply increase the number\n    \tof `` ` `` marks used to enclose them.\n    \t\tExample usage:\n    \t* ```I want to include `[[double square brackets]]` in my story, so I use grave ` marks.```\n    \t* ```I want to include ``single graves ` in my story``, so I place them between two grave marks.```\n    \t\n    \tThere's no hard limit to the amount of graves you can use to enclose the text.\n    \t\tIf you want to make an entire hook to be displayed verbatim, without its markup being rendered,\n    \tyou can attach the (verbatim:) changer.\n    \t\t#extra\n    */\n\n\t\t/*\n    \tThe verbatim syntax does not \"nest\", but terminals can be\n    \tdifferentiated by adding more ` marks to each pair.\n    */\n\t\tverbatimOpener: '`+',\n\n\t\t/*d:\n    \tNamed hook markup\n    \t\tFor a general introduction to hooks, see their respective markup description. Named hooks are a less common type of\n    \thook that offer unique benefits. To produce one, instead of attaching a macro, attach a \"nametag\" to the front or back:\n    \t\t```\n    \t[This hook is named 'opener']<opener|\n    \t\t|s2>[This hook is named 's2']\n    \t```\n    \t\t(Hook nametags are supposed to resemble triangular gift box nametags.)\n    \t\tA macro can refer to and alter the text content of a named hook by referring to the hook as if it were a variable.\n    \tTo do this, write the hook's name as if it were a variable, but use the `?` symbol in place of the `$` symbol:\n    \t\t```\n    \t[Fie and fuggaboo!]<shout|\n    \t\t(click: ?shout)[ (replace: ?shout)[\"Blast and damnation!\"] ]\n    \t```\n    \t\tThe above (click:) and (replace:) macros can remotely refer to and alter the hook using its name. This lets you,\n    \tfor instance, write a section of text full of tiny hooks, and then attach behaviour to them further in the passage:\n    \t\t```\n    \tYour [ballroom gown]<c1| is [bright red]<c2| with [silver streaks]<c3|,\n    \tand covered in [moonstones]<c4|.\n    \t\t[]<c5|\n    \t(click: ?c1)[(replace:?c5)[A hand-me-down from your great aunt.]]\n    \t(click: ?c2)[(replace:?c5)[A garish shade, to your reckoning.]]\n    \t(click: ?c3)[(replace:?c5)[Only their faint shine keeps them from being seen as grey.]]\n    \t(click: ?c4)[(replace:?c5)[Dreadfully heavy, they weigh you down and make dancing arduous.]]\n    \t```\n    \t\tAs you can see, the top sentence remains mostly readable despite the fact that several words have (click:) behaviours\n    \tassigned to them.\n    \t\tBuilt in names:\n    \t\tThere are four special built-in hook names, ?Page, ?Passage, ?Sidebar, and ?Link, which, in addition to selecting named hooks,\n    \talso affect parts of the page that you can't normally style with macros. They can be styled using the (change:) or (enchant:) macros.\n    \t\t* `?Page` selects the page element (to be precise, the `<tw-story>` element) and using it with the (change:) and (bg:) macros lets you\n    \tchange the background of the entire page.\n    \t* `?Passage` affects just the element that contains the current passage's text (to be precise, the `<tw-passage>` element) and lets you,\n    \tfor instance, change the (text-colour:) or (font:) of all the text, or apply complex (css:) to it.\n    \t* `?Sidebar` selects the passage's sidebar containing undo/redo icons (`<tw-sidebar>`). You can style it with styling macros, or use\n    \t(replace:) or (append:) to insert your own text into it.\n    \t* `?Link` selects all of the links (passage links, and those created by (link:) and other macros) in the passage. This is similar to the\n    \t`links` data value for HookName data.\n    \t\t(Note that, as mentioned above, if you use these names for your own hooks, such as by creating a named hook like `|passage>[]`,\n    \tthen they will, of course, be included in the selections of these names.)\n    \t\t#coding 4\n    */\n\n\t\t/*d:\n    \tHidden hook markup\n    \t\tHidden hooks are an advanced kind of named hook that can be shown using macros like (show:). For a general introduction to\n    \tnamed hooks, see their respective markup description.\n    \t\tThere may be hooks whose contained prose you don't want to be visible as soon as the passage appears -\n    \ta time delay, or the click of a link should be used to show them. You can set a hook to be *hidden* by altering\n    \tthe hook tag syntax - replace the `>` or `<` mark with a parenthesis.\n    \t\t```\n    \t|visible>[This hook is visible when the passage loads.]\n    \t|cloaked)[This hook is hidden when the passage loads, and needs a macro like `(show:?cloaked)` to reveal it.]\n    \t\t[My commanding officer - a war hero, and a charismatic face for the military.]<sight|\n    \t[Privately, I despise the man. His vacuous boosterism makes a mockery of my sacrifices.](thoughts|\n    \t```\n    \t\t(You can think of this as being visually similar to the pointed tails of comic speech balloons vs. round, enclosed\n    \tthought balloons.)\n    \t\tIn order to be useful, hidden hooks must have a name, which macros like (show:) can use to show them. Hence,\n    \tthere's no way to make a hidden unnamed hook - at least, without using a conditional macro like (if:).\n    \t\t#coding 5\n    */\n\t\thookAppendedFront: '\\\\[' + notBefore('=+'),\n\t\thookPrependedFront: hookTagFront + '\\\\[' + notBefore('=+'),\n\n\t\t/*d:\n    \tHook markup\n    \t\tA hook is a means of indicating that a specific span of passage prose is special in some way. It\n    \tessentially consists of text between single `[` and `]` marks. Prose inside a hook can be modified, styled,\n    \tcontrolled and analysed in a variety of ways using macros.\n    \t\tA hook by itself, such as `[some text]`, is not very interesting. However, if you attach a macro or a\n    \tvariable to the front, the attached value is used to change the hook in some way, such as hiding\n    \tit based on the game state, altering the styling of its text, moving its text to elsewhere in the passage.\n    \t\t```\n    \t(font: \"Courier New\")[This is a hook.\n    \t\tAs you can see, this has a macro instance in front of it.]\n    \tThis text is outside the hook.\n    \t```\n    \t\tThe (font:) macro is one of several macros which produces a special styling changer, instead of a basic\n    \tdata type like a number or a string. In this case, the changer changes the attached hook's font to Courier New,\n    \twithout modifying the other text.\n    \t\tYou can save this changer to a variable, and then use it repeatedly, like so.\n    \t```\n    \t(set: $x to (font: \"Tahoma\"))\n    \t$x[This text is in Tahoma.]\n    \t$x[As is this text.]\n    \t```\n    \t\tThe basic (if:) macro is used by attaching it to a hook, too.\n    \t\t```\n    \t(if: $x is 2)[This text is only displayed if $x is 2.]\n    \t```\n    \t\tFor more information about changer macros, consult the descriptions for each of them in turn.\n    \t\t#coding 3\n    */\n\t\thookFront: '\\\\[' + notBefore('=+'),\n\t\thookBack: '\\\\]' + notBefore(hookTagBack),\n\t\thookAppendedBack: '\\\\]' + hookTagBack,\n\n\t\t/*d:\n    \tUnclosed hook markup\n    \t\tThis is a special version of the hook markup - an open bracket `[`, followed by any number of `=` marks, that has no matching\n    \tclosing bracket. When it is placed in a passage, it indicates that all the prose that follows, until the end of the hook\n    \tthat contains it or the end of the passage, is part of a single hook.\n    \t\tIts main purpose is to let you easily deploy hook changers that apply to the remaining text of the passage, without having\n    \tto place and keep track of closing brackets at the end. For instance, the (click:) macro can be used with the ?page hook name\n    \tto prompt the reader to click anywhere on the page to reveal the rest of the passage. The unclosed hook markup lets you use\n    \tit as many times as you want, without needing to balance a number of closing brackets at the end of the passage.\n    \t\t```\n    \t(click: ?page)[==\n    \tThis text won't appear until the page is clicked once.\n    \t(click: ?page)[==\n    \tThis text won't appear until the page is clicked twice.\n    \t(click: ?page)[==\n    \tThis text won't appear until the page is clicked three times.\n    \t```\n    \t\tOther changer macros, such as (link:), (more:), (event:), and (transition:), also work well with this markup.\n    \t\tAlso, unclosed hooks can be named, and marked as hidden, just like other hooks.\n    \t```\n    \t|1>[=\n    \tThe rest of this passage is in a hook named \"1\".\n    \t|2)[=\n    \tThis part is also in a hidden hook named \"2\".\n    \t```\n    \t\t#coding 6\n    */\n\t\tunclosedHook: '\\\\[=+',\n\t\tunclosedHookPrepended: hookTagFront + '\\\\[=+',\n\n\t\t/*d:\n    \tUnclosed collapsing whitespace markup\n    \t\tThis is a special version of the collapsing whitespace markup - an open curly brace `{`, followed by any number of `=` marks, that has no matching\n    \tclosing brace. When it is placed in a passage, it indicates that all the prose that follows, until the end of the hook\n    \tthat contains it or the end of the passage, should have its whitespace collapsed.\n    \t\tAs with the the unclosed hook markup, this has advantages in situations where keeping track of closing brackets would be slightly inconvenient.\n    \tIf you use revision macros or enchantment macros like (change:), (replace:), (click:) and so forth, you can place those at the end of\n    \tyour passage, and use a single `{=` to separate them from the rest of the passage. Additionally, you can place a `{=` at the start of your passage\n    \tto cause the entire passage's whitespace to be collapsed, allowing you to write additional prose without needing to have a closing brace after all of\n    \tyour additions.\n    \t\t```\n    \tThis part of the passage\n    \thas normal whitespace.\n    \t{=\n    \tThis part of the passage\n    \thas collapsed\n    \twhitespace.\n    \t```\n    \t\tAll of the details pertaining to the collapsing markup apply here - consult its article for more information.\n    \t\t#whitespace 3\n    */\n\t\tunclosedCollapsed: '\\\\{=+',\n\t\tpassageLink: passageLink.main + passageLink.closer,\n\t\tlegacyLink:\n\t\t\t/*\n    \t[[A|B]] has a link text of\n    \t\tA\n    \t\tand a passage name of\n    \t\tB\n    \t\n    \tThis isn't preferred because it's the reverse of MediaWiki's links.\n    */\n\t\t\tpassageLink.opener +\n\t\t\tpassageLink.legacyText +\n\t\t\tpassageLink.legacySeparator +\n\t\t\tpassageLink.legacyText +\n\t\t\tpassageLink.closer,\n\t\tsimpleLink:\n\t\t\t/*\n    \tAs long as legacyLink remains in the grammar,\n    \tuse legacyText here to disambiguate.\n    */\n\t\t\tpassageLink.opener + passageLink.legacyText + passageLink.closer,\n\n\t\t/*d:\n    \tMacro markup\n    \t\tA macro is a piece of code that is inserted into passage text. Macros are used to accomplish many effects,\n    \tsuch as altering the game's state, displaying different text depending on the game's state, and altering\n    \tthe manner in which text is displayed.\n    \t\tBuilt in macros:\n    \t\tThere are many built-in macros in Harlowe. To use one, you must *call* upon it in your passage by writing\n    \tthe name, a colon, and some data values to provide it, all in parentheses. For instance, you call the (print:)\n    \tmacro like so: `(print: 54)`. In this example, `print` is the macro's name, and `54` is the value.\n    \t\tThe name of the macro is case-insensitive, dash-insensitive and underscore-insensitive. This means that\n    \talmost any combination of case, dashes and underscores in the name will be ignored. You can, for instance, write\n    \t`(go-to:)` as `(goto:)`, `(Goto:)`, `(GOTO:)`, `(GoTo:)`, `(Go_To:)`, `(Got--o:)`, `(-_-_g-o-t-o:)`, or \n    \talmost any other combination or variation. There is, however, ONE exception: the name cannot start with an underscore\n    \t_, because that would make it a temp variable.\n    \t\tCustom macros:\n    \t\tIn addition to built-in macros, it is also possible to write your own macros, using the (macro:) macro. You need\n    \tto save these macros inside a variable or temp variable using the (set:) macro. Once you've done so, you can call it\n    \tmuch like it was a built-in macro, except by replacing the name with the variable: `($someCustomMacro:)` is how you would\n    \tcall a custom macro stored in the variable $someCustomMacro, and `(_anotherCustomMacro:)` is how you would\n    \tcall a custom macro stored in the temp variable _anotherCustomMacro. Note that you can't use dataname access to\n    \tuse macros that are inside arrays or datamaps: `($array's 1st:)` is, unfortunately, not a valid custom macro call.\n    \t\tPassing data:\n    \t\tYou can provide any type of data values to a macro call - numbers, strings, booleans, and so forth. These\n    \tcan be in any form, as well - `\"Red\" + \"belly\"` is an expression that produces a single string, \"Redbelly\",\n    \tand can be used anywhere that the joined string can be used. Variables, too, can be used with macros, if\n    \ttheir contents matches what the macro expects. So, if `$var` contains the string \"Redbelly\", then `(print: $var)`,\n    \t`(print: \"Redbelly\")` and `(print: \"Red\" + \"belly\")` are exactly the same.\n    \t\tFurthermore, each macro call produces a value itself - (num:), for instance, produces a number, (a:) an array - so\n    \tthey too can be nested inside other macro calls. `(if: (num:\"5\") > 2)` nests the (num:) macro inside the (if:) macro.\n    \t\tIf a macro can or should be given multiple values, separate them with commas. You can give the `(a:)` macro\n    \tthree numbers like so: `(a: 2, 3, 4)`. The final value may have a comma after it, or it may not - `(a: 2, 3, 4,)`\n    \tis equally valid. Also, if you have a data value that's an array, string or dataset, you can \"spread out\" all\n    \tof its values into the macro call by using the `...` operator: `(either: ...$array)` will act as if every value in\n    \t$array was placed in the (either:) macro call separately\n    \t\tHistorical note:\n    \t\tYou might notice that the majority of Harlowe macros are not, strictly speaking, [macros in the computer-science sense](https://en.wikipedia.org/wiki/Macro_%28computer_science%29), but are\n    \tmore like functions. This is purely due to historical circumstance - the original Twine 1 story format, Jonah, was based on [TiddlyWiki](https://tiddlywiki.com/)'s engine,\n    \twhich features parameterised transclusions called \"macros\". These are closer to computer-science macros in that they actually transclude markup directly into the\n    \ttiddler (TiddlyWiki's term for \"passage\"). Thus, only Harlowe command macros like (display:) can really be considered \"proper\" macros.\n    \t\t#coding 1\n    */\n\t\tmacroFront: macro.opener + before(macro.name),\n\t\tmacroName: macro.name,\n\n\t\t/*\n    \tThis must be differentiated from macroFront\n    */\n\t\tgroupingFront: '\\\\(' + notBefore(macro.name),\n\t\ttwine1Macro: twine1Macro,\n\n\t\t/*\n    \tProperty accesses\n    */\n\t\tvalidPropertyName: validPropertyName,\n\t\tproperty: property,\n\t\tbelongingProperty: belongingProperty,\n\t\tpossessiveOperator: possessiveOperator,\n\t\tbelongingOperator: belongingOperator,\n\t\titsOperator: itsOperator,\n\t\tbelongingItOperator: belongingItOperator,\n\t\tvariable: variable,\n\t\ttempVariable: tempVariable,\n\t\thookName: '\\\\?(' + anyLetter + '+)\\\\b',\n\n\t\t/*\n    \tArtificial types (non-JS primitives, semantic sugar)\n    */\n\t\tcssTime: '(\\\\d+\\\\.?\\\\d*|\\\\d*\\\\.?\\\\d+)(m?s)' + wb,\n\t\tcolour: either(\n\t\t\t// Hue name\n\t\t\teither(\n\t\t\t\t'Red',\n\t\t\t\t'Orange',\n\t\t\t\t'Yellow',\n\t\t\t\t'Lime',\n\t\t\t\t'Green',\n\t\t\t\t'Cyan',\n\t\t\t\t'Aqua',\n\t\t\t\t'Blue',\n\t\t\t\t'Navy',\n\t\t\t\t'Purple',\n\t\t\t\t'Fuchsia',\n\t\t\t\t'Magenta',\n\t\t\t\t'White',\n\t\t\t\t'Gray',\n\t\t\t\t'Grey',\n\t\t\t\t'Black',\n\t\t\t\t'Transparent'\n\t\t\t), // Hexadecimal\n\t\t\t'#[\\\\dA-Fa-f]{3}(?:[\\\\dA-Fa-f]{3})?'\n\t\t),\n\t\t// Data types\n\t\tdatatype:\n\t\t\teither(\n\t\t\t\t'alnum',\n\t\t\t\t'alphanumeric',\n\t\t\t\t'any(?:case)?',\n\t\t\t\t'array',\n\t\t\t\t'bool(?:ean)?',\n\t\t\t\t'changer',\n\t\t\t\t'codehook',\n\t\t\t\t'colou?r',\n\t\t\t\t'const',\n\t\t\t\t'command',\n\t\t\t\t'dm',\n\t\t\t\t'data' + either('map', 'type', 'set'),\n\t\t\t\t'ds',\n\t\t\t\t'digit',\n\t\t\t\t'gradient',\n\t\t\t\t'empty',\n\t\t\t\t'even',\n\t\t\t\t'int' + notBefore('o') + '(?:eger)?',\n\t\t\t\t'lambda',\n\t\t\t\t'lowercase',\n\t\t\t\t'macro',\n\t\t\t\t'linebreak',\n\t\t\t\t'newline',\n\t\t\t\t'num(?:ber)?',\n\t\t\t\t'odd',\n\t\t\t\t'str(?:ing)?',\n\t\t\t\t'uppercase',\n\t\t\t\t'whitespace'\n\t\t\t) + wb,\n\n\t\t/*\n    \tNatural types\n    */\n\t\tnumber: number,\n\t\tboolean: either('true', 'false') + wb,\n\t\t// Special identifiers\n\t\tidentifier: identifier,\n\t\titsProperty: itsProperty,\n\t\tbelongingItProperty: belongingItProperty,\n\t\t// This sad-looking property is designed to disambiguate escaped quotes inside string literals.\n\t\tescapedStringChar: '\\\\\\\\[^\\\\n]',\n\t\tsingleStringOpener: \"'\",\n\t\tdoubleStringOpener: '\"',\n\n\t\t/*\n    \tThis doubled-up name is used for the special closers inside the \"string\" mode.\n    */\n\t\tsingleStringCloser: \"'\",\n\t\tdoubleStringCloser: '\"',\n\n\t\t/*\n    \tMacro operators\n    */\n\t\tis:\n\t\t\t'is' +\n\t\t\tnotBefore(\n\t\t\t\tmws + 'not' + wb,\n\t\t\t\tmws + 'an?' + wb,\n\t\t\t\tmws + 'in' + wb,\n\t\t\t\tmws + '<',\n\t\t\t\tmws + '>'\n\t\t\t) +\n\t\t\twb,\n\t\tisNot: 'is' + mws + 'not' + notBefore(mws + either('an?', 'in') + wb) + wb,\n\t\tisA: 'is' + mws + 'an?' + wb,\n\t\tisNotA: 'is' + mws + 'not' + mws + 'an?' + wb,\n\t\tmatches: 'matches' + wb,\n\t\tdoesNotMatch: 'does' + mws + 'not' + mws + 'match' + wb,\n\t\t// \"matches\" has no \"contains\" equivalent, but you can use \"some of $c matches t\"\n\t\tand: 'and' + wb,\n\t\tor: 'or' + wb,\n\t\tnot: 'not' + wb,\n\t\tinequality:\n\t\t\t'((?:is(?:' +\n\t\t\tmws +\n\t\t\t'not)?' +\n\t\t\tws +\n\t\t\t')*)(' +\n\t\t\teither('<(?!=)', '<=', '>(?!=)', '>=') +\n\t\t\t')',\n\t\tisIn: 'is' + mws + 'in' + wb,\n\t\tcontains: 'contains' + wb,\n\t\tdoesNotContain: 'does' + mws + 'not' + mws + 'contain' + wb,\n\t\tisNotIn: 'is' + mws + 'not' + mws + 'in' + wb,\n\t\taddition: escape('+') + notBefore('='),\n\t\tsubtraction: escape('-') + notBefore('=', 'type'),\n\t\tmultiplication: escape('*') + notBefore('='),\n\t\tdivision: either('/', '%') + notBefore('='),\n\t\tspread: '\\\\.\\\\.\\\\.' + notBefore('\\\\.'),\n\t\tto: either('to' + wb, '='),\n\t\tinto: 'into' + wb,\n\t\tmaking: 'making' + wb,\n\t\twhere: 'where' + wb,\n\t\twhen: 'when' + wb,\n\t\tvia: 'via' + wb,\n\t\teach: 'each' + wb,\n\t\taugmentedAssign: either('\\\\+', '\\\\-', '\\\\*', '\\\\/', '%') + '=',\n\t\tbind: '2?bind' + wb,\n\t\ttypeSignature: escape('-type') + wb,\n\t\tincorrectOperator: incorrectOperator,\n\t\tPlainCompare: {\n\t\t\tcomma: ',',\n\n\t\t\t/*\n      \tTwine currently just uses HTML comment syntax for comments.\n      */\n\t\t\tcommentFront: '<!--',\n\t\t\tcommentBack: '-->',\n\n\t\t\t/*d:\n      \tStyle markup\n      \t\tIt's expected that you'd want to apply styles to your text – to italicise a word in dialogue,\n      \tfor example. You can do this with simple formatting codes that\n      \tare similar to the double brackets of a link. Here is what's available to you:\n      \t\t| Styling | Markup code | Result | HTML produced\n      \t|---\n      \t| Italics | `//text//` | <i>text</i> |`<i>text</i>`\n      \t| Boldface | `''text''` | <b>text</b> |`<b>text</b>`\n      \t| Strikethrough text | `~~text~~` | <s>text</s> | `<s>text</s>`\n      \t| Emphasis | `*text*` | *text* |`<em>text</em>`\n      \t| Strong emphasis | `**text**` | **text** |`<strong>text</strong>`\n      \t| Superscript | `meters/second^^2^^` | meters/second<sup>2</sup> | `meters/second<sup>2</sup>`\n      \t\tEmphasis and strong emphasis appear identical to italics and boldface by default (though they can be changed\n      \tusing CSS) and are offered for those with familiarity with the Markdown language. Italics and boldface are offered\n      \tfor those with familiarity with SugarCube, Twine 1, or TiddlyWiki.\n      \t\tThe alternative Markdown emphasis syntax `_text_` and `__text__` is not available. Harlowe reserves the use of the _\n      \tcharacter for temp variables.\n      \t\tExample usage:\n      \t```\n      \tYou //can't// be serious! I have to go through the ''whole game''\n      \tagain? ^^Jeez, louise!^^\n      \t```\n      \t\tDetails:\n      \tYou can nest these codes - `''//text//''` will produce ***bold italics*** - but they must nest\n      \tsymmetrically. `''//text''//` will not work.\n      \t\tA larger variety of text styles can be produced by using the (text-style:) macro, attaching it to\n      \ta text hook you'd like to style. And, furthermore, you can use HTML tags like `<mark>` as an additional\n      \tstyling option.\n      \t\t#basics\n      */\n\t\t\tstrikeOpener: '~~',\n\t\t\titalicOpener: '//',\n\t\t\tboldOpener: \"''\",\n\t\t\tsupOpener: '^^',\n\n\t\t\t/*\n      \tTo avoid ambiguities between adjacent strong and em openers,\n      \tthese must be specified as separate front and back tokens\n      \twith different precedence.\n      */\n\t\t\tstrongFront: '**',\n\t\t\tstrongBack: '**',\n\t\t\temFront: '*',\n\t\t\temBack: '*',\n\n\t\t\t/*d:\n      \tCollapsing whitespace markup\n      \t\tWhen working with macros, HTML tags and such, it's convenient for readability purposes to space and indent\n      \tthe text. However, this whitespace will also appear in the compiled passage text. You can get around this by\n      \tplacing the text between `{` and `}` marks. Inside, all runs of consecutive whitespace (line breaks, spaces)\n      \twill be reduced to just one space.\n      \t\tExample usage:\n      \t```\n      \t{\n      \t\tThis sentence\n      \t\twill be\n      \t\t(set: $event to true)\n      \t\twritten on one line\n      \t\twith only single spaces.\n      \t}\n      \t```\n      \t\tDetails:\n      \t\tIf you wish to still have line breaks within the markup that won't be collapsed, you can use HTML `<br>` tags (see\n      \tthe HTML markup section for more information about raw HTML tags).\n      \t\tYou can nest this markup within itself - `{Good  { gumballs!}}` - but the inner pair won't behave any\n      \tdifferently as a result of being nested.\n      \t\tText inside macro calls (in particular, text inside strings provided to macro) will not be collapsed.\n      \tNeither will text *outputted* by macro calls, either - `{(print:\"   \")}` will still print all 3 spaces,\n      \tand `{(display:\"Attic\")}` will still display all of the whitespace in the \"Attic\" passage.\n      \t\tAlso, text inside the verbatim syntax, such as `` Thunder`   `hound ``, will not be collapsed either.\n      \t\tIf the markup contains a (replace:) command attached to a hook, the hook will still have its whitespace\n      \tcollapsed, even if it is commanded to replace text outside of the markup.up.\n      \t\tYou may apply this collapsing effect to specific hooks using the (collapse:) macro. In particular,\n      \tif you wish for the entire passage's whitespace to collapse, consider using (change: ?passage) and (collapse:).\n      \t\tIf you only want to remove specific line breaks, consider the escaped line break markup.\n      \t\t#whitespace 2\n      */\n\t\t\tcollapsedFront: '{',\n\t\t\tcollapsedBack: '}',\n\t\t\tgroupingBack: ')'\n\t\t}\n\t};\n\n\tif (\n\t\t(typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object'\n\t) {\n\t\tmodule.exports = Patterns;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine('patterns', [], function () {\n\t\t\treturn Patterns;\n\t\t});\n\t} // Loaded as a story format in TwineJS 2.3.\n\telse if (this && this.loaded) {\n\t\tthis.modules || (this.modules = {});\n\t\tthis.modules.Patterns = Patterns;\n\t} // Loaded in TwineJS 2.4.\n\telse {\n\t\tthis.Patterns = Patterns;\n\t}\n}.call(eval('this') || (typeof global !== 'undefined' ? global : window)));\n/*\n\tTwineMarkup, by Leon Arnott.\n\tThis module, alongside the Patterns module, defines the standard syntax of Harlowe.\n*/\n\n/*jshint strict:true*/\n\n(function () {\n\t'use strict';\n\n\tvar Patterns;\n\t/*\n  \tPolyfill for Object.assign()\n  */\n\n\tObject.assign =\n\t\tObject.assign ||\n\t\tfunction polyfilledAssign(\n\t\t\tobj\n\t\t\t/* variadic */\n\t\t) {\n\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\tvar target = arguments[i];\n\n\t\t\t\tfor (var key in target) {\n\t\t\t\t\tif (hasOwnProperty.call(target, key)) {\n\t\t\t\t\t\tobj[key] = target[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t};\n\n\tvar keys = Object.keys,\n\t\tassign = Object.assign;\n\t/*\n  \tWhen passed a Lexer object, this function augments it with rules.\n  */\n\n\tfunction rules(Lexer) {\n\t\t/*\n    \tCreates a function that pushes a token with innerText;\n    \tdesigned for styling rules like **strong** or //italic//.\n    \t\n    \tIf given a second parameter, that is used as the property name\n    \tinstead of \"innerText\"\n    */\n\t\tfunction textTokenFn(name) {\n\t\t\tname = name || 'innerText';\n\t\t\treturn function (match) {\n\t\t\t\t/*\n        \tThis function returns the rightmost non-zero array-indexed value.\n        \tIt's designed for matches created from regexes that only have 1 group.\n        */\n\t\t\t\tvar innerText = match.reduceRight(function (a, b, index) {\n\t\t\t\t\t\treturn a || (index ? b : '');\n\t\t\t\t\t}, ''),\n\t\t\t\t\tdata = {};\n\t\t\t\tdata[name] = innerText;\n\t\t\t\treturn data;\n\t\t\t};\n\t\t}\n\t\t/*\n    \tCreates a function that pushes a token which is its own front and back:\n    \ta token for symmetrical enclosing syntax, such as //italic//.\n    \tThe foldedName is the type of the final token, once a pair of these is folded.\n    */\n\n\t\tfunction openerFn(name, foldedName) {\n\t\t\tvar matches = {};\n\t\t\tmatches[name] = foldedName;\n\t\t\treturn function () {\n\t\t\t\treturn {\n\t\t\t\t\tisFront: true,\n\t\t\t\t\tmatches: matches,\n\t\t\t\t\tcannotCross: ['verbatimOpener']\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t\t/*\n    \tUsed as a token fn to provide an empty object with no properties,\n    \tregardless of the function's input.\n    */\n\n\t\tvar emptyFn = Object.bind(0, null);\n\t\t/*\n    \tAlters the rules object's fn methods, so that their returned objects\n    \thave 'type', 'match' and 'innerMode' properties assigned to them.\n    */\n\n\t\tfunction setupRules(mode, target) {\n\t\t\t/*\n      \tIterate over every rule in the object (the \"target\").\n      */\n\t\t\tObject.keys(target).forEach(function (ruleName) {\n\t\t\t\t/*\n        \tFirst, take the function to wrap. Originally this used Function#bind(),\n        \tbut speed paranoia suggests a simpler solution.\n        */\n\t\t\t\tvar innerFn = target[ruleName].fn;\n\t\t\t\t/*\n        \tThen, wrap it as follows:\n        */\n\n\t\t\t\ttarget[ruleName].fn = function (match) {\n\t\t\t\t\t/*\n          \tCall the wrapped function and obtain its result.\n          */\n\t\t\t\t\tvar ret = innerFn(match);\n\t\t\t\t\t/*\n          \tAttach the matched text, if it isn't already.\n          */\n\n\t\t\t\t\tif (!ret.text) {\n\t\t\t\t\t\tret.text = typeof match === 'string' ? match : match[0];\n\t\t\t\t\t}\n\t\t\t\t\t/*\n          \tGive the returned data a type if it didn't\n          \talready have one. Currently no rules have a type which\n          \tvaries from the name of the rule.\n          */\n\n\t\t\t\t\tif (!ret.type) {\n\t\t\t\t\t\tret.type = ruleName;\n\t\t\t\t\t}\n\t\t\t\t\t/*\n          \tThe mode of a token is determined solely by\n          \twhich category of rules it is in.\n          */\n\n\t\t\t\t\tif (!ret.innerMode) {\n\t\t\t\t\t\tret.innerMode = mode;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ret;\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn target;\n\t\t}\n\n\t\tvar /*\n    \tModes determine which rules are applicable when. They are (or will be)\n    \tarrays of string keys of the allRules object.\n    */\n\n\t\t\t/*\n    \tThe standard TwineMarkup mode.\n    */\n\t\t\tmarkupMode = [],\n\t\t\t/*\n    \tThe contents of macro tags - expressions and other macros.\n    */\n\t\t\tmacroMode = [],\n\t\t\t/*\n    \tThe contents of strings - just escaped characters and closing quote marks.\n    */\n\t\t\tstringMode = [];\n\t\t/*\n    \tThese rules objects contain each ordered category of rules.\n    \t(blockRules and inlineRules are currently only differentiated\n    \tfor categorisation purposes - they are both equally usable in\n    \tMarkup Mode.)\n    */\n\n\t\tvar blockRules = setupRules(markupMode, {\n\t\t\t/*\n      \tFirst, the block rules.\n      */\n\t\t\thr: {\n\t\t\t\tfn: emptyFn\n\t\t\t},\n\t\t\tbulleted: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdepth: match[1].length\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tnumbered: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdepth: match[1].length / 2\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\theading: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdepth: match[1].length\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/*\n      \tText align syntax\n      \t\n      \t==>      : right-aligned\n      \t=><=     : centered\n      \t<==>     : justified\n      \t<==      : left-aligned (undoes the above)\n      \t===><=   : margins 3/4 left, 1/4 right\n      \t=><===== : margins 1/6 left, 5/6 right, etc.\n      */\n\t\t\talign: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\tvar align;\n\t\t\t\t\tvar arrow = match[1],\n\t\t\t\t\t\tcenterIndex = arrow.indexOf('><');\n\n\t\t\t\t\tif (~centerIndex) {\n\t\t\t\t\t\t/*\n            \tFind the left-align value\n            \t(Since offset-centered text is centered,\n            \thalve the left-align - hence I multiply by 50 instead of 100\n            \tto convert to a percentage.)\n            */\n\t\t\t\t\t\talign = Math.round((centerIndex / (arrow.length - 2)) * 50);\n\n\t\t\t\t\t\tif (align === 25) {\n\t\t\t\t\t\t\talign = 'center';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (arrow[0] === '<' && arrow.slice(-1) === '>') {\n\t\t\t\t\t\talign = 'justify';\n\t\t\t\t\t} else if (arrow.indexOf('>') > -1) {\n\t\t\t\t\t\talign = 'right';\n\t\t\t\t\t} else if (arrow.indexOf('<') > -1) {\n\t\t\t\t\t\talign = 'left';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\talign: align\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/*\n      \tText column syntax\n      \t\n      \t==|      : right column, width 1\n      \t=|=      : center column\n      \t|==      : left column\n      \t|==|     : no columns\n      \t==|||    : right column, width 3\n      */\n\t\t\tcolumn: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\tvar column;\n\t\t\t\t\tvar arrow = match[1],\n\t\t\t\t\t\tcenterIndex = arrow.indexOf('|');\n\n\t\t\t\t\tif (centerIndex && centerIndex < arrow.length - 1) {\n\t\t\t\t\t\tcolumn = 'center';\n\t\t\t\t\t} else if (arrow[0] === '|' && arrow.slice(-1) === '|') {\n\t\t\t\t\t\tcolumn = 'none';\n\t\t\t\t\t} else if (centerIndex === arrow.length - 1) {\n\t\t\t\t\t\tcolumn = 'right';\n\t\t\t\t\t} else if (!centerIndex) {\n\t\t\t\t\t\tcolumn = 'left';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcolumn: column,\n\t\t\t\t\t\twidth: /\\|+/.exec(arrow)[0].length,\n\t\t\t\t\t\tmarginLeft: /^=*/.exec(arrow)[0].length,\n\t\t\t\t\t\tmarginRight: /=*$/.exec(arrow)[0].length\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t/*\n    \tAll block rules have a single specific canFollow and cannotFollow.\n    */\n\n\t\tvar blockRuleConstraint = function blockRuleConstraint(prev) {\n\t\t\tswitch (prev && prev.type) {\n\t\t\t\tcase null:\n\t\t\t\tcase 'br':\n\t\t\t\tcase 'hr':\n\t\t\t\tcase 'bulleted':\n\t\t\t\tcase 'numbered':\n\t\t\t\tcase 'heading':\n\t\t\t\tcase 'align':\n\t\t\t\tcase 'column':\n\t\t\t\tcase 'escapedLine':\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tkeys(blockRules).forEach(function (key) {\n\t\t\tblockRules[key].constraint = blockRuleConstraint;\n\t\t\tblockRules[key].cannotFollowText = true;\n\t\t});\n\t\t/*\n    \tNow, the inline rules.\n    */\n\n\t\tvar inlineRules = setupRules(markupMode, {\n\t\t\t/*\n      \tThis is a legacy match that simply provides\n      \tan error to those who have mistakenly deployed Twine 1\n      \tmacro syntax in Twine 2.\n      */\n\t\t\ttwine1Macro: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t'Harlowe macros use a different syntax to Twine 1, SugarCube, and Yarn macros.'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/*\n      \tThe order of these four is strictly important. As the back and front versions\n      \tuse identical tokens, back tokens should appear first. And, the order of em and strong\n      \tshould be swapped for the front tokens.\n      \tThis allows the following syntax to be parsed correctly:\n      \t***A*** -> <em><strong>A</strong></em>\n      */\n\t\t\temBack: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmatches: {\n\t\t\t\t\t\t\temFront: 'em'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcannotCross: ['verbatimOpener']\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tstrongBack: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmatches: {\n\t\t\t\t\t\t\tstrongFront: 'strong'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcannotCross: ['verbatimOpener']\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tstrongFront: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisFront: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\temFront: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisFront: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tboldOpener: {\n\t\t\t\tfn: openerFn('boldOpener', 'bold')\n\t\t\t},\n\t\t\titalicOpener: {\n\t\t\t\tfn: openerFn('italicOpener', 'italic')\n\t\t\t},\n\t\t\tstrikeOpener: {\n\t\t\t\tfn: openerFn('strikeOpener', 'strike')\n\t\t\t},\n\t\t\tsupOpener: {\n\t\t\t\tfn: openerFn('supOpener', 'sup')\n\t\t\t},\n\t\t\tcommentFront: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisFront: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tcommentBack: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmatches: {\n\t\t\t\t\t\t\tcommentFront: 'comment'\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\t// This must come before the generic tag rule\n\t\t\tscriptStyleTag: {\n\t\t\t\tfn: emptyFn\n\t\t\t},\n\t\t\ttag: {\n\t\t\t\tfn: emptyFn\n\t\t\t},\n\t\t\turl: {\n\t\t\t\tfn: emptyFn\n\t\t\t},\n\t\t\thookPrependedFront: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: match[1],\n\t\t\t\t\t\thidden: match[2] === ')',\n\t\t\t\t\t\tisFront: true,\n\t\t\t\t\t\ttagPosition: 'prepended'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\thookFront: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisFront: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\thookBack: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmatches: {\n\t\t\t\t\t\t\t// Matching front token : Name of complete token\n\t\t\t\t\t\t\thookPrependedFront: 'hook',\n\t\t\t\t\t\t\thookFront: 'hook'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcannotCross: ['verbatimOpener']\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\thookAppendedBack: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: match[2],\n\t\t\t\t\t\thidden: match[1] === '(',\n\t\t\t\t\t\ttagPosition: 'appended',\n\t\t\t\t\t\tmatches: {\n\t\t\t\t\t\t\thookFront: 'hook'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcannotCross: ['verbatimOpener']\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tunclosedHook: {\n\t\t\t\tfn: emptyFn\n\t\t\t},\n\t\t\tunclosedHookPrepended: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'unclosedHook',\n\t\t\t\t\t\tname: match[1],\n\t\t\t\t\t\thidden: match[2] === ')'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tverbatimOpener: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\tvar number = match[0].length,\n\t\t\t\t\t\tmatches = {};\n\t\t\t\t\tmatches['verbatim' + number] = 'verbatim';\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'verbatim' + number,\n\t\t\t\t\t\tisFront: true,\n\t\t\t\t\t\tmatches: matches,\n\t\t\t\t\t\t// This is an unfortunate hack to allow this token\n\t\t\t\t\t\t// to match with a cannotCross of \"verbatimOpener\".\n\t\t\t\t\t\taka: 'verbatimOpener'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tunclosedCollapsed: {\n\t\t\t\tfn: emptyFn\n\t\t\t},\n\t\t\tcollapsedFront: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisFront: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tcollapsedBack: {\n\t\t\t\tfn: function fn() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmatches: {\n\t\t\t\t\t\t\tcollapsedFront: 'collapsed'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcannotCross: ['verbatimOpener']\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tescapedLine: {\n\t\t\t\tfn: emptyFn\n\t\t\t},\n\t\t\tlegacyLink: {\n\t\t\t\tfn: function fn(match) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'twineLink',\n\t\t\t\t\t\tinnerText: match[1],\n\t\t\t\t\t\tpassage: match[2],\n\t\t\t\t\t\tinnerMode: markupMode\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/*\n      \tLike GitHub-Flavoured Markdown, Twine preserves line breaks\n      \twithin paragraphs.\n      */\n\t\t\tbr: {\n\t\t\t\tfn: emptyFn\n\t\t\t}\n\t\t});\n\t\t/*\n    \tExpression rules.\n    */\n\n\t\tvar expressionRules = assign(\n\t\t\tsetupRules(macroMode, {\n\t\t\t\tmacroFront: {\n\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tisFront: true,\n\t\t\t\t\t\t\tname: match[1]\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tgroupingBack: {\n\t\t\t\t\tfn: function fn() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmatches: {\n\t\t\t\t\t\t\t\tgroupingFront: 'grouping',\n\t\t\t\t\t\t\t\tmacroFront: 'macro'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcannotCross: ['singleStringOpener', 'doubleStringOpener']\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/*\n      \tPassage links desugar to (link-goto:) calls, so they can\n      \tbe used in expression position.\n      */\n\t\t\t\tpassageLink: {\n\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\tvar p1 = match[1] || '',\n\t\t\t\t\t\t\tp2 = match[2] || '',\n\t\t\t\t\t\t\tp3 = match[3] || '';\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: 'twineLink',\n\t\t\t\t\t\t\tinnerText: p2 ? p3 : p1,\n\t\t\t\t\t\t\tpassage: p1 ? p3 : p2,\n\t\t\t\t\t\t\tinnerMode: markupMode\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsimpleLink: {\n\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: 'twineLink',\n\t\t\t\t\t\t\tinnerText: match[1] || '',\n\t\t\t\t\t\t\tpassage: match[1] || '',\n\t\t\t\t\t\t\tinnerMode: markupMode\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvariable: {\n\t\t\t\t\tconstraint: function constraint(prev) {\n\t\t\t\t\t\treturn !prev || prev.type !== 'macroFront';\n\t\t\t\t\t},\n\t\t\t\t\tfn: textTokenFn('name')\n\t\t\t\t},\n\t\t\t\ttempVariable: {\n\t\t\t\t\tconstraint: function constraint(prev) {\n\t\t\t\t\t\treturn !prev || prev.type !== 'macroFront';\n\t\t\t\t\t},\n\t\t\t\t\tfn: textTokenFn('name')\n\t\t\t\t}\n\t\t\t}),\n\t\t\t{\n\t\t\t\t/*\n      \tPlain unappended hooks are allowed in expression position as well as\n      \tinline position. This is implemented by copying the fully-set-up rules\n      \tfrom inlineRules.\n      */\n\t\t\t\thookFront: inlineRules.hookFront,\n\t\t\t\thookBack: inlineRules.hookBack\n\t\t\t}\n\t\t);\n\t\t/*\n    \tNow, macro code rules.\n    */\n\n\t\tvar macroRules = setupRules(\n\t\t\tmacroMode,\n\t\t\tassign(\n\t\t\t\t{\n\t\t\t\t\tmacroName: {\n\t\t\t\t\t\t// This must be the first token inside a macro.\n\t\t\t\t\t\tconstraint: function constraint(prev) {\n\t\t\t\t\t\t\treturn prev && prev.type === 'macroFront';\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfn: textTokenFn('name')\n\t\t\t\t\t},\n\t\t\t\t\tgroupingFront: {\n\t\t\t\t\t\tfn: function fn() {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tisFront: true\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t/*\n      \tWarning: the property pattern \"'s\" conflicts with the string literal\n      \tpattern - \"$a's b's\" resembles a string literal. To ensure that\n      \tthe former is always matched first, this rule must come before it.\n      */\n\t\t\t\t\tproperty: {\n\t\t\t\t\t\tfn: textTokenFn('name'),\n\t\t\t\t\t\tconstraint: function constraint(prev) {\n\t\t\t\t\t\t\tif (prev) {\n\t\t\t\t\t\t\t\tswitch (prev.type) {\n\t\t\t\t\t\t\t\t\tcase 'variable':\n\t\t\t\t\t\t\t\t\tcase 'hookName':\n\t\t\t\t\t\t\t\t\tcase 'property':\n\t\t\t\t\t\t\t\t\tcase 'tempVariable':\n\t\t\t\t\t\t\t\t\tcase 'colour':\n\t\t\t\t\t\t\t\t\tcase 'itsProperty':\n\t\t\t\t\t\t\t\t\tcase 'belongingItProperty':\n\t\t\t\t\t\t\t\t\tcase 'macro':\n\t\t\t\t\t\t\t\t\tcase 'grouping':\n\t\t\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\t\t\t/*\n              \tThese must also be included so that the correct error can be reported.\n              */\n\n\t\t\t\t\t\t\t\t\tcase 'datatype':\n\t\t\t\t\t\t\t\t\tcase 'hook':\n\t\t\t\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tpossessiveOperator: {\n\t\t\t\t\t\tfn: emptyFn\n\t\t\t\t\t},\n\t\t\t\t\titsProperty: {\n\t\t\t\t\t\tcannotFollowText: true,\n\t\t\t\t\t\tfn: textTokenFn('name')\n\t\t\t\t\t},\n\t\t\t\t\titsOperator: {\n\t\t\t\t\t\tcannotFollowText: true,\n\t\t\t\t\t\tfn: emptyFn\n\t\t\t\t\t},\n\n\t\t\t\t\t/*\n      \tSince this is a superset of the belongingProperty rule,\n      \tthis must come before it.\n      */\n\t\t\t\t\tbelongingItProperty: {\n\t\t\t\t\t\tcannotFollowText: true,\n\t\t\t\t\t\tfn: textTokenFn('name')\n\t\t\t\t\t},\n\t\t\t\t\tbelongingItOperator: {\n\t\t\t\t\t\tcannotFollowText: true,\n\t\t\t\t\t\tfn: emptyFn\n\t\t\t\t\t},\n\t\t\t\t\tbelongingProperty: {\n\t\t\t\t\t\tcannotFollowText: true,\n\t\t\t\t\t\tfn: textTokenFn('name')\n\t\t\t\t\t},\n\t\t\t\t\tbelongingOperator: {\n\t\t\t\t\t\tcannotFollowText: true,\n\t\t\t\t\t\tfn: emptyFn\n\t\t\t\t\t},\n\t\t\t\t\tescapedStringChar: {\n\t\t\t\t\t\tfn: function fn() {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttype: 'text'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsingleStringOpener: {\n\t\t\t\t\t\tfn: function fn() {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tisFront: true,\n\t\t\t\t\t\t\t\tmatches: {\n\t\t\t\t\t\t\t\t\tsingleStringOpener: 'string'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tinnerMode: stringMode\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdoubleStringOpener: {\n\t\t\t\t\t\tfn: function fn() {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tisFront: true,\n\t\t\t\t\t\t\t\tmatches: {\n\t\t\t\t\t\t\t\t\tdoubleStringOpener: 'string'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tinnerMode: stringMode\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\thookName: {\n\t\t\t\t\t\tfn: textTokenFn('name')\n\t\t\t\t\t},\n\t\t\t\t\tcssTime: {\n\t\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tvalue: +match[1] * (match[2].toLowerCase() === 's' ? 1000 : 1)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdatatype: {\n\t\t\t\t\t\tcannotFollowText: true,\n\t\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tname: match[0].toLowerCase()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tcolour: {\n\t\t\t\t\t\tcannotFollowText: true,\n\n\t\t\t\t\t\t/*\n        \tThe colour names are translated into hex codes here,\n        \trather than later in TwineScript.\n        */\n\t\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\t\tvar colour,\n\t\t\t\t\t\t\t\tm = match[0].toLowerCase(),\n\t\t\t\t\t\t\t\t/*\n          \tThese colours are only at 80% saturation, so that\n          \tauthors using them as bare colours aren't unwittingly\n          \tusing horridly oversaturated shades.\n          */\n\t\t\t\t\t\t\t\tmapping = {\n\t\t\t\t\t\t\t\t\tred: 'e61919',\n\t\t\t\t\t\t\t\t\torange: 'e68019',\n\t\t\t\t\t\t\t\t\tyellow: 'e5e619',\n\t\t\t\t\t\t\t\t\tlime: '80e619',\n\t\t\t\t\t\t\t\t\tgreen: '19e619',\n\t\t\t\t\t\t\t\t\tcyan: '19e5e6',\n\t\t\t\t\t\t\t\t\taqua: '19e5e6',\n\t\t\t\t\t\t\t\t\tblue: '197fe6',\n\t\t\t\t\t\t\t\t\tnavy: '1919e6',\n\t\t\t\t\t\t\t\t\tpurple: '7f19e6',\n\t\t\t\t\t\t\t\t\tfuchsia: 'e619e5',\n\t\t\t\t\t\t\t\t\tmagenta: 'e619e5',\n\t\t\t\t\t\t\t\t\twhite: 'fff',\n\t\t\t\t\t\t\t\t\tblack: '000',\n\t\t\t\t\t\t\t\t\tgray: '888',\n\t\t\t\t\t\t\t\t\tgrey: '888'\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (hasOwnProperty.call(mapping, m)) {\n\t\t\t\t\t\t\t\tcolour = '#' + mapping[m];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcolour = m;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tcolour: colour\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tnumber: {\n\t\t\t\t\t\t/*\n        \tThis fixes accidental octal (by eliminating octal)\n        */\n\t\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tvalue: parseFloat(match[0])\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tinequality: {\n\t\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\toperator: match[2],\n\t\t\t\t\t\t\t\tnegate: match[1].indexOf('not') > -1\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\taugmentedAssign: {\n\t\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t// This selects just the first character, like the + of +=.\n\t\t\t\t\t\t\t\toperator: match[0][0]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tidentifier: {\n\t\t\t\t\t\tfn: textTokenFn('name'),\n\t\t\t\t\t\tcannotFollowText: true\n\t\t\t\t\t},\n\t\t\t\t\twhitespace: {\n\t\t\t\t\t\tfn: emptyFn,\n\n\t\t\t\t\t\t/*\n        \tTo save creating tokens for every textual space,\n        \tthis restriction is in place. It should have no effect\n        \ton syntactic whitespace.\n        */\n\t\t\t\t\t\tcannotFollowText: true\n\t\t\t\t\t},\n\t\t\t\t\tincorrectOperator: {\n\t\t\t\t\t\tfn: function fn(match) {\n\t\t\t\t\t\t\tvar correction = {\n\t\t\t\t\t\t\t\t'=>': '>=',\n\t\t\t\t\t\t\t\t'=<': '<=',\n\t\t\t\t\t\t\t\tgte: '>=',\n\t\t\t\t\t\t\t\tlte: '<=',\n\t\t\t\t\t\t\t\tgt: '>',\n\t\t\t\t\t\t\t\tlt: '<',\n\t\t\t\t\t\t\t\teq: 'is',\n\t\t\t\t\t\t\t\tisnot: 'is not',\n\t\t\t\t\t\t\t\tneq: 'is not',\n\t\t\t\t\t\t\t\tisa: 'is a',\n\t\t\t\t\t\t\t\tare: 'is',\n\t\t\t\t\t\t\t\tx: '*',\n\t\t\t\t\t\t\t\t'or a': 'or'\n\t\t\t\t\t\t\t}[match[0].toLowerCase().replace(/\\s+/g, ' ')];\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\t'Please say ' +\n\t\t\t\t\t\t\t\t\t(correction ? \"'\" + correction + \"'\" : 'something else') +\n\t\t\t\t\t\t\t\t\t\" instead of '\" +\n\t\t\t\t\t\t\t\t\tmatch[0] +\n\t\t\t\t\t\t\t\t\t\"'.\",\n\t\t\t\t\t\t\t\texplanation:\n\t\t\t\t\t\t\t\t\t'In the interests of readability, I want certain operators to be in a specific form.'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcannotFollowText: true\n\t\t\t\t\t}\n\t\t\t\t}, // As these consist of word characters, they cannot follow text nodes, lest they\n\t\t\t\t// match subwords like \"xxisxx\".\n\t\t\t\t[\n\t\t\t\t\t'boolean',\n\t\t\t\t\t'is',\n\t\t\t\t\t'to',\n\t\t\t\t\t'into',\n\t\t\t\t\t'where',\n\t\t\t\t\t'when',\n\t\t\t\t\t'via',\n\t\t\t\t\t'making',\n\t\t\t\t\t'each',\n\t\t\t\t\t'and',\n\t\t\t\t\t'or',\n\t\t\t\t\t'not',\n\t\t\t\t\t'isNot',\n\t\t\t\t\t'contains',\n\t\t\t\t\t'doesNotContain',\n\t\t\t\t\t'isIn',\n\t\t\t\t\t'isA',\n\t\t\t\t\t'isNotA',\n\t\t\t\t\t'isNotIn',\n\t\t\t\t\t'matches',\n\t\t\t\t\t'doesNotMatch',\n\t\t\t\t\t'bind'\n\t\t\t\t].reduce(function (a, e) {\n\t\t\t\t\ta[e] = {\n\t\t\t\t\t\tfn: emptyFn,\n\t\t\t\t\t\tcannotFollowText: true\n\t\t\t\t\t};\n\t\t\t\t\treturn a;\n\t\t\t\t}, {}), // These, being purely or partly symbols, do not have that necessity.\n\t\t\t\t[\n\t\t\t\t\t'comma',\n\t\t\t\t\t'spread',\n\t\t\t\t\t'typeSignature',\n\t\t\t\t\t'addition',\n\t\t\t\t\t'subtraction',\n\t\t\t\t\t'multiplication',\n\t\t\t\t\t'division'\n\t\t\t\t].reduce(function (a, e) {\n\t\t\t\t\ta[e] = {\n\t\t\t\t\t\tfn: emptyFn\n\t\t\t\t\t};\n\t\t\t\t\treturn a;\n\t\t\t\t}, {})\n\t\t\t)\n\t\t);\n\t\t/*\n    \tString mode is a special mode which contains only these three elements, designed for the interiors of strings.\n    */\n\n\t\tvar stringRules = setupRules(stringMode, {\n\t\t\tsingleStringCloser: macroRules.singleStringOpener,\n\t\t\tdoubleStringCloser: macroRules.doubleStringOpener,\n\t\t\tescapedStringChar: macroRules.escapedStringChar\n\t\t});\n\t\t/*\n    \tNow that all of the rule categories have been defined, the modes can be\n    \tdefined as selections of these categories.\n    \t\n    \tNote: as the mode arrays are passed by reference by the above,\n    \tthe arrays must now be modified in-place, using [].push.apply().\n    */\n\n\t\tmarkupMode.push.apply(\n\t\t\tmarkupMode,\n\t\t\t_toConsumableArray(keys(blockRules)).concat(\n\t\t\t\t_toConsumableArray(keys(expressionRules)),\n\t\t\t\t_toConsumableArray(keys(inlineRules))\n\t\t\t)\n\t\t);\n\t\t/*\n    \tWarning: the property pattern \"'s\" conflicts with the string literal\n    \tpattern - \"$a's b's\" resembles a string literal. To ensure that\n    \tthe former is always matched first, expressionRules\n    \tmust be pushed first.\n    */\n\n\t\tmacroMode.push.apply(\n\t\t\tmacroMode,\n\t\t\t_toConsumableArray(keys(expressionRules)).concat(\n\t\t\t\t_toConsumableArray(keys(macroRules))\n\t\t\t)\n\t\t);\n\t\tstringMode.push.apply(stringMode, _toConsumableArray(keys(stringRules)));\n\t\t/*\n    \tMerge all of the categories together.\n    */\n\n\t\tvar allRules = assign(\n\t\t\t{},\n\t\t\tblockRules,\n\t\t\tinlineRules,\n\t\t\texpressionRules,\n\t\t\tmacroRules,\n\t\t\tstringRules\n\t\t);\n\t\t/*\n    \tAdd the 'pattern' property to each rule\n    \t(the RegExp used by the lexer to match it), as well\n    \tas some other properties.\n    */\n\n\t\tkeys(allRules).forEach(function (key) {\n\t\t\t/*\n      \tEach named rule uses the same-named Pattern for its\n      \tregular expression.\n      \tThat is, each rule key *should* map directly to a Pattern key.\n      \tThe Patterns are added now.\n      */\n\n\t\t\t/*\n      \tPlain-compare patterns are used as-is without being converted to RegExp.\n      */\n\t\t\tif (Patterns.PlainCompare[key]) {\n\t\t\t\tallRules[key].pattern = Patterns.PlainCompare[key];\n\t\t\t\tallRules[key].plainCompare = true;\n\t\t\t} else {\n\t\t\t\tallRules[key].pattern = RegExp(\n\t\t\t\t\t'^(?:' + Patterns[key] + ')',\n\t\t\t\t\t/*\n        \tAll TwineMarkup patterns are case-insensitive.\n        */\n\t\t\t\t\t'i'\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\tassign(Lexer.rules, allRules);\n\t\tvar modes = Lexer.modes;\n\t\t/*\n    \tDeclare that the starting mode for lexing, before any\n    \ttokens are appraised, is...\n    */\n\n\t\tmodes.start = modes.markup = markupMode;\n\t\t/*\n    \tBut macroMode is also exposed in order for certain consumers\n    \t(such as the documentation) to be able to lex in that context.\n    */\n\n\t\tmodes.macro = macroMode;\n\t\tmodes.string = stringMode;\n\t\treturn Lexer;\n\t}\n\n\tfunction exporter(Lexer) {\n\t\t/*\n    \tExport the TwineMarkup module.\n    \t\n    \tSince this is a light freeze, Patterns is still modifiable.\n    */\n\t\treturn Object.freeze({\n\t\t\tlex: rules(Lexer).lex,\n\n\t\t\t/*\n      \tThe Patterns are exported for use by consumers in understanding\n      \tthe specifics of Harlowe's markup language.\n      */\n\t\t\tPatterns: Patterns\n\t\t});\n\t}\n\t/*\n  \tThis requires the Patterns and Lexer modules.\n  */\n\n\tif (\n\t\t(typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object'\n\t) {\n\t\tPatterns = require('./patterns');\n\t\tmodule.exports = exporter(require('./lexer'));\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine('markup', ['lexer', 'patterns'], function (Lexer, P) {\n\t\t\tPatterns = P;\n\t\t\treturn exporter(Lexer);\n\t\t});\n\t} // Loaded as a story format in TwineJS 2.3\n\telse if (this && this.loaded && this.modules) {\n\t\tPatterns = this.modules.Patterns;\n\t\tthis.modules.Markup = exporter(this.modules.Lexer);\n\t} // Loaded in TwineJS 2.4.\n\telse {\n\t\tPatterns = this.Patterns;\n\t\tthis.Markup = exporter(this.Lexer);\n\t}\n}.call(eval('this') || (typeof global !== 'undefined' ? global : window)));\n/*jshint strict:true*/\n\n(function () {\n\t'use strict';\n\t/*\n  \tVarious utility functions and data definitions used in multiple Toolbar modules.\n  */\n\n\tvar round = Math.round;\n\t/*\n  \tThis is a copy of Utils.insensitiveName(), used to check macro names.\n  */\n\n\tvar insensitiveName = function insensitiveName(e) {\n\t\treturn (e + '').toLowerCase().replace(/-|_/g, '');\n\t};\n\t/*\n  \tThis SHORTDEFS token is actually replaced with an object literal listing\n  \tof the currently defined Harlowe macros at compile-time, from the metadata script.\n  */\n\n\tvar ShortDefs = {\n\t\tMacro: {\n\t\t\tset: {\n\t\t\t\tname: 'set',\n\t\t\t\tsig: ' ...VariableToValue',\n\t\t\t\treturnType: 'Instant',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Stores data values in variables, optionally allowing you to permanently restrict the variable to a single datatype.  ',\n\t\t\t\tanchor: 'macro_set',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tput: {\n\t\t\t\tname: 'put',\n\t\t\t\tsig: ' ...VariableToValue',\n\t\t\t\treturnType: 'Instant',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A left-to-right version of (set:) that requires the word `into` rather than `to`.  ',\n\t\t\t\tanchor: 'macro_put',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tunpack: {\n\t\t\t\tname: 'unpack',\n\t\t\t\tsig: ' ...VariableToValue',\n\t\t\t\treturnType: 'Instant',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A specialised variation of (put:) that lets you extract multiple values from an array, datamap or string, at once, and put them into multiple variables, by placing a matching data structure on the right of `into` containing variables at the positions of those values. For instance, `(unpack: (a: 1, 2, 3) into (a: $x, 2, $y))` sets $x to 1 and $y to 3, and `(unpack: (dm: \"B\", 3, \"A\", 1) into (dm: \"A\", $x, \"B\", $y))` sets $x to 1 and $y to 3.   ',\n\t\t\t\tanchor: 'macro_unpack',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tmove: {\n\t\t\t\tname: 'move',\n\t\t\t\tsig: ' ...VariableToValue',\n\t\t\t\treturnType: 'Instant',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A variant of (put:) that, if transferring data from a data structure, deletes the source value after copying it - in effect moving the value from the source to the destination.  ',\n\t\t\t\tanchor: 'macro_move',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tdisplay: {\n\t\t\t\tname: 'display',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This command writes out the contents of the passage with the given string name. If a passage of that name does not exist, this produces an error.  ',\n\t\t\t\tanchor: 'macro_display',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tprint: {\n\t\t\t\tname: 'print',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract: 'This command prints out any data provided to it, as text.  ',\n\t\t\t\tanchor: 'macro_print',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tverbatimprint: {\n\t\t\t\tname: 'verbatim-print',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['v6m-print'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A convenient combination of (verbatim:) and (print:), this prints out any single argument given to it, as text, but without rendering the resulting text as markup.  ',\n\t\t\t\tanchor: 'macro_verbatim-print',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '16'\n\t\t\t},\n\t\t\tv6mprint: {\n\t\t\t\tname: 'verbatim-print',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['v6m-print'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A convenient combination of (verbatim:) and (print:), this prints out any single argument given to it, as text, but without rendering the resulting text as markup.  ',\n\t\t\t\tanchor: 'macro_verbatim-print',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '16'\n\t\t\t},\n\t\t\tverbatimsource: {\n\t\t\t\tname: 'verbatim-source',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['v6m-source'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A convenient combination of (verbatim-print:) and (source:), this prints out the Harlowe source code of any value given to it.  ',\n\t\t\t\tanchor: 'macro_verbatim-source',\n\t\t\t\tcategory: 'debugging'\n\t\t\t},\n\t\t\tv6msource: {\n\t\t\t\tname: 'verbatim-source',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['v6m-source'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A convenient combination of (verbatim-print:) and (source:), this prints out the Harlowe source code of any value given to it.  ',\n\t\t\t\tanchor: 'macro_verbatim-source',\n\t\t\t\tcategory: 'debugging'\n\t\t\t},\n\t\t\tgoto: {\n\t\t\t\tname: 'go-to',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This command stops passage code and sends the player to a new passage, starting a new turn as if a passage link was clicked. If the passage named by the string does not exist, this produces an error.  ',\n\t\t\t\tanchor: 'macro_go-to',\n\t\t\t\tcategory: 'navigation',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tredirect: {\n\t\t\t\tname: 'redirect',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This command sends the player to a new passage. However, unlike (goto:), this does *not* start a new turn - undoing after this will send the player to the turn before the redirect occurred.  ',\n\t\t\t\tanchor: 'macro_redirect',\n\t\t\t\tcategory: 'navigation',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tundo: {\n\t\t\t\tname: 'undo',\n\t\t\t\tsig: ' [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This command stops passage code and \"undoes\" the current turn, sending the player to the previous visited passage and forgetting any variable changes that occurred in this passage. You may provide an optional string to display if undos aren\\'t available.  ',\n\t\t\t\tanchor: 'macro_undo',\n\t\t\t\tcategory: 'navigation',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tdebug: {\n\t\t\t\tname: 'debug',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"This command, which takes no values, opens the Debug Mode panel if it wasn't open already. This can be used even if the story didn't begin in Debug Mode initially.  \",\n\t\t\t\tanchor: 'macro_debug',\n\t\t\t\tcategory: 'debugging'\n\t\t\t},\n\t\t\ticonundo: {\n\t\t\t\tname: 'icon-undo',\n\t\t\t\tsig: ' [String], [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Creates an icon, similar to those in the sidebar, that, if visible and clicked, undoes the current turn, returning to the previous passage, as if by (undo:). It is not visible if undos aren't available.  \",\n\t\t\t\tanchor: 'macro_icon-undo',\n\t\t\t\tcategory: 'sidebar',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\ticonredo: {\n\t\t\t\tname: 'icon-redo',\n\t\t\t\tsig: ' [String], [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates an icon, similar to those in the sidebar, that, if visible and clicked, \"re-does\" a turn that was undone. It is only visible if a turn has been undone.  ',\n\t\t\t\tanchor: 'macro_icon-redo',\n\t\t\t\tcategory: 'sidebar',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\ticonfullscreen: {\n\t\t\t\tname: 'icon-fullscreen',\n\t\t\t\tsig: ' [String], [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates an icon, similar to those in the sidebar, that, if visible and clicked, toggles fullscreen mode on or off.  ',\n\t\t\t\tanchor: 'macro_icon-fullscreen',\n\t\t\t\tcategory: 'sidebar',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\ticonrestart: {\n\t\t\t\tname: 'icon-restart',\n\t\t\t\tsig: ' [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates an icon, similar to those in the sidebar, that, if visible and clicked, reloads the whole page, restarting the story from the beginning.  ',\n\t\t\t\tanchor: 'macro_icon-restart',\n\t\t\t\tcategory: 'sidebar',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\ticoncounter: {\n\t\t\t\tname: 'icon-counter',\n\t\t\t\tsig: ' Bind, String, [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that creates a numeric counter element with a text label, designed to fit in the sidebar, displaying the contents of a number variable (rounded to a whole number as if by (trunc:)), and updating it whenever another macro changes it.  ',\n\t\t\t\tanchor: 'macro_icon-counter',\n\t\t\t\tcategory: 'sidebar',\n\t\t\t\tcategoryOrder: '6'\n\t\t\t},\n\t\t\tmeter: {\n\t\t\t\tname: 'meter',\n\t\t\t\tsig: ' Bind, Number, String, [String], [Colour or Gradient]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that creates a horizontal bar-graph meter, showing the current value of a number variable, relative to a maximum value, and updating it whenever that variable changes.  ',\n\t\t\t\tanchor: 'macro_meter',\n\t\t\t\tcategory: 'input and interface'\n\t\t\t},\n\t\t\tcyclinglink: {\n\t\t\t\tname: 'cycling-link',\n\t\t\t\tsig: ' [Bind], ...String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that, when evaluated, creates a cycling link - a link which does not go anywhere, but changes its own text to the next in a looping sequence of strings, and sets the optional bound variable to match the string value of the text.  ',\n\t\t\t\tanchor: 'macro_cycling-link',\n\t\t\t\tcategory: 'input and interface',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tseqlink: {\n\t\t\t\tname: 'seq-link',\n\t\t\t\tsig: ' [Bind], ...String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['sequence-link'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that creates a link that does not go anywhere, but changes its own text to the next in a sequence of strings, becoming plain text once the final string is reached, and setting the optional bound variable to match the text at all times.  ',\n\t\t\t\tanchor: 'macro_seq-link',\n\t\t\t\tcategory: 'input and interface',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tsequencelink: {\n\t\t\t\tname: 'seq-link',\n\t\t\t\tsig: ' [Bind], ...String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['sequence-link'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that creates a link that does not go anywhere, but changes its own text to the next in a sequence of strings, becoming plain text once the final string is reached, and setting the optional bound variable to match the text at all times.  ',\n\t\t\t\tanchor: 'macro_seq-link',\n\t\t\t\tcategory: 'input and interface',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tdropdown: {\n\t\t\t\tname: 'dropdown',\n\t\t\t\tsig: ' Bind, ...String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that, when evaluated, creates a dropdown menu with the given strings as options. When one option is selected, the bound variable is set to match the string value of the text.  ',\n\t\t\t\tanchor: 'macro_dropdown',\n\t\t\t\tcategory: 'input and interface'\n\t\t\t},\n\t\t\tcheckbox: {\n\t\t\t\tname: 'checkbox',\n\t\t\t\tsig: ' Bind, String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that creates a checkbox input, which sets the given bound variable to `true` or `false`, depending on its state.  ',\n\t\t\t\tanchor: 'macro_checkbox',\n\t\t\t\tcategory: 'input and interface',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tcheckboxfullscreen: {\n\t\t\t\tname: 'checkbox-fullscreen',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"A command that creates a checkbox input, which toggles the browser's fullscreen mode and windowed mode. The checkbox will automatically update to match the browser's fullscreen status. If fullscreen mode cannot be entered, the checkbox will be disabled.  \",\n\t\t\t\tanchor: 'macro_checkbox-fullscreen',\n\t\t\t\tcategory: 'input and interface',\n\t\t\t\tcategoryOrder: '6'\n\t\t\t},\n\t\t\tinputbox: {\n\t\t\t\tname: 'input-box',\n\t\t\t\tsig: ' [Bind], String, [Number], [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command macro that creates a text input box of the given position, width and height, allowing the player to input any amount of text, which can optionally be automatically stored in a variable.  ',\n\t\t\t\tanchor: 'macro_input-box',\n\t\t\t\tcategory: 'input and interface',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tforceinputbox: {\n\t\t\t\tname: 'force-input-box',\n\t\t\t\tsig: ' [Bind], String, [Number], String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"A command macro that creates an empty text input box of the given position, width and height, which appears to offer the player a means to input text, but instead replaces every keypress inside it with characters from a pre-set string that's relevant to the story.  \",\n\t\t\t\tanchor: 'macro_force-input-box',\n\t\t\t\tcategory: 'input and interface',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tshow: {\n\t\t\t\tname: 'show',\n\t\t\t\tsig: ' ...HookName',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Reveals hidden hooks, running the code within if it's not been shown yet.  \",\n\t\t\t\tanchor: 'macro_show',\n\t\t\t\tcategory: 'showing and hiding'\n\t\t\t},\n\t\t\trerun: {\n\t\t\t\tname: 'rerun',\n\t\t\t\tsig: ' ...HookName',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Reruns hooks, restoring them to their original contents, and running the macros within them an additional time.  ',\n\t\t\t\tanchor: 'macro_rerun',\n\t\t\t\tcategory: 'revision'\n\t\t\t},\n\t\t\thide: {\n\t\t\t\tname: 'hide',\n\t\t\t\tsig: ' ...HookName',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Hides a hook, or hooks, that were already visible, without fully erasing them or their contained macro calls.  ',\n\t\t\t\tanchor: 'macro_hide',\n\t\t\t\tcategory: 'showing and hiding'\n\t\t\t},\n\t\t\tscroll: {\n\t\t\t\tname: 'scroll',\n\t\t\t\tsig: ' HookName, Number or HookName',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This command, when given a HookName, followed by a fraction (a number between 0 and 1), will change the scroll position of every hook with that name to the percentage of their height signified by the fraction. You may alternatively give another HookName instead, which, if a hook of that name is inside the first hook, will scroll the first hook and each containing hook such that the second hook is visible.  ',\n\t\t\t\tanchor: 'macro_scroll',\n\t\t\t\tcategory: 'window'\n\t\t\t},\n\t\t\tstop: {\n\t\t\t\tname: 'stop',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro, which accepts no arguments, creates a (stop:) command, which is not configurable.  ',\n\t\t\t\tanchor: 'macro_stop',\n\t\t\t\tcategory: 'live',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tloadgame: {\n\t\t\t\tname: 'load-game',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This command attempts to load a saved game from the given slot, ending the current game and replacing it with the loaded one. This causes the passage to change.  ',\n\t\t\t\tanchor: 'macro_load-game',\n\t\t\t\tcategory: 'saving'\n\t\t\t},\n\t\t\tforgetundos: {\n\t\t\t\tname: 'forget-undos',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro, when used, \"erases\" previous turns, preventing the player from using undo features (like (link-undo:)) to return to them. Providing a positive number will erase that many turns from the start of the game, and providing a negative number will erase all the turns up to that point from the end.  ',\n\t\t\t\tanchor: 'macro_forget-undos',\n\t\t\t\tcategory: 'navigation',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tforgetvisits: {\n\t\t\t\tname: 'forget-visits',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro \"erases\" all visits that occurred before the given turn number - any passage visits that occurred on those turns are treated as if they didn\\'t happen. This causes (history:) to no longer list those passages at the start of the array, the `visits` identifier to report a different number for those passages, and (if the only visit to a passage was erased) the (visited:) macro to no longer regard a passage as visited.  ',\n\t\t\t\tanchor: 'macro_forget-visits',\n\t\t\t\tcategory: 'navigation',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tmockvisits: {\n\t\t\t\tname: 'mock-visits',\n\t\t\t\tsig: ' ...String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A macro that can only be used in debug mode, this allows you to mark various passages as \"visited\", even though the player actually hasn\\'t. This allows you to quickly test passages that use the `visits` keyword, or the `(history:)` datamap, without having to play through the whole game from the start.  ',\n\t\t\t\tanchor: 'macro_mock-visits',\n\t\t\t\tcategory: 'debugging'\n\t\t\t},\n\t\t\tmockturns: {\n\t\t\t\tname: 'mock-turns',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A macro that can only be used in debug mode, this allows you to artificially increase the number that the `visits` keyword evaluates to, without having to play through that many turns yourself.  ',\n\t\t\t\tanchor: 'macro_mock-turns',\n\t\t\t\tcategory: 'debugging'\n\t\t\t},\n\t\t\tseed: {\n\t\t\t\tname: 'seed',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that \"fixes\" Harlowe\\'s random number generator, causing all random macros and features to output predetermined values based on the given \"seed\" string.  ',\n\t\t\t\tanchor: 'macro_seed',\n\t\t\t\tcategory: 'game state'\n\t\t\t},\n\t\t\tdialog: {\n\t\t\t\tname: 'dialog',\n\t\t\t\tsig: ' [Bind], String or CodeHook, ...String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['alert'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that, when used, displays a pop-up dialog box with the given string or codehook displayed, and a number of button-shaped links labeled with the remaining other strings. If an optional bound variable is provided, that variable is updated to match the pressed button.  ',\n\t\t\t\tanchor: 'macro_dialog',\n\t\t\t\tcategory: 'popup',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\talert: {\n\t\t\t\tname: 'dialog',\n\t\t\t\tsig: ' [Bind], String or CodeHook, ...String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['alert'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that, when used, displays a pop-up dialog box with the given string or codehook displayed, and a number of button-shaped links labeled with the remaining other strings. If an optional bound variable is provided, that variable is updated to match the pressed button.  ',\n\t\t\t\tanchor: 'macro_dialog',\n\t\t\t\tcategory: 'popup',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\topenurl: {\n\t\t\t\tname: 'open-url',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When this macro is evaluated, the player's browser attempts to open a new tab with the given URL. This will usually require confirmation from the player, as most browsers block Javascript programs such as Harlowe from opening tabs by default.  \",\n\t\t\t\tanchor: 'macro_open-url',\n\t\t\t\tcategory: 'url'\n\t\t\t},\n\t\t\trestart: {\n\t\t\t\tname: 'restart',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['reload'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When this command is used, the player's browser will immediately attempt to reload the page, in effect restarting the entire story.  \",\n\t\t\t\tanchor: 'macro_restart',\n\t\t\t\tcategory: 'navigation'\n\t\t\t},\n\t\t\treload: {\n\t\t\t\tname: 'restart',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: ['reload'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When this command is used, the player's browser will immediately attempt to reload the page, in effect restarting the entire story.  \",\n\t\t\t\tanchor: 'macro_restart',\n\t\t\t\tcategory: 'navigation'\n\t\t\t},\n\t\t\tgotourl: {\n\t\t\t\tname: 'goto-url',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When this command is used, the player\\'s browser will immediately attempt to leave the story\\'s page, and navigate to the given URL in the same tab. If this succeeds, then the story session will \"end\".  ',\n\t\t\t\tanchor: 'macro_goto-url',\n\t\t\t\tcategory: 'url'\n\t\t\t},\n\t\t\tignore: {\n\t\t\t\tname: 'ignore',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"If you want to test your passage while ignoring a specific command macro in it, temporarily change that command macro's name to (ignore:), and it will ignore all of the data given to it.  \",\n\t\t\t\tanchor: 'macro_ignore',\n\t\t\t\tcategory: 'debugging',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tassertexists: {\n\t\t\t\tname: 'assert-exists',\n\t\t\t\tsig: ' HookName or String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A debugging macro that confirms whether a hook with the given name, or passage text matching the given string, is present in the passage. If not, it will produce a helpful error. Use this to test whether enchantment macros like (click:), (enchant:) or (show:) are working properly.  ',\n\t\t\t\tanchor: 'macro_assert-exists',\n\t\t\t\tcategory: 'debugging',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tassert: {\n\t\t\t\tname: 'assert',\n\t\t\t\tsig: ' Boolean',\n\t\t\t\treturnType: 'Instant',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A debugging macro that produces a helpful error whenever the expression given to it produces Boolean false. Use this when testing your story to help ensure that certain facts about the game state are true or not.  ',\n\t\t\t\tanchor: 'macro_assert',\n\t\t\t\tcategory: 'debugging',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tsavegame: {\n\t\t\t\tname: 'save-game',\n\t\t\t\tsig: ' String, [String]',\n\t\t\t\treturnType: 'Boolean',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"This macro saves the current game's state in browser storage, in the given save slot, and including a special filename. It can then be restored using (load-game:).  \",\n\t\t\t\tanchor: 'macro_save-game',\n\t\t\t\tcategory: 'saving'\n\t\t\t},\n\t\t\tprompt: {\n\t\t\t\tname: 'prompt',\n\t\t\t\tsig: ' String or CodeHook, String, [String], [String]',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When this macro is evaluated, a browser pop-up dialog box is shown with the first string displayed, a text entry box containing the second string (as a default value), a confirm link and a cancel link. If the confirm link is clicked, it evaluates to the string in the text entry box. If \"Cancel\" is clicked, it evaluates to the default value regardless of the entry box\\'s contents.  ',\n\t\t\t\tanchor: 'macro_prompt',\n\t\t\t\tcategory: 'popup'\n\t\t\t},\n\t\t\tconfirm: {\n\t\t\t\tname: 'confirm',\n\t\t\t\tsig: ' String or CodeHook, [String], [String]',\n\t\t\t\treturnType: 'Boolean',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When this macro is evaluated, a pop-up dialog box is shown with the given string displayed, as well as two links (whose text can also be provided) to confirm or cancel whatever action or fact the string tells the player. When it is submitted, it evaluates to the boolean `true` if the confirm link had been clicked, and `false` if the cancel link had.  ',\n\t\t\t\tanchor: 'macro_confirm',\n\t\t\t\tcategory: 'popup'\n\t\t\t},\n\t\t\tpageurl: {\n\t\t\t\tname: 'page-url',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"This macro produces the full URL of the story's HTML page, as it is in the player's browser.  \",\n\t\t\t\tanchor: 'macro_page-url',\n\t\t\t\tcategory: 'url'\n\t\t\t},\n\t\t\tmacro: {\n\t\t\t\tname: 'macro',\n\t\t\t\tsig: ' [...TypedVar], CodeHook',\n\t\t\t\treturnType: 'CustomMacro',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Use this macro to construct your own custom macros, which you can (set:) into variables and call as easily as a built-in macro.  ',\n\t\t\t\tanchor: 'macro_macro',\n\t\t\t\tcategory: 'custom macros',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\toutputdata: {\n\t\t\t\tname: 'output-data',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'Instant',\n\t\t\t\taka: ['out-data'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Use this macro inside a (macro:)'s CodeHook to output the value that the macro produces.  \",\n\t\t\t\tanchor: 'macro_output-data',\n\t\t\t\tcategory: 'custom macros',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\toutdata: {\n\t\t\t\tname: 'output-data',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'Instant',\n\t\t\t\taka: ['out-data'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Use this macro inside a (macro:)'s CodeHook to output the value that the macro produces.  \",\n\t\t\t\tanchor: 'macro_output-data',\n\t\t\t\tcategory: 'custom macros',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\toutput: {\n\t\t\t\tname: 'output',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['out'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Use this macro inside a (macro:)'s CodeHook to output a command that, when run, renders the attached hook.  \",\n\t\t\t\tanchor: 'macro_output',\n\t\t\t\tcategory: 'custom macros',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tout: {\n\t\t\t\tname: 'output',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['out'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Use this macro inside a (macro:)'s CodeHook to output a command that, when run, renders the attached hook.  \",\n\t\t\t\tanchor: 'macro_output',\n\t\t\t\tcategory: 'custom macros',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\terror: {\n\t\t\t\tname: 'error',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Instant',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Designed for use in custom macros, this causes the custom macro to immediately produce an error, with the given message string, and ceases running any further code in the CodeHook.  ',\n\t\t\t\tanchor: 'macro_error',\n\t\t\t\tcategory: 'custom macros',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tpartial: {\n\t\t\t\tname: 'partial',\n\t\t\t\tsig: ' String or CustomMacro, [...Any]',\n\t\t\t\treturnType: 'CustomMacro',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given either the string name of a built-in macro, or a custom macro, followed by various values, this creates a custom macro that serves as a shorthand for calling the given macro with those values, plus any additional values.  ',\n\t\t\t\tanchor: 'macro_partial',\n\t\t\t\tcategory: 'custom macros'\n\t\t\t},\n\t\t\ta: {\n\t\t\t\tname: 'a',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: ['array'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates an array, which is an ordered collection of values.  ',\n\t\t\t\tanchor: 'macro_a',\n\t\t\t\tcategory: 'data structure',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tarray: {\n\t\t\t\tname: 'a',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: ['array'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates an array, which is an ordered collection of values.  ',\n\t\t\t\tanchor: 'macro_a',\n\t\t\t\tcategory: 'data structure',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\trange: {\n\t\t\t\tname: 'range',\n\t\t\t\tsig: ' Number, Number',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Produces an array containing an inclusive range of whole numbers from a to b, in ascending order.  ',\n\t\t\t\tanchor: 'macro_range',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tsubarray: {\n\t\t\t\tname: 'subarray',\n\t\t\t\tsig: ' Array, Number, Number',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given an array, this returns a new array containing only the elements whose positions are between the two numbers, inclusively.  ',\n\t\t\t\tanchor: 'macro_subarray',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\treversed: {\n\t\t\t\tname: 'reversed',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Similar to (a:), except that it creates an array containing the elements in reverse order.  ',\n\t\t\t\tanchor: 'macro_reversed',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tshuffled: {\n\t\t\t\tname: 'shuffled',\n\t\t\t\tsig: ' ...Any',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Similar to (a:), this produces an array of the given values, except that it randomly rearranges the elements instead of placing them in the given order.  ',\n\t\t\t\tanchor: 'macro_shuffled',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tsorted: {\n\t\t\t\tname: 'sorted',\n\t\t\t\tsig: ' [Lambda], ...Any',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro produces an array in which the values are sorted in English alphanumeric sort order. If any of the values are not numbers or strings, a \"via\" lambda must be given first, which is used to translate the value into a number or string that it should be sorted by.  ',\n\t\t\t\tanchor: 'macro_sorted',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\trotated: {\n\t\t\t\tname: 'rotated',\n\t\t\t\tsig: ' Number, ...Any',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Similar to the (a:) macro, but it also takes a number at the start, and moves each item forward by that number, wrapping back to the start if they pass the end of the array.  ',\n\t\t\t\tanchor: 'macro_rotated',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\trotatedto: {\n\t\t\t\tname: 'rotated-to',\n\t\t\t\tsig: ' Lambda, [...Any]',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Similar to the (a:) macro, but it also takes a \"where\" lambda at the start, and cycles the order of the subsequent values so that the first value to match the lambda is placed at the start.  ',\n\t\t\t\tanchor: 'macro_rotated-to',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\trepeated: {\n\t\t\t\tname: 'repeated',\n\t\t\t\tsig: ' Number, ...Any',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a number and a sequence of values, this macro produces an array containing those values repeated, in order, by the given number of times.  ',\n\t\t\t\tanchor: 'macro_repeated',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tinterlaced: {\n\t\t\t\tname: 'interlaced',\n\t\t\t\tsig: ' Array, ...Array',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Takes multiple arrays, and pairs up each value in those arrays: it creates an array containing each array's first value followed by each array's second value, and so forth. If some values have no matching pair (i.e. one array is longer than the other) then those values are ignored.  \",\n\t\t\t\tanchor: 'macro_interlaced',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tpermutations: {\n\t\t\t\tname: 'permutations',\n\t\t\t\tsig: ' ...Any',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a sequence of values, this produces an array containing each permutation of the order of those values, as arrays.  ',\n\t\t\t\tanchor: 'macro_permutations',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tunique: {\n\t\t\t\tname: 'unique',\n\t\t\t\tsig: ' ...Any',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a sequence of values, this produces an array containing each unique value once, in the order that they appeared.  ',\n\t\t\t\tanchor: 'macro_unique',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\taltered: {\n\t\t\t\tname: 'altered',\n\t\t\t\tsig: ' Lambda, [...Any]',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This takes a \"via\" lambda and a sequence of values, and creates a new array with the same values in the same order, but altered via the operation in the lambda\\'s \"via\" clause.  ',\n\t\t\t\tanchor: 'macro_altered',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tfind: {\n\t\t\t\tname: 'find',\n\t\t\t\tsig: ' Lambda, [...Any]',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This searches through the given values, and produces an array of those which match the given search test (which is expressed using a temp variable, the `where` keyword, and a boolean condition). If none match, an empty array is produced.  ',\n\t\t\t\tanchor: 'macro_find',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tallpass: {\n\t\t\t\tname: 'all-pass',\n\t\t\t\tsig: ' Lambda, [...Any]',\n\t\t\t\treturnType: 'Boolean',\n\t\t\t\taka: ['pass'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This takes a \"where\" lambda and a series of values, and evaluates to true if the lambda, when run using each value, never evaluated to false.  ',\n\t\t\t\tanchor: 'macro_all-pass',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tpass: {\n\t\t\t\tname: 'all-pass',\n\t\t\t\tsig: ' Lambda, [...Any]',\n\t\t\t\treturnType: 'Boolean',\n\t\t\t\taka: ['pass'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This takes a \"where\" lambda and a series of values, and evaluates to true if the lambda, when run using each value, never evaluated to false.  ',\n\t\t\t\tanchor: 'macro_all-pass',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tsomepass: {\n\t\t\t\tname: 'some-pass',\n\t\t\t\tsig: ' Lambda, ...Any',\n\t\t\t\treturnType: 'Boolean',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This is similar to (all-pass:), but produces true if one or more value, when given to the lambda, evaluated to true. It can be thought of as shorthand for putting `not` in front of (none-pass:). If zero values are given to (all-pass:), then it will return false by default. For more information, consult the description of (all-pass:).  ',\n\t\t\t\tanchor: 'macro_some-pass',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tnonepass: {\n\t\t\t\tname: 'none-pass',\n\t\t\t\tsig: ' Lambda, ...Any',\n\t\t\t\treturnType: 'Boolean',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This can be thought of as the opposite of (all-pass:): it produces true if every value, when given to the lambda, never evaluated to true. If zero values are given to (none-pass:), then it will return true by default, just like (all-pass:). For more information, consult the description of (all-pass:).  ',\n\t\t\t\tanchor: 'macro_none-pass',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tfolded: {\n\t\t\t\tname: 'folded',\n\t\t\t\tsig: ' Lambda, ...Any',\n\t\t\t\treturnType: 'Any',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This takes a \"making\" lambda and a sequence of values, and creates a new value (the \"total\") by feeding every value in the sequence to the lambda, akin to folding a long strip of paper into a single square. The first value after the lambda is put into the total (which is the variable inside the lambda\\'s \"making\" clause) before running the lambda on the remaining values.  ',\n\t\t\t\tanchor: 'macro_folded',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tdatanames: {\n\t\t\t\tname: 'datanames',\n\t\t\t\tsig: ' Datamap',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This takes a datamap, and returns a sorted array of its data names, sorted alphabetically.  ',\n\t\t\t\tanchor: 'macro_datanames',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tdatavalues: {\n\t\t\t\tname: 'datavalues',\n\t\t\t\tsig: ' Datamap',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This takes a datamap, and returns an array of its values, sorted alphabetically by their name.  ',\n\t\t\t\tanchor: 'macro_datavalues',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tdataentries: {\n\t\t\t\tname: 'dataentries',\n\t\t\t\tsig: ' Datamap',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This takes a datamap, and returns an array of its name/value pairs. Each pair is a datamap that only has \"name\" and \"value\" data. The pairs are ordered by their name.  ',\n\t\t\t\tanchor: 'macro_dataentries',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\thistory: {\n\t\t\t\tname: 'history',\n\t\t\t\tsig: ' [Lambda]',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This returns an array containing the string names of all of the passages the player has visited up to now, in the order that the player visited them. An optional lambda can filter the passages, by checking the (passage:) datamap of each. The (mock-visits:) macro can, during debugging, artifically add values to this array to simulate having visited various passages.  ',\n\t\t\t\tanchor: 'macro_history',\n\t\t\t\tcategory: 'game state'\n\t\t\t},\n\t\t\tvisited: {\n\t\t\t\tname: 'visited',\n\t\t\t\tsig: ' String or Lambda',\n\t\t\t\treturnType: 'Boolean',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a string, this macro produces true if the passage has ever been visited during this game, and false otherwise. When given a \"where\" lambda, this returns true if any passage matching the lambda has ever been visited during this game. The (mock-visits:) macro can, during debugging, make this macro return true in cases where it would otherwise be false.  ',\n\t\t\t\tanchor: 'macro_visited',\n\t\t\t\tcategory: 'game state'\n\t\t\t},\n\t\t\tpassage: {\n\t\t\t\tname: 'passage',\n\t\t\t\tsig: ' [String]',\n\t\t\t\treturnType: 'Datamap',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a passage string name, this provides a datamap containing information about that passage. If no name was provided, then it provides information about the current passage.  ',\n\t\t\t\tanchor: 'macro_passage',\n\t\t\t\tcategory: 'game state'\n\t\t\t},\n\t\t\tpassages: {\n\t\t\t\tname: 'passages',\n\t\t\t\tsig: ' [Lambda]',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This returns an array containing datamaps of information for the passages in the story, sorted by passage name, and using the optional search test to only include certain types of passages.  ',\n\t\t\t\tanchor: 'macro_passages',\n\t\t\t\tcategory: 'game state'\n\t\t\t},\n\t\t\topenstorylets: {\n\t\t\t\tname: 'open-storylets',\n\t\t\t\tsig: ' [Lambda]',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Checks all of the (storylet:) macros in every passage, and provides an array of datamaps for every passage whose (storylet:) lambda produced true, sorted by their \"urgency\" metadata value, then by passage name. If a lambda was provided, the storylets are filtered using it as a search test.  ',\n\t\t\t\tanchor: 'macro_open-storylets',\n\t\t\t\tcategory: 'storylet',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tsavedgames: {\n\t\t\t\tname: 'saved-games',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Datamap',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This returns a datamap containing the names of currently occupied save game slots.  ',\n\t\t\t\tanchor: 'macro_saved-games',\n\t\t\t\tcategory: 'saving'\n\t\t\t},\n\t\t\tdm: {\n\t\t\t\tname: 'dm',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Datamap',\n\t\t\t\taka: ['datamap'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Creates a datamap, which is a data structure that pairs string names with data values. You should provide a string name, followed by the value paired with it, and then another string name, another value, and so on, for as many as you'd like.  \",\n\t\t\t\tanchor: 'macro_dm',\n\t\t\t\tcategory: 'data structure',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tdatamap: {\n\t\t\t\tname: 'dm',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Datamap',\n\t\t\t\taka: ['datamap'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Creates a datamap, which is a data structure that pairs string names with data values. You should provide a string name, followed by the value paired with it, and then another string name, another value, and so on, for as many as you'd like.  \",\n\t\t\t\tanchor: 'macro_dm',\n\t\t\t\tcategory: 'data structure',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tds: {\n\t\t\t\tname: 'ds',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Dataset',\n\t\t\t\taka: ['dataset'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a dataset, which is an unordered collection of unique values.  ',\n\t\t\t\tanchor: 'macro_ds',\n\t\t\t\tcategory: 'data structure',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tdataset: {\n\t\t\t\tname: 'ds',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Dataset',\n\t\t\t\taka: ['dataset'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a dataset, which is an unordered collection of unique values.  ',\n\t\t\t\tanchor: 'macro_ds',\n\t\t\t\tcategory: 'data structure',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tcount: {\n\t\t\t\tname: 'count',\n\t\t\t\tsig: ' Array or String, ...Any',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Accepts a string or array, followed by a value, and produces the number of times any of the values are inside the string or array.  ',\n\t\t\t\tanchor: 'macro_count',\n\t\t\t\tcategory: 'data structure'\n\t\t\t},\n\t\t\tchange: {\n\t\t\t\tname: 'change',\n\t\t\t\tsig: ' HookName or String, Changer or Lambda',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Applies a changer (or a \"via\" lambda producing a changer) to every occurrence of a hook or string in a passage, once.  ',\n\t\t\t\tanchor: 'macro_change',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '17'\n\t\t\t},\n\t\t\tenchant: {\n\t\t\t\tname: 'enchant',\n\t\t\t\tsig: ' HookName or String, Changer or Lambda',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Applies a changer (or a \"via\" lambda producing a changer) to every occurrence of a hook or string in a passage, and continues applying that changer to any further occurrences that are made to appear in the same passage later.  ',\n\t\t\t\tanchor: 'macro_enchant',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '18'\n\t\t\t},\n\t\t\tenchantin: {\n\t\t\t\tname: 'enchant-in',\n\t\t\t\tsig: ' HookName or String, Changer or Lambda',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A variation of (enchant:) and (change:), this applies a changer to every occurrence of a hook or string within just the attached hook, rather than the whole passage. As with (enchant:), the changer will be applied to every additional occurrence inserted into the attached hook.  ',\n\t\t\t\tanchor: 'macro_enchant-in',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '19'\n\t\t\t},\n\t\t\tlinkstyle: {\n\t\t\t\tname: 'link-style',\n\t\t\t\tsig: ' Changer or Lambda',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, this causes all of the links inside the hook to be styled using the specified changer. This is equivalent to using (enchant-in:) with `?link`.  ',\n\t\t\t\tanchor: 'macro_link-style',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tlinestyle: {\n\t\t\t\tname: 'line-style',\n\t\t\t\tsig: ' Changer or Lambda',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When attached to a hook, this causes all of the lines of prose inside the hook (identical to those that would be selected by `?page's lines`) to be styled using the specified changer.  \",\n\t\t\t\tanchor: 'macro_line-style',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tcharstyle: {\n\t\t\t\tname: 'char-style',\n\t\t\t\tsig: ' Changer or Lambda',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When attached to a hook, this causes all of the individual non-whitespace characters inside the hook (identical to those that would be selected by `?page's chars`) to be styled using the specified changer.  \",\n\t\t\t\tanchor: 'macro_char-style',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\treplace: {\n\t\t\t\tname: 'replace',\n\t\t\t\tsig: ' ...HookName or String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Creates a command which you can attach to a hook, and replace target destinations with the hook's contents. The targets are either text strings within the current passage, or hook references.  Not to be confused with (str-replaced:).  \",\n\t\t\t\tanchor: 'macro_replace',\n\t\t\t\tcategory: 'revision',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\treplacewith: {\n\t\t\t\tname: 'replace-with',\n\t\t\t\tsig: ' String or CodeHook',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A counterpart to (append-with:) and (prepend-with:), this replaces the entirety of the attached hook with the contents of the given string (or code hook).  ',\n\t\t\t\tanchor: 'macro_replace-with',\n\t\t\t\tcategory: 'revision',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tappend: {\n\t\t\t\tname: 'append',\n\t\t\t\tsig: ' ...HookName or String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"A variation of (replace:) which adds the attached hook's contents to the end of each target, rather than replacing it entirely.  \",\n\t\t\t\tanchor: 'macro_append',\n\t\t\t\tcategory: 'revision',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tappendwith: {\n\t\t\t\tname: 'append-with',\n\t\t\t\tsig: ' String or CodeHook',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a changer that, when attached to a hook, adds the contents of the given string (or code hook) to the end of the hook.  ',\n\t\t\t\tanchor: 'macro_append-with',\n\t\t\t\tcategory: 'revision',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tprepend: {\n\t\t\t\tname: 'prepend',\n\t\t\t\tsig: ' ...HookName or String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"A variation of (replace:) which adds the attached hook's contents to the beginning of each target, rather than replacing it entirely.  \",\n\t\t\t\tanchor: 'macro_prepend',\n\t\t\t\tcategory: 'revision',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tprependwith: {\n\t\t\t\tname: 'prepend-with',\n\t\t\t\tsig: ' String or CodeHook',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a changer that, when attached to a hook, adds the contents of a given string (or code hook) to the start of the hook.  ',\n\t\t\t\tanchor: 'macro_prepend-with',\n\t\t\t\tcategory: 'revision',\n\t\t\t\tcategoryOrder: '6'\n\t\t\t},\n\t\t\tclick: {\n\t\t\t\tname: 'click',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Produces a changer which, when attached to a hook, hides it and enchants the specified target, such that it visually resembles a link, and that clicking it causes the attached hook to be revealed.  ',\n\t\t\t\tanchor: 'macro_click',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '9'\n\t\t\t},\n\t\t\tclickrerun: {\n\t\t\t\tname: 'click-rerun',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A special version of the (click:) macro which allows the enchanted hook or text (specified by the first value) to be activated multiple times to re-run the attached hook.  ',\n\t\t\t\tanchor: 'macro_click-rerun',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '10'\n\t\t\t},\n\t\t\tmouseover: {\n\t\t\t\tname: 'mouseover',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseover',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tmouseout: {\n\t\t\t\tname: 'mouseout',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseout',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tclickreplace: {\n\t\t\t\tname: 'click-replace',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"A special shorthand combination of the (click:) and (replace:) macros, this allows you to make a hook replace its own text with that of the attached hook whenever it's clicked. `(click: ?1)[(replace:?1)[...]]` can be rewritten as `(click-replace: ?1)[...]`.  \",\n\t\t\t\tanchor: 'macro_click-replace',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '10'\n\t\t\t},\n\t\t\tclickappend: {\n\t\t\t\tname: 'click-append',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"A special shorthand combination of the (click:) and (append:) macros, this allows you to append text to a hook or string when it's clicked. `(click: ?1)[(append:?1)[...]]` can be rewritten as `(click-append: ?1)[...]`.  \",\n\t\t\t\tanchor: 'macro_click-append',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '11'\n\t\t\t},\n\t\t\tclickprepend: {\n\t\t\t\tname: 'click-prepend',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"A special shorthand combination of the (click:) and (prepend:) macros, this allows you to prepend text to a hook or string when it's clicked. `(click: ?1)[(prepend:?1)[...]]` can be rewritten as `(click-prepend: ?1)[...]`.  \",\n\t\t\t\tanchor: 'macro_click-prepend',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '12'\n\t\t\t},\n\t\t\tmouseoverreplace: {\n\t\t\t\tname: 'mouseover-replace',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseover-replace',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tmouseoverappend: {\n\t\t\t\tname: 'mouseover-append',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseover-append',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tmouseoverprepend: {\n\t\t\t\tname: 'mouseover-prepend',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseover-prepend',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tmouseoutreplace: {\n\t\t\t\tname: 'mouseout-replace',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseout-replace',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tmouseoutappend: {\n\t\t\t\tname: 'mouseout-append',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseout-append',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tmouseoutprepend: {\n\t\t\t\tname: 'mouseout-prepend',\n\t\t\t\tsig: ' HookName or String, [Changer or Lambda]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseout-prepend',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tclickgoto: {\n\t\t\t\tname: 'click-goto',\n\t\t\t\tsig: ' HookName or String, String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"A special shorthand combination of the (click:) and (go-to:) macros, this allows you to make a hook or bit of text into a passage link. `(click-goto: ?1, 'Passage Name')` is equivalent to `(click: ?1)[(goto:'Passage Name')]`  \",\n\t\t\t\tanchor: 'macro_click-goto',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '11'\n\t\t\t},\n\t\t\tmouseovergoto: {\n\t\t\t\tname: 'mouseover-goto',\n\t\t\t\tsig: ' HookName or String, String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseover-goto',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tmouseoutgoto: {\n\t\t\t\tname: 'mouseout-goto',\n\t\t\t\tsig: ' HookName or String, String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseout-goto',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tclickundo: {\n\t\t\t\tname: 'click-undo',\n\t\t\t\tsig: ' HookName or String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A special shorthand combination of the (click:) and (undo:) macros, this allows you to make a hook or bit of text into a passage link. `(click-undo: ?1)` is equivalent to `(click: ?1)[(undo: )]`  ',\n\t\t\t\tanchor: 'macro_click-undo',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '11'\n\t\t\t},\n\t\t\tmouseoverundo: {\n\t\t\t\tname: 'mouseover-undo',\n\t\t\t\tsig: ' HookName or String, String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseover-undo',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tmouseoutundo: {\n\t\t\t\tname: 'mouseout-undo',\n\t\t\t\tsig: ' HookName or String, String',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_mouseout-undo',\n\t\t\t\tcategory: 'deprecated'\n\t\t\t},\n\t\t\tlink: {\n\t\t\t\tname: 'link',\n\t\t\t\tsig: ' String, [Changer]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['link-replace'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, this replaces the hook with a link that has the given text. The link, when clicked, vanishes and reveals the hook. An optional changer can be given to alter the style of the link (instead of altering the style of the attached hook).  ',\n\t\t\t\tanchor: 'macro_link',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tlinkreplace: {\n\t\t\t\tname: 'link',\n\t\t\t\tsig: ' String, [Changer]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['link-replace'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, this replaces the hook with a link that has the given text. The link, when clicked, vanishes and reveals the hook. An optional changer can be given to alter the style of the link (instead of altering the style of the attached hook).  ',\n\t\t\t\tanchor: 'macro_link',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tlinkreveal: {\n\t\t\t\tname: 'link-reveal',\n\t\t\t\tsig: ' String, [Changer]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['link-append'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, this replaces the hook with a link that has the given text. The link, when clicked, reveals the hook and becomes plain, unstyled text. An optional changer can be given to alter the style of the link (instead of altering the style of the attached hook).  ',\n\t\t\t\tanchor: 'macro_link-reveal',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tlinkappend: {\n\t\t\t\tname: 'link-reveal',\n\t\t\t\tsig: ' String, [Changer]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['link-append'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, this replaces the hook with a link that has the given text. The link, when clicked, reveals the hook and becomes plain, unstyled text. An optional changer can be given to alter the style of the link (instead of altering the style of the attached hook).  ',\n\t\t\t\tanchor: 'macro_link-reveal',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tlinkrepeat: {\n\t\t\t\tname: 'link-repeat',\n\t\t\t\tsig: ' String, [Changer]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When attached to a hook, this replaces the hook with a link that has the given text. The link, when clicked, reveals the hook. Further clicks will cause the hook to repeat itself - a copy of the hook's code will be run, and the result appended to it, in a manner similar to (for:). An optional changer can be given to alter the style of the link (instead of altering the style of the attached hook).  \",\n\t\t\t\tanchor: 'macro_link-repeat',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tlinkrerun: {\n\t\t\t\tname: 'link-rerun',\n\t\t\t\tsig: ' String, [Changer]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, this replaces the hook with a link that has the given text. The link, when clicked, reveals the hook. Further clicks will cause the hook to rerun itself, as if by the effect of (rerun:). An optional changer can be given to alter the style of the link (instead of altering the style of the attached hook).  ',\n\t\t\t\tanchor: 'macro_link-rerun',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tlinkgoto: {\n\t\t\t\tname: 'link-goto',\n\t\t\t\tsig: ' String, [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Takes a string of link text, and an optional destination passage name, and makes a command to create a link that takes the player to another passage. The link functions identically to a standard link.  ',\n\t\t\t\tanchor: 'macro_link-goto',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tlinkstorylet: {\n\t\t\t\tname: 'link-storylet',\n\t\t\t\tsig: ' [String], Number or Lambda, [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"If there are storylets (passages containing a (storylet:) call) in this story, this will create a link to the first open storylet that matches the passed-in 'where' lambda, or, if a number **n** was passed in, the **n**th (or, if negative, **n**thlast) open storylet. An optional final string can provide text to display when no such storylet is open currently.  \",\n\t\t\t\tanchor: 'macro_link-storylet',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '8'\n\t\t\t},\n\t\t\tlinkundo: {\n\t\t\t\tname: 'link-undo',\n\t\t\t\tsig: ' String, [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Takes a string of link text, and produces a link that, when clicked, undoes the current turn and sends the player back to the previously visited passage. The link appears identical to a typical passage link. An optional second string can be provided, which is shown instead of the link if it's not possible to undo.  \",\n\t\t\t\tanchor: 'macro_link-undo',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '7'\n\t\t\t},\n\t\t\tlinkshow: {\n\t\t\t\tname: 'link-show',\n\t\t\t\tsig: ' String, ...HookName',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a link that, when clicked, shows the given hidden hooks, running the code within.  ',\n\t\t\t\tanchor: 'macro_link-show',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '8'\n\t\t\t},\n\t\t\tlinkfullscreen: {\n\t\t\t\tname: 'link-fullscreen',\n\t\t\t\tsig: ' String, String, [String]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Creates a link that, when clicked, toggles the browser's fullscreen mode and windowed mode. The first string is used as its link text if the browser is currently in windowed mode, and the second string if it's currently in fullscreen mode. The link will automatically update (re-rendering the link text) to match the browser's current fullscreen state. The optional third string is used when fullscreen mode isn't allowed by the browser - if it's absent or an empty string, the link won't be displayed at all in that situation.  \",\n\t\t\t\tanchor: 'macro_link-fullscreen',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '8'\n\t\t\t},\n\t\t\tlinkrevealgoto: {\n\t\t\t\tname: 'link-reveal-goto',\n\t\t\t\tsig: ' String, [String], [Changer]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This is a convenient combination of the (link-reveal:) and (go-to:) macros, designed to let you run commands like (set:) just before going to another passage. The first string is the link text, and the second is the passage name. An optional changer, with which to style the link, can also be provided.  ',\n\t\t\t\tanchor: 'macro_link-reveal-goto',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '6'\n\t\t\t},\n\t\t\tstorylet: {\n\t\t\t\tname: 'storylet',\n\t\t\t\tsig: ' Lambda',\n\t\t\t\treturnType: 'Metadata',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When placed in a passage, it marks that passage as the beginning of a storylet, using the lambda as the condition upon which it's available to the player, so that other macros, like (open-storylets:), can see and select the passage.  \",\n\t\t\t\tanchor: 'macro_storylet',\n\t\t\t\tcategory: 'storylet',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\turgency: {\n\t\t\t\tname: 'urgency',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Metadata',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When placed in a passage that also has a (storylet:) call, it marks that passage as being more or less \"urgent\", meaning that (open-storylets:) will sort it earlier or later than other passages.  ',\n\t\t\t\tanchor: 'macro_urgency',\n\t\t\t\tcategory: 'storylet',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\texclusivity: {\n\t\t\t\tname: 'exclusivity',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Metadata',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When placed in a passage that also has a (storylet:) call, it marks that passage as being more or less \"exclusive\", meaning that if it\\'s open, it will prevent storylets with lesser exclusivity from appearing in (open-storylets:).  ',\n\t\t\t\tanchor: 'macro_exclusivity',\n\t\t\t\tcategory: 'storylet',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tname: 'metadata',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Metadata',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When placed in a passage, this adds the given names and values to the (passage:) datamap for this passage.  ',\n\t\t\t\tanchor: 'macro_metadata',\n\t\t\t\tcategory: 'game state'\n\t\t\t},\n\t\t\tp: {\n\t\t\t\tname: 'p',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern, a special kind of datatype that can match complex string structures. The pattern matches the entire sequence of strings or datatypes given, in order.  ',\n\t\t\t\tanchor: 'macro_p',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tpattern: {\n\t\t\t\tname: 'p',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern, a special kind of datatype that can match complex string structures. The pattern matches the entire sequence of strings or datatypes given, in order.  ',\n\t\t\t\tanchor: 'macro_p',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tpeither: {\n\t\t\t\tname: 'p-either',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-either'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that matches either of the single strings or datatypes given.  ',\n\t\t\t\tanchor: 'macro_p-either',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tpatterneither: {\n\t\t\t\tname: 'p-either',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-either'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that matches either of the single strings or datatypes given.  ',\n\t\t\t\tanchor: 'macro_p-either',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tpopt: {\n\t\t\t\tname: 'p-opt',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-opt', 'p-optional', 'pattern-optional'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that either matches the sequence of strings or datatypes given, or matches the empty string.  ',\n\t\t\t\tanchor: 'macro_p-opt',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tpatternopt: {\n\t\t\t\tname: 'p-opt',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-opt', 'p-optional', 'pattern-optional'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that either matches the sequence of strings or datatypes given, or matches the empty string.  ',\n\t\t\t\tanchor: 'macro_p-opt',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tpoptional: {\n\t\t\t\tname: 'p-opt',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-opt', 'p-optional', 'pattern-optional'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that either matches the sequence of strings or datatypes given, or matches the empty string.  ',\n\t\t\t\tanchor: 'macro_p-opt',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tpatternoptional: {\n\t\t\t\tname: 'p-opt',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-opt', 'p-optional', 'pattern-optional'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that either matches the sequence of strings or datatypes given, or matches the empty string.  ',\n\t\t\t\tanchor: 'macro_p-opt',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tpnot: {\n\t\t\t\tname: 'p-not',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-not'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Given any number of string characters or non-spread datatypes, this creates a string pattern that matches any one character that doesn't match any of those values.  \",\n\t\t\t\tanchor: 'macro_p-not',\n\t\t\t\tcategory: 'patterns'\n\t\t\t},\n\t\t\tpatternnot: {\n\t\t\t\tname: 'p-not',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-not'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Given any number of string characters or non-spread datatypes, this creates a string pattern that matches any one character that doesn't match any of those values.  \",\n\t\t\t\tanchor: 'macro_p-not',\n\t\t\t\tcategory: 'patterns'\n\t\t\t},\n\t\t\tpmany: {\n\t\t\t\tname: 'p-many',\n\t\t\t\tsig: ' [Number], [Number], ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-many'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Creates a string pattern that matches the given sequence of strings and datatypes, repeated a given minimum and maximum number of times - or, if these aren't provided, repeated any number of times.  \",\n\t\t\t\tanchor: 'macro_p-many',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tpatternmany: {\n\t\t\t\tname: 'p-many',\n\t\t\t\tsig: ' [Number], [Number], ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['pattern-many'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"Creates a string pattern that matches the given sequence of strings and datatypes, repeated a given minimum and maximum number of times - or, if these aren't provided, repeated any number of times.  \",\n\t\t\t\tanchor: 'macro_p-many',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tpins: {\n\t\t\t\tname: 'p-ins',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['p-insensitive', 'pattern-ins', 'pattern-insensitive'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that matches the sequence of strings or datatypes given, case-insensitively.  ',\n\t\t\t\tanchor: 'macro_p-ins',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tpinsensitive: {\n\t\t\t\tname: 'p-ins',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['p-insensitive', 'pattern-ins', 'pattern-insensitive'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that matches the sequence of strings or datatypes given, case-insensitively.  ',\n\t\t\t\tanchor: 'macro_p-ins',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tpatternins: {\n\t\t\t\tname: 'p-ins',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['p-insensitive', 'pattern-ins', 'pattern-insensitive'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that matches the sequence of strings or datatypes given, case-insensitively.  ',\n\t\t\t\tanchor: 'macro_p-ins',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tpatterninsensitive: {\n\t\t\t\tname: 'p-ins',\n\t\t\t\tsig: ' ...String or Datatype',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: ['p-insensitive', 'pattern-ins', 'pattern-insensitive'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Creates a string pattern that matches the sequence of strings or datatypes given, case-insensitively.  ',\n\t\t\t\tanchor: 'macro_p-ins',\n\t\t\t\tcategory: 'patterns',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tsplit: {\n\t\t\t\tname: 'split',\n\t\t\t\tsig: ' String or Datatype, String',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: ['splitted'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This splits up the second value given to it into an array of substrings, after finding and removing each occurrence of the first string or pattern (which is used as a separator value).  ',\n\t\t\t\tanchor: 'macro_split',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tsplitted: {\n\t\t\t\tname: 'split',\n\t\t\t\tsig: ' String or Datatype, String',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: ['splitted'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This splits up the second value given to it into an array of substrings, after finding and removing each occurrence of the first string or pattern (which is used as a separator value).  ',\n\t\t\t\tanchor: 'macro_split',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\ttrimmed: {\n\t\t\t\tname: 'trimmed',\n\t\t\t\tsig: ' [String or Datatype], String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro takes one string (the last value), and produces a copy with every character matching the given pattern (the first value) removed from the start and end of it. If no pattern is given, it defaults to removing whitespace, as if `whitespace` was the first argument.  ',\n\t\t\t\tanchor: 'macro_trimmed',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstrfind: {\n\t\t\t\tname: 'str-find',\n\t\t\t\tsig: ' Datatype, String',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: ['string-find'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Also known as: (string-find:)  When given a string pattern and a string, this produces an array of each substring within the string that the pattern matched. If typed variables were in the pattern, this instead produces an array of datamaps, each of which has data names matching the variables, and data values matching the portions of the string matched by those typed variables, as well as a \"match\" data name for the full substring.  ',\n\t\t\t\tanchor: 'macro_str-find',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstringfind: {\n\t\t\t\tname: 'str-find',\n\t\t\t\tsig: ' Datatype, String',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: ['string-find'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Also known as: (string-find:)  When given a string pattern and a string, this produces an array of each substring within the string that the pattern matched. If typed variables were in the pattern, this instead produces an array of datamaps, each of which has data names matching the variables, and data values matching the portions of the string matched by those typed variables, as well as a \"match\" data name for the full substring.  ',\n\t\t\t\tanchor: 'macro_str-find',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstrreplaced: {\n\t\t\t\tname: 'str-replaced',\n\t\t\t\tsig: ' [Number], String or Datatype, String or Lambda, String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string-replaced', 'replaced'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Also known as: (string-replaced:), (replaced:)  This macro produces a copy of the content string (the last string given), with all instances of a certain search string (or pattern) replaced using a given string (or a \"via\" lambda that constructs a replacement string). Giving an optional number N lets you only replace the first N instances. If a pattern is given, TypedVars may be used inside it, and they will be accessible in the \"via\" lambda.  ',\n\t\t\t\tanchor: 'macro_str-replaced',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstringreplaced: {\n\t\t\t\tname: 'str-replaced',\n\t\t\t\tsig: ' [Number], String or Datatype, String or Lambda, String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string-replaced', 'replaced'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Also known as: (string-replaced:), (replaced:)  This macro produces a copy of the content string (the last string given), with all instances of a certain search string (or pattern) replaced using a given string (or a \"via\" lambda that constructs a replacement string). Giving an optional number N lets you only replace the first N instances. If a pattern is given, TypedVars may be used inside it, and they will be accessible in the \"via\" lambda.  ',\n\t\t\t\tanchor: 'macro_str-replaced',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\treplaced: {\n\t\t\t\tname: 'str-replaced',\n\t\t\t\tsig: ' [Number], String or Datatype, String or Lambda, String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string-replaced', 'replaced'],\n\t\t\t\tabstract:\n\t\t\t\t\t'Also known as: (string-replaced:), (replaced:)  This macro produces a copy of the content string (the last string given), with all instances of a certain search string (or pattern) replaced using a given string (or a \"via\" lambda that constructs a replacement string). Giving an optional number N lets you only replace the first N instances. If a pattern is given, TypedVars may be used inside it, and they will be accessible in the \"via\" lambda.  ',\n\t\t\t\tanchor: 'macro_str-replaced',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tif: {\n\t\t\t\tname: 'if',\n\t\t\t\tsig: ' Boolean',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro accepts only booleans, and produces a changer that can be attached to hooks to hide them \"if\" the value was false.  ',\n\t\t\t\tanchor: 'macro_if',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '6'\n\t\t\t},\n\t\t\tunless: {\n\t\t\t\tname: 'unless',\n\t\t\t\tsig: ' Boolean',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro is the negated form of (if:): it accepts only booleans, and returns a changer that can be attached hooks to hide them \"if\" the value was true.  For more information, see the documentation of (if:).  ',\n\t\t\t\tanchor: 'macro_unless',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '7'\n\t\t\t},\n\t\t\telseif: {\n\t\t\t\tname: 'else-if',\n\t\t\t\tsig: ' Boolean',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"This macro's result changes depending on whether the previous hook in the passage was shown or hidden. If the previous hook was shown, then this changer hides the attached hook. Otherwise, it acts like (if:), showing the attached hook if it's true, and hiding it if it's false. If there was no preceding hook before this, then an error message will be printed.  \",\n\t\t\t\tanchor: 'macro_else-if',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '8'\n\t\t\t},\n\t\t\telse: {\n\t\t\t\tname: 'else',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This is a convenient limited variant of the (else-if:) macro. It will simply show the attached hook if the preceding hook was hidden, and hide it otherwise. If there was no preceding hook before this, then an error message will be printed.  ',\n\t\t\t\tanchor: 'macro_else',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '9'\n\t\t\t},\n\t\t\thidden: {\n\t\t\t\tname: 'hidden',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Produces a changer that can be attached to hooks to hide them.  ',\n\t\t\t\tanchor: 'macro_hidden',\n\t\t\t\tcategory: 'showing and hiding'\n\t\t\t},\n\t\t\tverbatim: {\n\t\t\t\tname: 'verbatim',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['v6m'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook or command, the markup inside that would normally be rendered into HTML is instead presented as plain text, as if the verbatim markup was used on it.  ',\n\t\t\t\tanchor: 'macro_verbatim',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '15'\n\t\t\t},\n\t\t\tv6m: {\n\t\t\t\tname: 'verbatim',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['v6m'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook or command, the markup inside that would normally be rendered into HTML is instead presented as plain text, as if the verbatim markup was used on it.  ',\n\t\t\t\tanchor: 'macro_verbatim',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '15'\n\t\t\t},\n\t\t\tlive: {\n\t\t\t\tname: 'live',\n\t\t\t\tsig: ' [Number]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When you attach this changer to a hook, the hook becomes \"live\", which means that it\\'s repeatedly re-run every certain number of milliseconds, replacing the source inside of the hook with a newly computed version.  ',\n\t\t\t\tanchor: 'macro_live',\n\t\t\t\tcategory: 'live',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tevent: {\n\t\t\t\tname: 'event',\n\t\t\t\tsig: ' Lambda',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Hooks that have this changer attached will only be run when the given condition becomes true.  ',\n\t\t\t\tanchor: 'macro_event',\n\t\t\t\tcategory: 'live',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tmore: {\n\t\t\t\tname: 'more',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Hooks that have this changer attached will only be run once no other exits - links and (click:)-enchanted areas - are remaining in the passage, and will reveal \"more\" prose.  ',\n\t\t\t\tanchor: 'macro_more',\n\t\t\t\tcategory: 'live',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tafter: {\n\t\t\t\tname: 'after',\n\t\t\t\tsig: ' Number, [Number]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Hooks that have this changer attached will only be run once the given amount of time has passed since the passage was rendered. An optional second number specifies that the player can speed up the delay by holding down a keyboard key or mouse button, or by touching the touch device.  ',\n\t\t\t\tanchor: 'macro_after',\n\t\t\t\tcategory: 'live',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\taftererror: {\n\t\t\t\tname: 'after-error',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A bug-specific event macro, this hides the hook and only causes it to run once an error occurs.  ',\n\t\t\t\tanchor: 'macro_after-error',\n\t\t\t\tcategory: 'live',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\thook: {\n\t\t\t\tname: 'hook',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that allows the author to give a hook a computed tag name.  ',\n\t\t\t\tanchor: 'macro_hook',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tfor: {\n\t\t\t\tname: 'for',\n\t\t\t\tsig: ' Lambda, [...Any]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['loop'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, this repeats the attached hook, setting a temporary variable to a different value on each repeat.  ',\n\t\t\t\tanchor: 'macro_for',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '10'\n\t\t\t},\n\t\t\tloop: {\n\t\t\t\tname: 'for',\n\t\t\t\tsig: ' Lambda, [...Any]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['loop'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, this repeats the attached hook, setting a temporary variable to a different value on each repeat.  ',\n\t\t\t\tanchor: 'macro_for',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '10'\n\t\t\t},\n\t\t\ttransition: {\n\t\t\t\tname: 'transition',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that applies a built-in CSS transition to a hook as it appears. Give this macro one of these strings (capitalisation and hyphens ignored): `\"instant\"`, `\"dissolve\"`, `\"fade\"`, `\"rumble\"`, `\"shudder\"`, `\"pulse\"`, `\"zoom\"`, `\"flicker\"`, `\"slide-left\"`, `\"slide-right\"`, `\"slide-up\"`, `\"slide-down\"`, `\"fade-left\"`, `\"fade-right\"`, `\"fade-up\"` and `\"fade-down\"`.  ',\n\t\t\t\tanchor: 'macro_transition',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tt8n: {\n\t\t\t\tname: 'transition',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that applies a built-in CSS transition to a hook as it appears. Give this macro one of these strings (capitalisation and hyphens ignored): `\"instant\"`, `\"dissolve\"`, `\"fade\"`, `\"rumble\"`, `\"shudder\"`, `\"pulse\"`, `\"zoom\"`, `\"flicker\"`, `\"slide-left\"`, `\"slide-right\"`, `\"slide-up\"`, `\"slide-down\"`, `\"fade-left\"`, `\"fade-right\"`, `\"fade-up\"` and `\"fade-down\"`.  ',\n\t\t\t\tanchor: 'macro_transition',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\ttransitiontime: {\n\t\t\t\tname: 'transition-time',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-time'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that, when added to a (transition:) changer, adjusts the time of the transition.  ',\n\t\t\t\tanchor: 'macro_transition-time',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tt8ntime: {\n\t\t\t\tname: 'transition-time',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-time'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that, when added to a (transition:) changer, adjusts the time of the transition.  ',\n\t\t\t\tanchor: 'macro_transition-time',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\ttransitiondelay: {\n\t\t\t\tname: 'transition-delay',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-delay'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that, when added to a (transition:) changer, delays the start of the transition by a given time.  ',\n\t\t\t\tanchor: 'macro_transition-delay',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tt8ndelay: {\n\t\t\t\tname: 'transition-delay',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-delay'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that, when added to a (transition:) changer, delays the start of the transition by a given time.  ',\n\t\t\t\tanchor: 'macro_transition-delay',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\ttransitionskip: {\n\t\t\t\tname: 'transition-skip',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-skip'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that, when added to a (transition:) changer, allows the player to skip or accelerate the transition by holding down a keyboard key or mouse button, or by touching the touch device.  ',\n\t\t\t\tanchor: 'macro_transition-skip',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '6'\n\t\t\t},\n\t\t\tt8nskip: {\n\t\t\t\tname: 'transition-skip',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-skip'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that, when added to a (transition:) changer, allows the player to skip or accelerate the transition by holding down a keyboard key or mouse button, or by touching the touch device.  ',\n\t\t\t\tanchor: 'macro_transition-skip',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '6'\n\t\t\t},\n\t\t\ttransitiondepart: {\n\t\t\t\tname: 'transition-depart',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-depart'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that alters passage links, (link-goto:)s, and most every other kind of link, changing which passage fade-out animation the link uses.  ',\n\t\t\t\tanchor: 'macro_transition-depart',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tt8ndepart: {\n\t\t\t\tname: 'transition-depart',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-depart'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that alters passage links, (link-goto:)s, and most every other kind of link, changing which passage fade-out animation the link uses.  ',\n\t\t\t\tanchor: 'macro_transition-depart',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\ttransitionarrive: {\n\t\t\t\tname: 'transition-arrive',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-arrive'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that alters passage links, (link-goto:)s, and most every other kind of link, changing which passage fade-in animation the link uses.  ',\n\t\t\t\tanchor: 'macro_transition-arrive',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tt8narrive: {\n\t\t\t\tname: 'transition-arrive',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['t8n-arrive'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A changer that alters passage links, (link-goto:)s, and most every other kind of link, changing which passage fade-in animation the link uses.  ',\n\t\t\t\tanchor: 'macro_transition-arrive',\n\t\t\t\tcategory: 'transitions',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tbutton: {\n\t\t\t\tname: 'button',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When applied to a link, this changer styles it so that it resembles a button, and makes it take up the entire passage width. It is not recommended that this be used on non-link hooks.  ',\n\t\t\t\tanchor: 'macro_button',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\taction: {\n\t\t\t\tname: 'action',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a link command, or given to a link changer macro as the second value, this changer turns the link into a different kind of interaction element with a different appearance - one that is either activated by hovering the mouse pointer over it, hoving the mouse pointer off of it, or double-clicking it. This does nothing when attached or supplied to a non-link hook.  ',\n\t\t\t\tanchor: 'macro_action',\n\t\t\t\tcategory: 'links',\n\t\t\t\tcategoryOrder: '99'\n\t\t\t},\n\t\t\tborder: {\n\t\t\t\tname: 'border',\n\t\t\t\tsig: ' String, [String], [String], [String]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['b4r'],\n\t\t\t\tabstract: 'A changer macro that applies a CSS border to the hook.  ',\n\t\t\t\tanchor: 'macro_border',\n\t\t\t\tcategory: 'borders',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tb4r: {\n\t\t\t\tname: 'border',\n\t\t\t\tsig: ' String, [String], [String], [String]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['b4r'],\n\t\t\t\tabstract: 'A changer macro that applies a CSS border to the hook.  ',\n\t\t\t\tanchor: 'macro_border',\n\t\t\t\tcategory: 'borders',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tbordersize: {\n\t\t\t\tname: 'border-size',\n\t\t\t\tsig: ' Number, [Number], [Number], [Number]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['b4r-size'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When applied to a hook being changed by the (border:) changer, this multiplies the size of the border by a given amount.  ',\n\t\t\t\tanchor: 'macro_border-size',\n\t\t\t\tcategory: 'borders',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tb4rsize: {\n\t\t\t\tname: 'border-size',\n\t\t\t\tsig: ' Number, [Number], [Number], [Number]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['b4r-size'],\n\t\t\t\tabstract:\n\t\t\t\t\t'When applied to a hook being changed by the (border:) changer, this multiplies the size of the border by a given amount.  ',\n\t\t\t\tanchor: 'macro_border-size',\n\t\t\t\tcategory: 'borders',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tcornerradius: {\n\t\t\t\tname: 'corner-radius',\n\t\t\t\tsig: ' Number, [Number], [Number], [Number]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When applied to a hook, this rounds the corners by the given number of pixels, causing the hook to become increasingly round or button-like.  ',\n\t\t\t\tanchor: 'macro_corner-radius',\n\t\t\t\tcategory: 'borders',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tbordercolour: {\n\t\t\t\tname: 'border-colour',\n\t\t\t\tsig: ' String or Colour, [String or Colour], [String or Colour], [String or Colour]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['b4r-colour', 'border-color', 'b4r-color'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When applied to a hook being changed by the (border:) changer, this changes the border's colour.  \",\n\t\t\t\tanchor: 'macro_border-colour',\n\t\t\t\tcategory: 'borders',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tb4rcolour: {\n\t\t\t\tname: 'border-colour',\n\t\t\t\tsig: ' String or Colour, [String or Colour], [String or Colour], [String or Colour]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['b4r-colour', 'border-color', 'b4r-color'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When applied to a hook being changed by the (border:) changer, this changes the border's colour.  \",\n\t\t\t\tanchor: 'macro_border-colour',\n\t\t\t\tcategory: 'borders',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tbordercolor: {\n\t\t\t\tname: 'border-colour',\n\t\t\t\tsig: ' String or Colour, [String or Colour], [String or Colour], [String or Colour]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['b4r-colour', 'border-color', 'b4r-color'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When applied to a hook being changed by the (border:) changer, this changes the border's colour.  \",\n\t\t\t\tanchor: 'macro_border-colour',\n\t\t\t\tcategory: 'borders',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\tb4rcolor: {\n\t\t\t\tname: 'border-colour',\n\t\t\t\tsig: ' String or Colour, [String or Colour], [String or Colour], [String or Colour]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['b4r-colour', 'border-color', 'b4r-color'],\n\t\t\t\tabstract:\n\t\t\t\t\t\"When applied to a hook being changed by the (border:) changer, this changes the border's colour.  \",\n\t\t\t\tanchor: 'macro_border-colour',\n\t\t\t\tcategory: 'borders',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tname: 'opacity',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer changes how opaque the attached hook is, using a value from 0 to 1. Reducing the value makes it more transparent. An opacity of 0 makes the hook invisible.  ',\n\t\t\t\tanchor: 'macro_opacity',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tfont: {\n\t\t\t\tname: 'font',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer changes the font used to display the text of the attached hook. Provide the font\\'s family name (such as \"Helvetica Neue\" or \"Courier\") as a string.  ',\n\t\t\t\tanchor: 'macro_font',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\talign: {\n\t\t\t\tname: 'align',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer changes the alignment of text in the attached hook, as if the `===>`~ arrow syntax was used. In fact, these same arrows (`==>`~, `=><=`~, `<==>`~, `====><=`~ etc.) should be supplied as a string to specify the degree of alignment.  ',\n\t\t\t\tanchor: 'macro_align',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttextcolour: {\n\t\t\t\tname: 'text-colour',\n\t\t\t\tsig: ' String or Colour',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['colour', 'text-color', 'color'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer changes the colour used by the text in the attached hook. You can supply either a string with a CSS-style colour (a colour name or RGB number supported by CSS), or a built-in colour object.  ',\n\t\t\t\tanchor: 'macro_text-colour',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tcolour: {\n\t\t\t\tname: 'text-colour',\n\t\t\t\tsig: ' String or Colour',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['colour', 'text-color', 'color'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer changes the colour used by the text in the attached hook. You can supply either a string with a CSS-style colour (a colour name or RGB number supported by CSS), or a built-in colour object.  ',\n\t\t\t\tanchor: 'macro_text-colour',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttextcolor: {\n\t\t\t\tname: 'text-colour',\n\t\t\t\tsig: ' String or Colour',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['colour', 'text-color', 'color'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer changes the colour used by the text in the attached hook. You can supply either a string with a CSS-style colour (a colour name or RGB number supported by CSS), or a built-in colour object.  ',\n\t\t\t\tanchor: 'macro_text-colour',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tcolor: {\n\t\t\t\tname: 'text-colour',\n\t\t\t\tsig: ' String or Colour',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['colour', 'text-color', 'color'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer changes the colour used by the text in the attached hook. You can supply either a string with a CSS-style colour (a colour name or RGB number supported by CSS), or a built-in colour object.  ',\n\t\t\t\tanchor: 'macro_text-colour',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttextsize: {\n\t\t\t\tname: 'text-size',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['size'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer changes the text size of the attached hook by the given fraction. Give it a number greater than 1 to enlarge the text, and a number smaller to decrease the text. Providing 1 to this macro will revert the text size back to the default.  ',\n\t\t\t\tanchor: 'macro_text-size',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tname: 'text-size',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['size'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer changes the text size of the attached hook by the given fraction. Give it a number greater than 1 to enlarge the text, and a number smaller to decrease the text. Providing 1 to this macro will revert the text size back to the default.  ',\n\t\t\t\tanchor: 'macro_text-size',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttextindent: {\n\t\t\t\tname: 'text-indent',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer causes the attached hook to be indented by the given number of pixels.  ',\n\t\t\t\tanchor: 'macro_text-indent',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttextrotatez: {\n\t\t\t\tname: 'text-rotate-z',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['text-rotate'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer visually rotates the attached hook clockwise by a given number of degrees. The rotational axis is in the centre of the hook.  ',\n\t\t\t\tanchor: 'macro_text-rotate-z',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttextrotate: {\n\t\t\t\tname: 'text-rotate-z',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['text-rotate'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer visually rotates the attached hook clockwise by a given number of degrees. The rotational axis is in the centre of the hook.  ',\n\t\t\t\tanchor: 'macro_text-rotate-z',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttextrotatey: {\n\t\t\t\tname: 'text-rotate-y',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer visually rotates the attached hook clockwise, around the Y axis (vertical), by a given number of degrees, making it appear to lean into the page. The rotational axis is in the centre of the hook.  ',\n\t\t\t\tanchor: 'macro_text-rotate-y',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttextrotatex: {\n\t\t\t\tname: 'text-rotate-x',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer visually rotates the attached hook clockwise, around the X axis (horizontal), by a given number of degrees, making it appear to lean into the page. The rotational axis is in the centre of the hook.  ',\n\t\t\t\tanchor: 'macro_text-rotate-x',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tbg: {\n\t\t\t\tname: 'bg',\n\t\t\t\tsig: ' Colour or String or Gradient',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['background'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer alters the background colour or background image of the attached hook. Supplying a gradient (produced by (gradient:)) will set the background to that gradient. Supplying a colour (produced by (rgb:), (hsl:), (lch:) or another such macro), a built-in colour value like `red`, or a bare colour value like #FA9138) will set the background to a flat colour. CSS strings that resemble HTML hex colours (like \"#FA9138\") will also provide flat colour. Other strings will be interpreted as an image URL, and the background will be set to it.  ',\n\t\t\t\tanchor: 'macro_bg',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tbackground: {\n\t\t\t\tname: 'bg',\n\t\t\t\tsig: ' Colour or String or Gradient',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: ['background'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This styling changer alters the background colour or background image of the attached hook. Supplying a gradient (produced by (gradient:)) will set the background to that gradient. Supplying a colour (produced by (rgb:), (hsl:), (lch:) or another such macro), a built-in colour value like `red`, or a bare colour value like #FA9138) will set the background to a flat colour. CSS strings that resemble HTML hex colours (like \"#FA9138\") will also provide flat colour. Other strings will be interpreted as an image URL, and the background will be set to it.  ',\n\t\t\t\tanchor: 'macro_bg',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttextstyle: {\n\t\t\t\tname: 'text-style',\n\t\t\t\tsig: ' ...String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This applies one or more selected built-in text styles to the hook\\'s text. Give this macro one of these strings (capitalisation and hyphens ignored): `\"none\"`, `\"bold\"`, `\"italic\"`, `\"underline\"`, `\"double-underline\"`, `\"wavy-underline\"`, `\"strike\"`, `\"double-strike\"`, `\"wavy-strike\"`, `\"superscript\"`, `\"subscript\"`, `\"blink\"`, `\"shudder\"`, `\"mark\"`, `\"condense\"`, `\"expand\"`, `\"outline\"`, `\"shadow\"`, `\"emboss\"`, `\"smear\"`, `\"blur\"`, `\"blurrier\"`, `\"mirror\"`, `\"upside-down\"`, `\"tall\"`, `\"flat\"`, `\"fade-in-out\"`, `\"rumble\"`, `\"sway\"`, `\"buoy\"` or `\"fidget\"`.  ',\n\t\t\t\tanchor: 'macro_text-style',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tcollapse: {\n\t\t\t\tname: 'collapse',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, this collapses the whitespace within the hook, in the same manner as the collapsing whitespace markup.  ',\n\t\t\t\tanchor: 'macro_collapse',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\thoverstyle: {\n\t\t\t\tname: 'hover-style',\n\t\t\t\tsig: ' Changer',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Given a style-altering changer, it makes a changer which only applies when the hook or command is hovered over with the mouse pointer, and is removed when hovering off.  ',\n\t\t\t\tanchor: 'macro_hover-style',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tcss: {\n\t\t\t\tname: 'css',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This takes a string of inline CSS, and applies it to the hook, as if it were a HTML \"style\" property.  ',\n\t\t\t\tanchor: 'macro_css',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\ttesttrue: {\n\t\t\t\tname: 'test-true',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"If you want to test your passage, while ignoring a specific changer macro in it, temporarily change that changer macro's name to (test-true:), and it will ignore all of the data given to it, while enabling the hook.  \",\n\t\t\t\tanchor: 'macro_test-true',\n\t\t\t\tcategory: 'debugging',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\ttestfalse: {\n\t\t\t\tname: 'test-false',\n\t\t\t\tsig: ' [...Any]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"If you want to test your passage in order to see what would happen if an (if:), (unless:) or (else-if:) macro would hide the hook it's attached to, you can temporarily change the name of the macro to (test-false:), which causes it to ignore the data given to it and act as if it was given `false`.  \",\n\t\t\t\tanchor: 'macro_test-false',\n\t\t\t\tcategory: 'debugging',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tanimate: {\n\t\t\t\tname: 'animate',\n\t\t\t\tsig: ' HookName, String, [Number]',\n\t\t\t\treturnType: 'Command',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'A command that causes a hook to briefly animate, as if a (transition:) was applied to it. The length of time that the animation plays can be optionally altered by providing a number.  ',\n\t\t\t\tanchor: 'macro_animate',\n\t\t\t\tcategory: 'transitions'\n\t\t\t},\n\t\t\tbox: {\n\t\t\t\tname: 'box',\n\t\t\t\tsig: ' String, [Number]',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, it becomes a \"box\", with a given width proportional to the containing element\\'s width, an optional number of lines tall, and a scroll bar if its contained text is longer than its height can contain.  ',\n\t\t\t\tanchor: 'macro_box',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tfloatbox: {\n\t\t\t\tname: 'float-box',\n\t\t\t\tsig: ' String, String',\n\t\t\t\treturnType: 'Changer',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When attached to a hook, it becomes a \"floating box\", placed at a given portion of the window, sized proportionally to the window\\'s dimensions, and with a scroll bar if its contained text is longer than its height can contain.  ',\n\t\t\t\tanchor: 'macro_float-box',\n\t\t\t\tcategory: 'styling'\n\t\t\t},\n\t\t\tstr: {\n\t\t\t\tname: 'str',\n\t\t\t\tsig: ' ...[Number or String or Boolean or Array]',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string', 'text'],\n\t\t\t\tabstract:\n\t\t\t\t\t'(str:) accepts any amount of values and tries to convert them all to a single String.  ',\n\t\t\t\tanchor: 'macro_str',\n\t\t\t\tcategory: 'string',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tstring: {\n\t\t\t\tname: 'str',\n\t\t\t\tsig: ' ...[Number or String or Boolean or Array]',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string', 'text'],\n\t\t\t\tabstract:\n\t\t\t\t\t'(str:) accepts any amount of values and tries to convert them all to a single String.  ',\n\t\t\t\tanchor: 'macro_str',\n\t\t\t\tcategory: 'string',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\ttext: {\n\t\t\t\tname: 'str',\n\t\t\t\tsig: ' ...[Number or String or Boolean or Array]',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string', 'text'],\n\t\t\t\tabstract:\n\t\t\t\t\t'(str:) accepts any amount of values and tries to convert them all to a single String.  ',\n\t\t\t\tanchor: 'macro_str',\n\t\t\t\tcategory: 'string',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tsource: {\n\t\t\t\tname: 'source',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given almost any data value, this will produce a string of Harlowe source code that can, when run, create that value exactly.  ',\n\t\t\t\tanchor: 'macro_source',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tsubstring: {\n\t\t\t\tname: 'substring',\n\t\t\t\tsig: ' String, Number, Number',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro produces a substring of the given string, cut from two inclusive number positions.  ',\n\t\t\t\tanchor: 'macro_substring',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tlowercase: {\n\t\t\t\tname: 'lowercase',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro produces a lowercase version of the given string.  ',\n\t\t\t\tanchor: 'macro_lowercase',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tuppercase: {\n\t\t\t\tname: 'uppercase',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro produces an uppercase version of the given string.  ',\n\t\t\t\tanchor: 'macro_uppercase',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tlowerfirst: {\n\t\t\t\tname: 'lowerfirst',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro produces a version of the given string, where the first alphanumeric character is lowercase, and other characters are left as-is.  ',\n\t\t\t\tanchor: 'macro_lowerfirst',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tupperfirst: {\n\t\t\t\tname: 'upperfirst',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro produces a version of the given string, where the first alphanumeric character is uppercase, and other characters are left as-is.  ',\n\t\t\t\tanchor: 'macro_upperfirst',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\twords: {\n\t\t\t\tname: 'words',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro takes a string and creates an array of each word (\"word\" meaning a sequence of non-whitespace characters) in the string.  ',\n\t\t\t\tanchor: 'macro_words',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstrrepeated: {\n\t\t\t\tname: 'str-repeated',\n\t\t\t\tsig: ' Number, String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string-repeated'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A special shorthand combination of the (str:) and (repeated:) macros, this accepts a single string and duplicates it the given number of times.  ',\n\t\t\t\tanchor: 'macro_str-repeated',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstringrepeated: {\n\t\t\t\tname: 'str-repeated',\n\t\t\t\tsig: ' Number, String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string-repeated'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A special shorthand combination of the (str:) and (repeated:) macros, this accepts a single string and duplicates it the given number of times.  ',\n\t\t\t\tanchor: 'macro_str-repeated',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstrreversed: {\n\t\t\t\tname: 'str-reversed',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string-reversed'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A special shorthand combination of the (str:) and (reversed:) macros, this accepts a single string and reverses it.  ',\n\t\t\t\tanchor: 'macro_str-reversed',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstringreversed: {\n\t\t\t\tname: 'str-reversed',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string-reversed'],\n\t\t\t\tabstract:\n\t\t\t\t\t'A special shorthand combination of the (str:) and (reversed:) macros, this accepts a single string and reverses it.  ',\n\t\t\t\tanchor: 'macro_str-reversed',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tjoined: {\n\t\t\t\tname: 'joined',\n\t\t\t\tsig: ' ...String',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Using the first string as a separator value, this macro takes all of the other strings given to it, and joins them into a single string.  ',\n\t\t\t\tanchor: 'macro_joined',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tplural: {\n\t\t\t\tname: 'plural',\n\t\t\t\tsig: ' Number, String, [String]',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro takes a whole number and a string, then converts the number to a string, joins them up with a space character, and pluralises the string if the number wasn\\'t 1 or -1. By default, this pluralisation is done by adding \"s\", as in some English plurals. An optional extra string can specify a different plural word to use instead.  ',\n\t\t\t\tanchor: 'macro_plural',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstrnth: {\n\t\t\t\tname: 'str-nth',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string-nth'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro takes a whole number, and converts it to a string comprising an English ordinal abbreviation (of the form \"nth\", such as \"1st\", \"22nd\", etc.).  ',\n\t\t\t\tanchor: 'macro_str-nth',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tstringnth: {\n\t\t\t\tname: 'str-nth',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: ['string-nth'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro takes a whole number, and converts it to a string comprising an English ordinal abbreviation (of the form \"nth\", such as \"1st\", \"22nd\", etc.).  ',\n\t\t\t\tanchor: 'macro_str-nth',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tdigitformat: {\n\t\t\t\tname: 'digit-format',\n\t\t\t\tsig: ' String, Number',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract: '',\n\t\t\t\tanchor: 'macro_digit-format',\n\t\t\t\tcategory: 'string'\n\t\t\t},\n\t\t\tnum: {\n\t\t\t\tname: 'num',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: ['number'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro converts strings to numbers by reading the digits in the entire string. It can handle decimal fractions and negative numbers. If any letters or other unusual characters appear in the number, it will result in an error.  ',\n\t\t\t\tanchor: 'macro_num',\n\t\t\t\tcategory: 'number'\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tname: 'num',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: ['number'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro converts strings to numbers by reading the digits in the entire string. It can handle decimal fractions and negative numbers. If any letters or other unusual characters appear in the number, it will result in an error.  ',\n\t\t\t\tanchor: 'macro_num',\n\t\t\t\tcategory: 'number'\n\t\t\t},\n\t\t\tdatatype: {\n\t\t\t\tname: 'datatype',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'Datatype',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro takes any storeable value, and produces a datatype that matches it.  ',\n\t\t\t\tanchor: 'macro_datatype',\n\t\t\t\tcategory: 'custom macros',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tdatapattern: {\n\t\t\t\tname: 'datapattern',\n\t\t\t\tsig: ' Any',\n\t\t\t\treturnType: 'Any',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This takes any storeable value, and produces a datatype that matches it, in a manner similar to (datatype:). However, when given an array or datamap, it creates an array or datamap with its values replaced with their datatypes, which can be used as a more accurate pattern with `matches` or (set:) elsewhere.  ',\n\t\t\t\tanchor: 'macro_datapattern',\n\t\t\t\tcategory: 'custom macros',\n\t\t\t\tcategoryOrder: '6'\n\t\t\t},\n\t\t\trgb: {\n\t\t\t\tname: 'rgb',\n\t\t\t\tsig: ' Number, Number, Number, [Number]',\n\t\t\t\treturnType: 'Colour',\n\t\t\t\taka: ['rgba'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro creates a colour using the three red (r), green (g) and blue (b) values provided, whose values are numbers between 0 and 255, and, optionally, the transparency (alpha, or a) percentage, which is a fractional value between 0 (fully transparent) and 1 (fully visible).  Anything drawn with a partially transparent colour will itself be partially transparent. You can then layer such elements to produce a few interesting visual effects.  ',\n\t\t\t\tanchor: 'macro_rgb',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\trgba: {\n\t\t\t\tname: 'rgb',\n\t\t\t\tsig: ' Number, Number, Number, [Number]',\n\t\t\t\treturnType: 'Colour',\n\t\t\t\taka: ['rgba'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro creates a colour using the three red (r), green (g) and blue (b) values provided, whose values are numbers between 0 and 255, and, optionally, the transparency (alpha, or a) percentage, which is a fractional value between 0 (fully transparent) and 1 (fully visible).  Anything drawn with a partially transparent colour will itself be partially transparent. You can then layer such elements to produce a few interesting visual effects.  ',\n\t\t\t\tanchor: 'macro_rgb',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '2'\n\t\t\t},\n\t\t\thsl: {\n\t\t\t\tname: 'hsl',\n\t\t\t\tsig: ' Number, Number, Number, [Number]',\n\t\t\t\treturnType: 'Colour',\n\t\t\t\taka: ['hsla'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro creates a colour using the given hue (h) angle in degrees, as well as the given saturation (s) and lightness (l) percentages, and, optionally, the transparency (alpha, or a) percentage, which is a fractional value between 0 (fully transparent) and 1 (fully visible).  Anything drawn with a partially transparent colour will itself be partially transparent. You can then layer such elements to produce a few interesting visual effects.  ',\n\t\t\t\tanchor: 'macro_hsl',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\thsla: {\n\t\t\t\tname: 'hsl',\n\t\t\t\tsig: ' Number, Number, Number, [Number]',\n\t\t\t\treturnType: 'Colour',\n\t\t\t\taka: ['hsla'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro creates a colour using the given hue (h) angle in degrees, as well as the given saturation (s) and lightness (l) percentages, and, optionally, the transparency (alpha, or a) percentage, which is a fractional value between 0 (fully transparent) and 1 (fully visible).  Anything drawn with a partially transparent colour will itself be partially transparent. You can then layer such elements to produce a few interesting visual effects.  ',\n\t\t\t\tanchor: 'macro_hsl',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '1'\n\t\t\t},\n\t\t\tlch: {\n\t\t\t\tname: 'lch',\n\t\t\t\tsig: ' Number, Number, Number, [Number]',\n\t\t\t\treturnType: 'Colour',\n\t\t\t\taka: ['lcha'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro creates a colour using three values in the CIELAB colour model - a lightness (l) percentage, a chroma (c) value, and a hue (h) angle in degrees, and, optionally, the transparency (alpha, or a) percentage, which is a fractional value between 0 (fully transparent) and 1 (fully visible).  Anything drawn with a partially transparent colour will itself be partially transparent. You can then layer such elements to produce a few interesting visual effects.  ',\n\t\t\t\tanchor: 'macro_lch',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tlcha: {\n\t\t\t\tname: 'lch',\n\t\t\t\tsig: ' Number, Number, Number, [Number]',\n\t\t\t\treturnType: 'Colour',\n\t\t\t\taka: ['lcha'],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro creates a colour using three values in the CIELAB colour model - a lightness (l) percentage, a chroma (c) value, and a hue (h) angle in degrees, and, optionally, the transparency (alpha, or a) percentage, which is a fractional value between 0 (fully transparent) and 1 (fully visible).  Anything drawn with a partially transparent colour will itself be partially transparent. You can then layer such elements to produce a few interesting visual effects.  ',\n\t\t\t\tanchor: 'macro_lch',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '3'\n\t\t\t},\n\t\t\tcomplement: {\n\t\t\t\tname: 'complement',\n\t\t\t\tsig: ' Colour',\n\t\t\t\treturnType: 'Colour',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a colour, this provides a complement to that colour.  ',\n\t\t\t\tanchor: 'macro_complement',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '4'\n\t\t\t},\n\t\t\tmix: {\n\t\t\t\tname: 'mix',\n\t\t\t\tsig: ' Number, Colour, Number, Colour',\n\t\t\t\treturnType: 'Colour',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given two pairs of values - each a number from 0 to 1 and a colour - this macro produces a mix of the two colours, using the numbers as ratios of each colour. The colours are mixed using the LCH colourspace, used by the (lch:) macro.  ',\n\t\t\t\tanchor: 'macro_mix',\n\t\t\t\tcategory: 'colour'\n\t\t\t},\n\t\t\tpalette: {\n\t\t\t\tname: 'palette',\n\t\t\t\tsig: ' String, Colour',\n\t\t\t\treturnType: 'Array',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a string specifying a palette type, and a colour, this macro produces an array containing the given colour followed by three additional colours that together form a palette, for use with (text-colour:), (bg:), and other macros.  ',\n\t\t\t\tanchor: 'macro_palette',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '5'\n\t\t\t},\n\t\t\tgradient: {\n\t\t\t\tname: 'gradient',\n\t\t\t\tsig: ' Number, ...Number, Colour',\n\t\t\t\treturnType: 'Gradient',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a degree angle, followed by any number of number-colour pairs called \"colour stops\", this macro produces a gradient that fades between those colours in the direction of the angle.  ',\n\t\t\t\tanchor: 'macro_gradient',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '6'\n\t\t\t},\n\t\t\tstripes: {\n\t\t\t\tname: 'stripes',\n\t\t\t\tsig: ' Number, Number, Colour, Colour',\n\t\t\t\treturnType: 'Gradient',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a degree angle, a pixel distance, and two or more colours, this macro produces a gradient that draws a striped background, with each stripe as wide as the distance, and alternating through the given colours.  ',\n\t\t\t\tanchor: 'macro_stripes',\n\t\t\t\tcategory: 'colour',\n\t\t\t\tcategoryOrder: '7'\n\t\t\t},\n\t\t\thooksnamed: {\n\t\t\t\tname: 'hooks-named',\n\t\t\t\tsig: ' String',\n\t\t\t\treturnType: 'HookName',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a string, this creates a HookName from it. This can be used to dynamically create HookNames.  ',\n\t\t\t\tanchor: 'macro_hooks-named',\n\t\t\t\tcategory: 'basics'\n\t\t\t},\n\t\t\tcond: {\n\t\t\t\tname: 'cond',\n\t\t\t\tsig: ' Boolean, Any, ...Any',\n\t\t\t\treturnType: 'Any',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'When given a sequence of booleans (the \"conditions\") paired with values, this provides the first value that was paired with a `true` condition. This can give you one value or another based on a quick check.  ',\n\t\t\t\tanchor: 'macro_cond',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '12'\n\t\t\t},\n\t\t\tweekday: {\n\t\t\t\tname: 'weekday',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This date/time macro produces one of the strings \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\" or \"Saturday\", based on the weekday on the current player\\'s system clock.  ',\n\t\t\t\tanchor: 'macro_weekday',\n\t\t\t\tcategory: 'date and time'\n\t\t\t},\n\t\t\tmonthday: {\n\t\t\t\tname: 'monthday',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"This date/time macro produces a number corresponding to the day of the month on the current player's system clock. This should be between 1 (on the 1st of the month) and 31, inclusive.  \",\n\t\t\t\tanchor: 'macro_monthday',\n\t\t\t\tcategory: 'date and time'\n\t\t\t},\n\t\t\tcurrenttime: {\n\t\t\t\tname: 'current-time',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This date/time macro produces a string of the current 12-hour time on the current player\\'s system clock, in the format \"12:00 AM\".  ',\n\t\t\t\tanchor: 'macro_current-time',\n\t\t\t\tcategory: 'date and time'\n\t\t\t},\n\t\t\tcurrentdate: {\n\t\t\t\tname: 'current-date',\n\t\t\t\tsig: '',\n\t\t\t\treturnType: 'String',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This date/time macro produces a string of the current date the current player\\'s system clock, in the format \"Thu Jan 01 1970\".  ',\n\t\t\t\tanchor: 'macro_current-date',\n\t\t\t\tcategory: 'date and time'\n\t\t\t},\n\t\t\tmin: {\n\t\t\t\tname: 'min',\n\t\t\t\tsig: ' ...Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro accepts numbers, and evaluates to the lowest valued number.  ',\n\t\t\t\tanchor: 'macro_min',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tname: 'max',\n\t\t\t\tsig: ' ...Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro accepts numbers, and evaluates to the highest valued number.  ',\n\t\t\t\tanchor: 'macro_max',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tabs: {\n\t\t\t\tname: 'abs',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro finds the absolute value of a number (without the sign).  ',\n\t\t\t\tanchor: 'macro_abs',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tsign: {\n\t\t\t\tname: 'sign',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro produces -1 when given a negative number, 0 when given 0, and 1 when given a positive number.  ',\n\t\t\t\tanchor: 'macro_sign',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tsin: {\n\t\t\t\tname: 'sin',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro computes the sine of the given number of radians.  ',\n\t\t\t\tanchor: 'macro_sin',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tcos: {\n\t\t\t\tname: 'cos',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro computes the cosine of the given number of radians.  ',\n\t\t\t\tanchor: 'macro_cos',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\ttan: {\n\t\t\t\tname: 'tan',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro computes the tangent of the given number of radians.  ',\n\t\t\t\tanchor: 'macro_tan',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tfloor: {\n\t\t\t\tname: 'floor',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro rounds the given number downward to a whole number. If a whole number is provided, it returns the number as-is.  ',\n\t\t\t\tanchor: 'macro_floor',\n\t\t\t\tcategory: 'number'\n\t\t\t},\n\t\t\tround: {\n\t\t\t\tname: 'round',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro rounds the given number to the nearest whole number - downward if its decimals are smaller than 0.5, and upward otherwise. If a whole number is provided, it returns the number as-is.  ',\n\t\t\t\tanchor: 'macro_round',\n\t\t\t\tcategory: 'number'\n\t\t\t},\n\t\t\ttrunc: {\n\t\t\t\tname: 'trunc',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro rounds the given number towards zero. This \"truncates\" the fractional portion of the number, removing it and leaving just the whole portion.  ',\n\t\t\t\tanchor: 'macro_trunc',\n\t\t\t\tcategory: 'number'\n\t\t\t},\n\t\t\tceil: {\n\t\t\t\tname: 'ceil',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro rounds the given number upward to a whole number. If a whole number is provided, it returns the number as-is.  ',\n\t\t\t\tanchor: 'macro_ceil',\n\t\t\t\tcategory: 'number'\n\t\t\t},\n\t\t\tpow: {\n\t\t\t\tname: 'pow',\n\t\t\t\tsig: ' Number, Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro raises the first number to the power of the second number, and provides the result.  ',\n\t\t\t\tanchor: 'macro_pow',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\texp: {\n\t\t\t\tname: 'exp',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t\"This maths macro raises Euler's number to the power of the given number, and provides the result.  \",\n\t\t\t\tanchor: 'macro_exp',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tsqrt: {\n\t\t\t\tname: 'sqrt',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro produces the square root of the given number.  ',\n\t\t\t\tanchor: 'macro_sqrt',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tlog: {\n\t\t\t\tname: 'log',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro produces the natural logarithm (the base-e logarithm) of the given number.  ',\n\t\t\t\tanchor: 'macro_log',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tlog10: {\n\t\t\t\tname: 'log10',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro produces the base-10 logarithm of the given number.  ',\n\t\t\t\tanchor: 'macro_log10',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\tlog2: {\n\t\t\t\tname: 'log2',\n\t\t\t\tsig: ' Number',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This maths macro produces the base-2 logarithm of the given number.  ',\n\t\t\t\tanchor: 'macro_log2',\n\t\t\t\tcategory: 'maths'\n\t\t\t},\n\t\t\trandom: {\n\t\t\t\tname: 'random',\n\t\t\t\tsig: ' Number, [Number]',\n\t\t\t\treturnType: 'Number',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'This macro produces a whole number randomly selected between the two whole numbers, inclusive (or, if the second number is absent, then between 0 and the first number, inclusive).  ',\n\t\t\t\tanchor: 'macro_random',\n\t\t\t\tcategory: 'number'\n\t\t\t},\n\t\t\teither: {\n\t\t\t\tname: 'either',\n\t\t\t\tsig: ' ...Any',\n\t\t\t\treturnType: 'Any',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Give this macro several values, separated by commas, and it will pick and return one of them randomly.  ',\n\t\t\t\tanchor: 'macro_either',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '11'\n\t\t\t},\n\t\t\tnth: {\n\t\t\t\tname: 'nth',\n\t\t\t\tsig: ' Number, ...Any',\n\t\t\t\treturnType: 'Any',\n\t\t\t\taka: [],\n\t\t\t\tabstract:\n\t\t\t\t\t'Given a positive whole number and a sequence of values, this selects the nth value in the sequence, where n is the number. If n is larger than the number of items in the sequence, the selection loops around to the start.  ',\n\t\t\t\tanchor: 'macro_nth',\n\t\t\t\tcategory: 'basics',\n\t\t\t\tcategoryOrder: '13'\n\t\t\t}\n\t\t}\n\t};\n\tvar builtinColourNames = {\n\t\t'#e61919': 'red',\n\t\t'#e68019': 'orange',\n\t\t'#e5e619': 'yellow',\n\t\t'#80e619': 'lime',\n\t\t'#19e619': 'green',\n\t\t'#19e5e6': 'cyan',\n\t\t'#197fe6': 'blue',\n\t\t'#1919e6': 'navy',\n\t\t'#7f19e6': 'purple',\n\t\t'#e619e5': 'magenta',\n\t\t'#ffffff': 'white',\n\t\t'#000000': 'black',\n\t\t'#888888': 'grey'\n\t};\n\t/*\n  \tThese icons are copy-pasted from FAIcons.dev.\n  */\n\n\tvar fontIcon = function fontIcon(name) {\n\t\tvar w =\n\t\t\targuments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n\t\tvar h =\n\t\t\targuments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n\t\treturn '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\" width=\"'\n\t\t\t.concat(w, '\" height=\"')\n\t\t\t.concat(h, '\"><path fill=\\'currentColor\\' d=\"')\n\t\t\t.concat(\n\t\t\t\t{\n\t\t\t\t\tsearch:\n\t\t\t\t\t\t'M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z',\n\t\t\t\t\t'align-right':\n\t\t\t\t\t\t'M16 224h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16zm416 192H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm3.17-384H172.83A12.82 12.82 0 0 0 160 44.83v38.34A12.82 12.82 0 0 0 172.83 96h262.34A12.82 12.82 0 0 0 448 83.17V44.83A12.82 12.82 0 0 0 435.17 32zm0 256H172.83A12.82 12.82 0 0 0 160 300.83v38.34A12.82 12.82 0 0 0 172.83 352h262.34A12.82 12.82 0 0 0 448 339.17v-38.34A12.82 12.82 0 0 0 435.17 288z',\n\t\t\t\t\t'list-ol':\n\t\t\t\t\t\t'M48 48a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm0 160a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm0 160a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm448 16H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z',\n\t\t\t\t\t'list-ul':\n\t\t\t\t\t\t'M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z',\n\t\t\t\t\t'border-style':\n\t\t\t\t\t\t'M240 416h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm192 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96-192h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0 96h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0 96h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-288h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-96H32A32 32 0 0 0 0 64v400a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V96h368a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z',\n\t\t\t\t\tcolumns:\n\t\t\t\t\t\t'M464 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM224 416H64V160h160v256zm224 0H288V160h160v256z',\n\t\t\t\t\teye: 'M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z',\n\t\t\t\t\tcomment:\n\t\t\t\t\t\t'M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7S4.8 480 8 480c66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32z',\n\t\t\t\t\tplus: 'M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n\t\t\t\t\tminus:\n\t\t\t\t\t\t'M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n\t\t\t\t\ttimes:\n\t\t\t\t\t\t'M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z',\n\t\t\t\t\tcheck:\n\t\t\t\t\t\t'M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z',\n\t\t\t\t\t'chevron-up':\n\t\t\t\t\t\t'M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z'\n\t\t\t\t}[name],\n\t\t\t\t'\"/></svg>'\n\t\t\t);\n\t};\n\n\tvar GCD = function GCD(a, b) {\n\t\treturn !a ? b : !b ? a : a > b ? GCD(a - b, b) : GCD(a, b - a);\n\t};\n\n\tvar fourDecimals = function fourDecimals(n) {\n\t\treturn round(n * 10000) / 10000;\n\t};\n\n\tfunction toHarloweColour(colour, alpha) {\n\t\tfunction hexToHSL(str) {\n\t\t\tstr = str.slice(1);\n\t\t\tvar r = parseInt(str.slice(0, 2), 16) / 255,\n\t\t\t\tg = parseInt(str.slice(2, 4), 16) / 255,\n\t\t\t\tb = parseInt(str.slice(4, 6), 16) / 255,\n\t\t\t\tMax = Math.max(r, g, b),\n\t\t\t\tMin = Math.min(r, g, b),\n\t\t\t\t// Lightness is the average of the highest and lowest values.\n\t\t\t\tl = (Max + Min) / 2,\n\t\t\t\tdelta = Max - Min;\n\n\t\t\tif (Max === Min) {\n\t\t\t\t// If all three RGB values are equal, it is a gray.\n\t\t\t\treturn {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: l\n\t\t\t\t};\n\t\t\t} // Calculate hue and saturation as follows.\n\n\t\t\tvar h;\n\n\t\t\tswitch (Max) {\n\t\t\t\tcase r:\n\t\t\t\t\th = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase g:\n\t\t\t\t\th = (b - r) / delta + 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase b:\n\t\t\t\t\th = (r - g) / delta + 4;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\th = Math.round(h * 60);\n\t\t\tvar s = l > 0.5 ? delta / (2 - Max - Min) : delta / (Max + Min);\n\t\t\treturn {\n\t\t\t\th: h,\n\t\t\t\ts: s,\n\t\t\t\tl: l\n\t\t\t};\n\t\t}\n\n\t\tcolour = colour.toLowerCase();\n\n\t\tif (+alpha === 0) {\n\t\t\treturn 'transparent';\n\t\t}\n\n\t\tif (+alpha < 1) {\n\t\t\tcolour = hexToHSL(colour);\n\t\t\treturn '(hsl:'\n\t\t\t\t.concat(fourDecimals(colour.h), ',')\n\t\t\t\t.concat(fourDecimals(colour.s), ',')\n\t\t\t\t.concat(fourDecimals(colour.l), ',')\n\t\t\t\t.concat(fourDecimals(alpha), ')');\n\t\t}\n\n\t\treturn colour in builtinColourNames\n\t\t\t? builtinColourNames[colour]\n\t\t\t: colour[1] === colour[2] &&\n\t\t\t  colour[3] === colour[4] &&\n\t\t\t  colour[5] === colour[6]\n\t\t\t? '#' + colour[1] + colour[3] + colour[5]\n\t\t\t: colour;\n\t}\n\n\tfunction toCSSColour(colour, alpha) {\n\t\tif (+alpha === 0) {\n\t\t\treturn 'transparent';\n\t\t}\n\n\t\tif (+alpha < 1) {\n\t\t\tcolour = colour.slice(1);\n\t\t\tvar r = parseInt(colour.slice(0, 2), 16),\n\t\t\t\tg = parseInt(colour.slice(2, 4), 16),\n\t\t\t\tb = parseInt(colour.slice(4, 6), 16);\n\t\t\treturn 'rgba('\n\t\t\t\t.concat(r, ',')\n\t\t\t\t.concat(g, ',')\n\t\t\t\t.concat(b, ',')\n\t\t\t\t.concat(alpha, ')');\n\t\t}\n\n\t\treturn colour;\n\t}\n\t/*\n  \tA crude element-creation function.\n  */\n\n\tvar P = document.createElement('p');\n\n\tfunction el(html) {\n\t\tP.innerHTML = html;\n\t\treturn P.firstChild;\n\t}\n\t/*\n  \tFeature detection.\n  */\n\n\tvar twine23 = !!document.querySelector('html[data-version^=\"2.3.\"]');\n\t/*\n  \tUsed for creating buttons with the correct TwineJS CSS class.\n  */\n\n\tvar buttonClass = function buttonClass(primary) {\n\t\treturn !twine23\n\t\t\t? 'icon-button variant-'.concat(primary ? 'primary' : 'secondary', ' ')\n\t\t\t: ' ';\n\t};\n\n\tvar Utils = {\n\t\tShortDefs: ShortDefs,\n\t\ttoHarloweColour: toHarloweColour,\n\t\ttoCSSColour: toCSSColour,\n\t\tGCD: GCD,\n\t\tfourDecimals: fourDecimals,\n\t\tel: el,\n\t\ttwine23: twine23,\n\t\tbuttonClass: buttonClass,\n\t\tbuiltinColourNames: builtinColourNames,\n\t\tfontIcon: fontIcon,\n\t\tinsensitiveName: insensitiveName\n\t}; // Loaded in TwineJS 2.3.\n\n\tif (this && this.loaded) {\n\t\tthis.modules || (this.modules = {});\n\t\tthis.modules.Utils = Utils;\n\t} // Loaded in HarloweDocs's preview pane or TwineJS 2.4.\n\telse {\n\t\tthis.Utils = Utils;\n\t}\n}.call(eval('this')));\n/*jshint strict:true*/\n\n(function () {\n\t'use strict';\n\n\tvar stringify = JSON.stringify;\n\tvar lex,\n\t\tPatterns,\n\t\tUtils = {},\n\t\tToolbarPanel = {}; // this.loaded implies TwineJS 2.3.\n\n\tif (this && this.loaded) {\n\t\tvar _this$modules = this.modules;\n\t\tlex = _this$modules.Markup.lex;\n\t\tPatterns = _this$modules.Patterns;\n\t\tUtils = _this$modules.Utils;\n\t} // This can't be loaded in HarloweDocs.\n\telse if (!this.window) {\n\t\tlex = this.Markup.lex;\n\t\tPatterns = this.Patterns;\n\t\tUtils = this.Utils;\n\t} else {\n\t\treturn;\n\t}\n\n\tvar _Utils = Utils,\n\t\ttwine23 = _Utils.twine23,\n\t\tbuiltinColourNames = _Utils.builtinColourNames,\n\t\tbuttonClass = _Utils.buttonClass,\n\t\ttoHarloweColour = _Utils.toHarloweColour,\n\t\ttoCSSColour = _Utils.toCSSColour,\n\t\tel = _Utils.el,\n\t\tfontIcon = _Utils.fontIcon;\n\tvar $ = 'querySelector';\n\tvar $$ = $ + 'All';\n\tvar ON = 'addEventListener';\n\tvar OFF = 'removeEventListener';\n\tvar openColors = [\n\t\t[\n\t\t\t'#f8f9fa',\n\t\t\t'#fff5f5',\n\t\t\t'#fff0f6',\n\t\t\t'#f8f0fc',\n\t\t\t'#f3f0ff',\n\t\t\t'#edf2ff',\n\t\t\t'#e7f5ff',\n\t\t\t'#e3fafc',\n\t\t\t'#e6fcf5',\n\t\t\t'#ebfbee',\n\t\t\t'#f4fce3',\n\t\t\t'#fff9db',\n\t\t\t'#fff4e6'\n\t\t],\n\t\t[\n\t\t\t'#f1f3f5',\n\t\t\t'#ffe3e3',\n\t\t\t'#ffdeeb',\n\t\t\t'#f3d9fa',\n\t\t\t'#e5dbff',\n\t\t\t'#dbe4ff',\n\t\t\t'#d0ebff',\n\t\t\t'#c5f6fa',\n\t\t\t'#c3fae8',\n\t\t\t'#d3f9d8',\n\t\t\t'#e9fac8',\n\t\t\t'#fff3bf',\n\t\t\t'#ffe8cc'\n\t\t],\n\t\t[\n\t\t\t'#e9ecef',\n\t\t\t'#ffc9c9',\n\t\t\t'#fcc2d7',\n\t\t\t'#eebefa',\n\t\t\t'#d0bfff',\n\t\t\t'#bac8ff',\n\t\t\t'#a5d8ff',\n\t\t\t'#99e9f2',\n\t\t\t'#96f2d7',\n\t\t\t'#b2f2bb',\n\t\t\t'#d8f5a2',\n\t\t\t'#ffec99',\n\t\t\t'#ffd8a8'\n\t\t],\n\t\t[\n\t\t\t'#dee2e6',\n\t\t\t'#ffa8a8',\n\t\t\t'#faa2c1',\n\t\t\t'#e599f7',\n\t\t\t'#b197fc',\n\t\t\t'#91a7ff',\n\t\t\t'#74c0fc',\n\t\t\t'#66d9e8',\n\t\t\t'#63e6be',\n\t\t\t'#8ce99a',\n\t\t\t'#c0eb75',\n\t\t\t'#ffe066',\n\t\t\t'#ffc078'\n\t\t],\n\t\t[\n\t\t\t'#ced4da',\n\t\t\t'#ff8787',\n\t\t\t'#f783ac',\n\t\t\t'#da77f2',\n\t\t\t'#9775fa',\n\t\t\t'#748ffc',\n\t\t\t'#4dabf7',\n\t\t\t'#3bc9db',\n\t\t\t'#38d9a9',\n\t\t\t'#69db7c',\n\t\t\t'#a9e34b',\n\t\t\t'#ffd43b',\n\t\t\t'#ffa94d'\n\t\t],\n\t\t[\n\t\t\t'#adb5bd',\n\t\t\t'#ff6b6b',\n\t\t\t'#f06595',\n\t\t\t'#cc5de8',\n\t\t\t'#845ef7',\n\t\t\t'#5c7cfa',\n\t\t\t'#339af0',\n\t\t\t'#22b8cf',\n\t\t\t'#20c997',\n\t\t\t'#51cf66',\n\t\t\t'#94d82d',\n\t\t\t'#fcc419',\n\t\t\t'#ff922b'\n\t\t],\n\t\t[\n\t\t\t'#868e96',\n\t\t\t'#fa5252',\n\t\t\t'#e64980',\n\t\t\t'#be4bdb',\n\t\t\t'#7950f2',\n\t\t\t'#4c6ef5',\n\t\t\t'#228be6',\n\t\t\t'#15aabf',\n\t\t\t'#12b886',\n\t\t\t'#40c057',\n\t\t\t'#82c91e',\n\t\t\t'#fab005',\n\t\t\t'#fd7e14'\n\t\t],\n\t\t[\n\t\t\t'#495057',\n\t\t\t'#f03e3e',\n\t\t\t'#d6336c',\n\t\t\t'#ae3ec9',\n\t\t\t'#7048e8',\n\t\t\t'#4263eb',\n\t\t\t'#1c7ed6',\n\t\t\t'#1098ad',\n\t\t\t'#0ca678',\n\t\t\t'#37b24d',\n\t\t\t'#74b816',\n\t\t\t'#f59f00',\n\t\t\t'#f76707'\n\t\t],\n\t\t[\n\t\t\t'#343a40',\n\t\t\t'#e03131',\n\t\t\t'#c2255c',\n\t\t\t'#9c36b5',\n\t\t\t'#6741d9',\n\t\t\t'#3b5bdb',\n\t\t\t'#1971c2',\n\t\t\t'#0c8599',\n\t\t\t'#099268',\n\t\t\t'#2f9e44',\n\t\t\t'#66a80f',\n\t\t\t'#f08c00',\n\t\t\t'#e8590c'\n\t\t],\n\t\t[\n\t\t\t'#212529',\n\t\t\t'#c92a2a',\n\t\t\t'#a61e4d',\n\t\t\t'#862e9c',\n\t\t\t'#5f3dc4',\n\t\t\t'#364fc7',\n\t\t\t'#1864ab',\n\t\t\t'#0b7285',\n\t\t\t'#087f5b',\n\t\t\t'#2b8a3e',\n\t\t\t'#5c940d',\n\t\t\t'#e67700',\n\t\t\t'#d9480f'\n\t\t]\n\t];\n\tvar disabledButtonCSS =\n\t\t'background:hsl(0,0%,50%,0.5);opacity:0.5;pointer-events:none';\n\t/*\\r\n  \tThis creates a dropdown selector that can be used to input most native Harlowe values.\\r\n  \n  \tmodelCallback is a callback to use instead of setting a value on the model in their model() methods.\\r\n  \tmodelRegistry is an alternative array to register the model() methods to, instead of the one for the parent panel.\\r\n  \tBoth of these are used entirely by datavalue-rows and datavalue-map, in order to suppress the usual behaviour of panel rows,\\r\n  \tand to be able to dynamically add and remove rows during use.\\r\n  \n  \tnoComplexValues prevents the UI from becoming too complicated by removing \"+ value\" entries when this is a nested row.\\r\n  */\n\n\tvar dataValueRow = function dataValueRow() {\n\t\tvar modelCallback =\n\t\t\targuments.length > 0 && arguments[0] !== undefined\n\t\t\t\t? arguments[0]\n\t\t\t\t: function (m, v) {\n\t\t\t\t\t\treturn (m.expression = v);\n\t\t\t\t  };\n\t\tvar modelRegistry =\n\t\t\targuments.length > 1 && arguments[1] !== undefined\n\t\t\t\t? arguments[1]\n\t\t\t\t: undefined;\n\t\tvar noComplexValues =\n\t\t\targuments.length > 2 && arguments[2] !== undefined\n\t\t\t\t? arguments[2]\n\t\t\t\t: undefined;\n\t\treturn {\n\t\t\ttype: 'inline-dropdown-rows',\n\t\t\ttext: 'Value: ',\n\t\t\tname: 'variable-datatype',\n\t\t\twidth: '16%',\n\t\t\toptions: [\n\t\t\t\t[\n\t\t\t\t\t'text string',\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-string-textarea',\n\t\t\t\t\t\twidth: '55%',\n\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\tplaceholder: 'Text',\n\t\t\t\t\t\tmodelCallback: modelCallback,\n\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'number',\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-number-textarea',\n\t\t\t\t\t\twidth: '20%',\n\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\tmodelCallback: modelCallback,\n\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'Boolean value',\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\toptions: ['false', 'true'],\n\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\tmodelCallback(m, '' + !!el[$]('select').value);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'colour',\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-colour',\n\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\tvalue: '#ffffff',\n\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\tvar c = el[$]('[type=color]').value,\n\t\t\t\t\t\t\t\ta = el[$]('[type=range]').value;\n\t\t\t\t\t\t\tmodelCallback(m, toHarloweColour(c, a));\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'array',\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'datavalue-rows',\n\t\t\t\t\t\ttext:\n\t\t\t\t\t\t\t\"<div class='harlowe-3-datavalueRowHint'>An <b>array</b> is a sequence of ordered datavalues that can be used without having to create separate variables for each. \" +\n\t\t\t\t\t\t\t'Use it to store similar values whose order and position matter, or to store an ever-changing quantity of similar values.</div>',\n\n\t\t\t\t\t\t/*\\r\n        \tAs a slightly unfortunate kludge, \"datavalue-rows\" and \"datavalue-map\" models do not have an el as their\\r\n        \tsecond argument, but instead an array of precomputed values created by the model() methods\\r\n        \tof each datavalue row.\\r\n        */\n\t\t\t\t\t\tmodel: function model(m, rowValues) {\n\t\t\t\t\t\t\tmodelCallback(m, '(a:' + rowValues + ')');\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t/*\\r\n        \tThis is a special method for datavalue-rows that displays numbers (usually array indices) for each subvalue's line.\\r\n        */\n\t\t\t\t\t\trenumber: function renumber(label, num) {\n\t\t\t\t\t\t\tnum += 1;\n\t\t\t\t\t\t\tvar lastDigit = (num + '').slice(-1);\n\t\t\t\t\t\t\tlabel.textContent =\n\t\t\t\t\t\t\t\tnum +\n\t\t\t\t\t\t\t\t(lastDigit === '1'\n\t\t\t\t\t\t\t\t\t? 'st'\n\t\t\t\t\t\t\t\t\t: lastDigit === '2'\n\t\t\t\t\t\t\t\t\t? 'nd'\n\t\t\t\t\t\t\t\t\t: lastDigit === '3'\n\t\t\t\t\t\t\t\t\t? 'rd'\n\t\t\t\t\t\t\t\t\t: 'th') +\n\t\t\t\t\t\t\t\t': ';\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'datamap',\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'datavalue-map',\n\t\t\t\t\t\ttext:\n\t\t\t\t\t\t\t'<div class=\\'harlowe-3-datavalueRowHint\\'>A <b>datamap</b> is a value that holds any number of other values, each of which is \"mapped\" to a unique name. ' +\n\t\t\t\t\t\t\t'Use it to store data values that represent parts of a larger game entity, or rows of a table.</div>',\n\t\t\t\t\t\tmodel: function model(m, rowValues) {\n\t\t\t\t\t\t\t/*\\r\n          \tUnlike arrays, datamaps have a constraint on their data names: they must not be empty.\\r\n          */\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!rowValues.every(function (e, i) {\n\t\t\t\t\t\t\t\t\treturn i % 2 !== 0 || (e !== '\"\"' && e !== \"''\");\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t// Any panel that consumes dataValueRow() should invalidate the model if this is true.\n\t\t\t\t\t\t\t\tm.invalidSubrow = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodelCallback(m, '(dm:' + rowValues + ')');\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t/*\\r\n        \tDatamaps don't have sequential name labels, instead having just a colon.\\r\n        */\n\t\t\t\t\t\trenumber: function renumber(label) {\n\t\t\t\t\t\t\tlabel.textContent = ':';\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[],\n\t\t\t\t[\n\t\t\t\t\t'randomly chosen value',\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'datavalue-rows',\n\t\t\t\t\t\ttext: \"<div class='harlowe-3-datavalueRowHint'>One of the following values is randomly chosen <b>each time the macro is run</b>.</div>\",\n\t\t\t\t\t\tmodel: function model(m, rowValues) {\n\t\t\t\t\t\t\tif (!rowValues.length) {\n\t\t\t\t\t\t\t\tm.invalidSubrow = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodelCallback(m, '(either:' + rowValues + ')');\n\t\t\t\t\t\t},\n\t\t\t\t\t\trenumber: function renumber(label) {\n\t\t\t\t\t\t\tlabel.textContent = '•';\n\t\t\t\t\t\t\tlabel.style.marginRight = '0.5em';\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'random number',\n\t\t\t\t\tel(\n\t\t\t\t\t\t\"<div class='harlowe-3-datavalueRowHint'>A number between these two values is randomly chosen <b>each time the macro is run</b>.</div>\"\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-number-textarea',\n\t\t\t\t\t\twidth: '20%',\n\t\t\t\t\t\ttext: 'From',\n\t\t\t\t\t\tmodel: function model() {},\n\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-number-textarea',\n\t\t\t\t\t\twidth: '20%',\n\t\t\t\t\t\ttext: 'to',\n\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\tmodelCallback(\n\t\t\t\t\t\t\t\tm,\n\t\t\t\t\t\t\t\t'(random:' +\n\t\t\t\t\t\t\t\t\t(+elem.previousElementSibling[$]('input').value || 0) +\n\t\t\t\t\t\t\t\t\t',' +\n\t\t\t\t\t\t\t\t\t(+elem[$]('input').value || 0) +\n\t\t\t\t\t\t\t\t\t')'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t\t\t.concat(\n\t\t\t\t\tnoComplexValues\n\t\t\t\t\t\t? []\n\t\t\t\t\t\t: [\n\t\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t'itself + value',\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'datavalue-inner',\n\t\t\t\t\t\t\t\t\t\ttext: \"<div class='harlowe-3-datavalueRowHint'>The following value is added to the existing value in the variable. NOTE: if the values aren't the same type of data, an error will result.</div>\",\n\t\t\t\t\t\t\t\t\t\tmodel: function model(m, rowValues) {\n\t\t\t\t\t\t\t\t\t\t\tif (rowValues.length !== 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tm.invalidSubrow = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tmodelCallback(m, 'it + ' + rowValues);\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\trenumber: function renumber(label) {\n\t\t\t\t\t\t\t\t\t\t\t(label || {}).textContent = 'it + ';\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t'variable + value',\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\t\t\t\t\ttext: ' Other variable: ',\n\t\t\t\t\t\t\t\t\t\toptions: ['$', '_'],\n\t\t\t\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\t\t\t\t/*\\r\n          \tBecause variable + value rows cannot be nested or included in datavalue-rows, \\r\n          */\n\t\t\t\t\t\t\t\t\t\t\tm.innerVariable = elem[$]('select').value ? '_' : '$';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\t\t\t\t\twidth: '25%',\n\t\t\t\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\t\t\t\tplaceholder: 'Variable name',\n\t\t\t\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\t\t\t\tvar v = elem[$]('input').value;\n\n\t\t\t\t\t\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tRegExp('^' + Patterns.validPropertyName + '$').exec(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tv\n\t\t\t\t\t\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t!RegExp(/^\\d/).exec(v)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tm.innerVariable += v;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'datavalue-inner',\n\t\t\t\t\t\t\t\t\t\ttext: \"<div class='harlowe-3-datavalueRowHint'>The above variable's value and the value below are added together. NOTE: if the values aren't the same type of data, an error will result.</div>\",\n\t\t\t\t\t\t\t\t\t\tmodel: function model(m, rowValues) {\n\t\t\t\t\t\t\t\t\t\t\tif (rowValues.length !== 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tm.invalidSubrow = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tmodelCallback(m, m.innerVariable + ' + ' + rowValues);\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\trenumber: function renumber(label) {\n\t\t\t\t\t\t\t\t\t\t\t(label || {}).textContent = '';\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t  ]\n\t\t\t\t)\n\t\t\t\t.concat([\n\t\t\t\t\t[],\n\t\t\t\t\t[\n\t\t\t\t\t\t'coded expression',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'expression-textarea',\n\t\t\t\t\t\t\twidth: '90%',\n\t\t\t\t\t\t\ttext: '<div>Write a Harlowe code expression that should be computed to produce the desired value.</div>',\n\t\t\t\t\t\t\tplaceholder: 'Code',\n\t\t\t\t\t\t\tmodelCallback: modelCallback,\n\t\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t])\n\t\t};\n\t};\n\t/*\\r\n  \tThe constructor for the folddownPanels. This accepts a number of panel rows (as an array of row-describing objects)\\r\n  \tand returns a <div> with the compiled UI elements.\\r\n  \n  \tEach row object typically has the following:\\r\n  \t- update: A function taking the entire panel element, and performing actions whenever this element's value is altered.\\r\n  \t- name: User-facing display name of this element.\\r\n  \t- type: Which type of UI element to create for it.\\r\n  \n  \tNote: panel creation is deferred until first access - hence, this returns a zero-arity function.\\r\n  */\n\n\tvar folddownPanel = function folddownPanel() {\n\t\tfor (\n\t\t\tvar _len = arguments.length, panelRows = new Array(_len), _key = 0;\n\t\t\t_key < _len;\n\t\t\t_key++\n\t\t) {\n\t\t\tpanelRows[_key] = arguments[_key];\n\t\t}\n\n\t\treturn function () {\n\t\t\tif (!panelRows.length) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t/*\\r\n      \tThe MVC-style flow of element states into data, and back, is crudely performed here.\\r\n      \tElements can register \"model\" and \"updater\" functions. Model functions take a model object\\r\n      \t(seen in the reduce() call below) and permute it with the element's data. Update functions\\r\n      \ttake the completed model object and permutes the element using it.\\r\n      \tGenerally, each element has an addEventListener call in its implementation (below) which\\r\n      \tcauses them to call update() whenever they're interacted with.\\r\n      */\n\n\t\t\tvar modelFns = [],\n\t\t\t\tupdaterFns = [];\n\n\t\t\tfunction output() {\n\t\t\t\treturn Object.entries(this.changers)\n\t\t\t\t\t.map(function (_ref) {\n\t\t\t\t\t\tvar _ref2 = _slicedToArray(_ref, 2),\n\t\t\t\t\t\t\tk = _ref2[0],\n\t\t\t\t\t\t\tv = _ref2[1];\n\n\t\t\t\t\t\treturn '('.concat(k, ':').concat(v.join(','), ')');\n\t\t\t\t\t})\n\t\t\t\t\t.join('+');\n\t\t\t}\n\n\t\t\tfunction changerNamed(name) {\n\t\t\t\treturn this.changers[name] || (this.changers[name] = []);\n\t\t\t}\n\n\t\t\tvar model = function model(initiator) {\n\t\t\t\treturn modelFns.reduce(\n\t\t\t\t\tfunction (m, fn) {\n\t\t\t\t\t\treturn fn(m) || m;\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tchangers: {},\n\t\t\t\t\t\twrapStart: '[',\n\t\t\t\t\t\twrapEnd: ']',\n\t\t\t\t\t\twrapStringify: false,\n\t\t\t\t\t\tinnerText: undefined,\n\t\t\t\t\t\t// If the model is declared valid, then code can be produced using the panel as it currently is.\n\t\t\t\t\t\tvalid: false,\n\t\t\t\t\t\toutput: output,\n\t\t\t\t\t\tchangerNamed: changerNamed,\n\t\t\t\t\t\tinitiator: initiator\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t};\n\n\t\t\tfunction update() {\n\t\t\t\tvar _ref3 =\n\t\t\t\t\t\targuments.length > 0 && arguments[0] !== undefined\n\t\t\t\t\t\t\t? arguments[0]\n\t\t\t\t\t\t\t: {},\n\t\t\t\t\ttarget = _ref3.target;\n\n\t\t\t\tvar m = model(target);\n\t\t\t\tupdaterFns.forEach(function (fn) {\n\t\t\t\t\treturn fn(m);\n\t\t\t\t});\n\t\t\t}\n\t\t\t/*\\r\n      \tSince this is defined after update(), storing update() on it later should not cause a circular reference.\\r\n      */\n\n\t\t\tvar panelElem = el(\n\t\t\t\t'<div class=\"harlowe-3-toolbarPanel'.concat(\n\t\t\t\t\t!twine23 ? ' card floating' : '',\n\t\t\t\t\t'\" style=\"transition:max-height 0.8s;overflow-y:auto\">'\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tvar makeColourPicker = function makeColourPicker(value) {\n\t\t\t\tvar makeSwatchRow = function makeSwatchRow(colours, index, visible) {\n\t\t\t\t\treturn el(\n\t\t\t\t\t\t'<span class=harlowe-3-swatchRow data-index=\"'\n\t\t\t\t\t\t\t.concat(index, '\" ')\n\t\t\t\t\t\t\t.concat(!visible ? 'style=\"display:none\"' : '', '>') +\n\t\t\t\t\t\t\tcolours\n\t\t\t\t\t\t\t\t.map(function (colour) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t'<span class=harlowe-3-swatch style=\"background-color:' +\n\t\t\t\t\t\t\t\t\t\tcolour +\n\t\t\t\t\t\t\t\t\t\t'\"></span>'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('') +\n\t\t\t\t\t\t\t'</span>'\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tvar ret = el(\n\t\t\t\t\t'<div class=harlowe-3-singleColourPicker><input style=\"width:48px;margin-right:8px\" type=color value=\"' +\n\t\t\t\t\t\tvalue +\n\t\t\t\t\t\t'\"></div>'\n\t\t\t\t);\n\t\t\t\tvar swatchSelectWrapper = el(\n\t\t\t\t\t'<span class=\"text-select-control\"><select '.concat(\n\t\t\t\t\t\t!twine23 ? 'style=\"max-width: 9em;\"' : '',\n\t\t\t\t\t\t'><option value=\"\" selected>Harlowe built-ins</option></select></span>'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tvar swatchSelect = swatchSelectWrapper[$]('select');\n\t\t\t\tret.append(makeSwatchRow(Object.keys(builtinColourNames), '', true));\n\t\t\t\topenColors.forEach(function (row, i) {\n\t\t\t\t\tret.append(makeSwatchRow(row, i));\n\t\t\t\t\tswatchSelect.append(\n\t\t\t\t\t\tel('<option value='.concat(i, '>OpenColor ').concat(i, '</option>'))\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tswatchSelect[ON]('change', function () {\n\t\t\t\t\tret[$$]('[data-index]').forEach(function (ind) {\n\t\t\t\t\t\treturn (ind.style.display = 'none');\n\t\t\t\t\t});\n\t\t\t\t\tret[$](\n\t\t\t\t\t\t'[data-index=\"'.concat(swatchSelect.value, '\"]')\n\t\t\t\t\t).style.display = 'inline-block';\n\t\t\t\t});\n\t\t\t\tret.append(\n\t\t\t\t\tswatchSelectWrapper,\n\t\t\t\t\tel('<br>'),\n\t\t\t\t\tnew Text('Opacity: '),\n\t\t\t\t\tel(\n\t\t\t\t\t\t'<input type=range style=\"width:64px;top:8px;position:relative\" value=1 min=0 max=1 step=0.05>'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tret[ON]('click', function (_ref4) {\n\t\t\t\t\tvar target = _ref4.target;\n\n\t\t\t\t\tif (target.classList.contains('harlowe-3-swatch')) {\n\t\t\t\t\t\tvar input = ret[$]('input');\n\t\t\t\t\t\tinput.value = target.getAttribute('style').slice(-7);\n\t\t\t\t\t\tinput.dispatchEvent(new Event('change'));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn ret;\n\t\t\t};\n\t\t\t/*\\r\n      \tTurn each panel row description into a panel element. Notice that this reducer function\\r\n      \tcan be recursively called, with a different element in accumulator position; this is\\r\n      \tused by radiorows to add its sub-elements.\\r\n      */\n\n\t\t\tvar ret = panelRows.reduce(function reducer(panelElem, row) {\n\t\t\t\tvar ret,\n\t\t\t\t\tinline,\n\t\t\t\t\ttype = '';\n\t\t\t\tvar nested = panelElem.tagName.toLowerCase() === 'label';\n\n\t\t\t\tif (Object.getPrototypeOf(row) !== Object.prototype) {\n\t\t\t\t\tret = row;\n\t\t\t\t} else {\n\t\t\t\t\ttype = row.type;\n\t\t\t\t\tinline = type.startsWith('inline');\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tThese are non-interactive messages.\\r\n        */\n\n\t\t\t\tif (type.endsWith('text')) {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<' +\n\t\t\t\t\t\t\t(inline ? 'span' : 'div') +\n\t\t\t\t\t\t\t'>' +\n\t\t\t\t\t\t\trow.text +\n\t\t\t\t\t\t\t'</' +\n\t\t\t\t\t\t\t(inline ? 'span' : 'div') +\n\t\t\t\t\t\t\t'>'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'notice') {\n\t\t\t\t\tret = el('<small style=\"display:block\">' + row.text + '</small>');\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tUsed only for the default panel and the Find panel.\\r\n        */\n\n\t\t\t\tif (type === 'buttons') {\n\t\t\t\t\tpanelElem.append.apply(\n\t\t\t\t\t\tpanelElem,\n\t\t\t\t\t\t_toConsumableArray(\n\t\t\t\t\t\t\trow.buttons.map(function (button) {\n\t\t\t\t\t\t\t\tif ('tagName' in button) {\n\t\t\t\t\t\t\t\t\treturn button;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar elem = el(\n\t\t\t\t\t\t\t\t\t'<button title=\"'\n\t\t\t\t\t\t\t\t\t\t.concat(button.title, '\" class=\"')\n\t\t\t\t\t\t\t\t\t\t.concat(buttonClass())\n\t\t\t\t\t\t\t\t\t\t.concat(button.active ? ' active' : '', '\">')\n\t\t\t\t\t\t\t\t\t\t.concat(button.html, '</button>')\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbutton.onClick && elem[ON]('click', button.onClick);\n\t\t\t\t\t\t\t\treturn elem;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tThe (text-style:) preview panel.\\r\n        */\n\n\t\t\t\tif (type.endsWith('preview')) {\n\t\t\t\t\tvar tagName = row.tagName || 'span';\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<div class=\"harlowe-3-stylePreview\" style=\"'\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\ttype.startsWith('t8n') ? 'cursor:pointer;height: 2.6rem;' : '',\n\t\t\t\t\t\t\t\t'\" '\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\ttype.startsWith('t8n')\n\t\t\t\t\t\t\t\t\t? 'alt=\"Click to preview the transition\"'\n\t\t\t\t\t\t\t\t\t: '',\n\t\t\t\t\t\t\t\t'><'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(tagName, '>')\n\t\t\t\t\t\t\t.concat(row.text || '', '</')\n\t\t\t\t\t\t\t.concat(tagName, '>')\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\ttype.startsWith('t8n')\n\t\t\t\t\t\t\t\t\t? '<'.concat(tagName, '>') +\n\t\t\t\t\t\t\t\t\t\t\trow.text2 +\n\t\t\t\t\t\t\t\t\t\t\t'</'.concat(tagName, '>')\n\t\t\t\t\t\t\t\t\t: '',\n\t\t\t\t\t\t\t\t'</div>'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tif (type.startsWith('t8n')) {\n\t\t\t\t\t\tret[ON]('mouseup', update);\n\t\t\t\t\t\tret[ON]('touchend', update);\n\t\t\t\t\t\tvar firstSpan = ret[$](':first-child');\n\t\t\t\t\t\tfirstSpan[ON]('animationend', function () {\n\t\t\t\t\t\t\treturn (firstSpan.style.visibility = 'hidden');\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tCheckboxes and radio buttons.\\r\n        */\n\n\t\t\t\tif (type.endsWith('checkbox') || type.endsWith('checkboxrow')) {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<label'\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\tinline ? '' : ' style=\"display:block\"',\n\t\t\t\t\t\t\t\t' class=\"harlowe-3-checkboxRow\"><input type=\"checkbox\"></input>'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(row.text, '</label>')\n\t\t\t\t\t);\n\n\t\t\t\t\tif (type.endsWith('w')) {\n\t\t\t\t\t\trow.subrow.reduce(reducer, ret);\n\t\t\t\t\t\trow.subrow.forEach(function (r) {\n\t\t\t\t\t\t\tvar model = r.model;\n\n\t\t\t\t\t\t\tr.model = function (m, el) {\n\t\t\t\t\t\t\t\treturn ret[$](':scope > input:checked') &&\n\t\t\t\t\t\t\t\t\t/*\\r\n                \tDon't run the subrow's model unless the parent row's radio button is checked.\\r\n                */\n\t\t\t\t\t\t\t\t\t(!nested || panelElem[$](':scope > input:checked'))\n\t\t\t\t\t\t\t\t\t? model(m, el)\n\t\t\t\t\t\t\t\t\t: m;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tret[ON]('change', update);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'checkboxes') {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<div class=\"harlowe-3-toolbarCheckboxes\"><div'\n\t\t\t\t\t\t\t.concat(row.bold ? ' style=\"font-weight:bold\"' : '', '>')\n\t\t\t\t\t\t\t.concat(row.name, '</div></div>')\n\t\t\t\t\t);\n\t\t\t\t\trow.options.forEach(function (box) {\n\t\t\t\t\t\tvar e = el(\n\t\t\t\t\t\t\t'<label'\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\trow.capitalise ? ' style=\"text-transform:capitalize;\"' : '',\n\t\t\t\t\t\t\t\t\t' class=\"'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.concat(buttonClass(), '\"><input type=\"checkbox\"></input>')\n\t\t\t\t\t\t\t\t.concat(box, '</label>')\n\t\t\t\t\t\t);\n\t\t\t\t\t\te[ON]('change', update);\n\t\t\t\t\t\tret.append(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (type === 'radios') {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<div class=\"harlowe-3-toolbarCheckboxes\"><div'\n\t\t\t\t\t\t\t.concat(row.bold ? ' style=\"font-weight:bold\"' : '', '>')\n\t\t\t\t\t\t\t.concat(row.name, '</div></div>')\n\t\t\t\t\t);\n\t\t\t\t\trow.options.forEach(function (radio, i) {\n\t\t\t\t\t\tvar e = el(\n\t\t\t\t\t\t\t'<label'\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\trow.capitalise ? ' style=\"text-transform:capitalize;\"' : '',\n\t\t\t\t\t\t\t\t\t' class=\"'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.concat(buttonClass(), '\"><input type=\"radio\" name=\"')\n\t\t\t\t\t\t\t\t.concat(row.name, '\" value=\"')\n\t\t\t\t\t\t\t\t.concat(radio, '\" ')\n\t\t\t\t\t\t\t\t.concat(!i ? 'checked' : '', '></input>')\n\t\t\t\t\t\t\t\t.concat(radio, '</label>')\n\t\t\t\t\t\t);\n\t\t\t\t\t\te[ON]('change', update);\n\t\t\t\t\t\tret.append(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tText areas, single lines in which text can be entered.\\r\n        */\n\n\t\t\t\tif (type.endsWith('textarea')) {\n\t\t\t\t\tvar inputType = 'text';\n\n\t\t\t\t\tvar _tagName = row.multiline ? 'textarea' : 'input';\n\t\t\t\t\t/*\\r\n          \tFull Harlowe expressions.\\r\n          */\n\n\t\t\t\t\tif (type.endsWith('expression-textarea')) {\n\t\t\t\t\t\t/*\\r\n            \tThese have special update and model routines.\\r\n            */\n\t\t\t\t\t\trow.update = function (m, elem) {\n\t\t\t\t\t\t\tif (!m.expression && elem[$](_tagName).value) {\n\t\t\t\t\t\t\t\telem.setAttribute(\n\t\t\t\t\t\t\t\t\t'invalid',\n\t\t\t\t\t\t\t\t\t\"This doesn't seem to be valid code.\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\telem.removeAttribute('invalid');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\trow.model = function (m, elem) {\n\t\t\t\t\t\t\tvar v = (elem[$](_tagName).value || '').trim();\n\n\t\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\t\t/*\\r\n                \tAttempt to lex the data, and consider it invalid if it contains any text nodes.\\r\n                */\n\t\t\t\t\t\t\t\tvar lexed = lex(v, '', 'macro');\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tlexed.children.every(function recur(token) {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\ttoken.type !== 'text' &&\n\t\t\t\t\t\t\t\t\t\t\ttoken.type !== 'error' &&\n\t\t\t\t\t\t\t\t\t\t\t(token.type === 'string' ||\n\t\t\t\t\t\t\t\t\t\t\t\ttoken.type === 'hook' ||\n\t\t\t\t\t\t\t\t\t\t\t\ttoken.children.every(recur))\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\trow.modelCallback(m, v);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t/*\\r\n          \tString-type textarea\\r\n          */\n\n\t\t\t\t\tif (type.endsWith('string-textarea')) {\n\t\t\t\t\t\trow.model ||\n\t\t\t\t\t\t\t(row.model = function (m, elem) {\n\t\t\t\t\t\t\t\trow.modelCallback(\n\t\t\t\t\t\t\t\t\tm,\n\t\t\t\t\t\t\t\t\tJSON.stringify(elem[$](_tagName).value || '')\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (type.endsWith('number-textarea')) {\n\t\t\t\t\t\tinputType = 'number';\n\t\t\t\t\t\trow.model ||\n\t\t\t\t\t\t\t(row.model = function (m, elem) {\n\t\t\t\t\t\t\t\trow.modelCallback(m, +elem[$](_tagName).value || 0);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<'\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\tinline ? 'span' : 'div',\n\t\t\t\t\t\t\t\t' class=\"harlowe-3-labeledInput\">'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(row.text, '<')\n\t\t\t\t\t\t\t.concat(_tagName, ' ')\n\t\t\t\t\t\t\t.concat(row.useSelection ? 'data-use-selection' : '')\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\ttype.includes('passage') ? 'list=\"harlowe-3-passages\"' : '',\n\t\t\t\t\t\t\t\t' style=\"width:'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(row.width, ';padding:var(--grid-size);margin')\n\t\t\t\t\t\t\t.concat(inline ? ':0 0.5rem' : '-left:1rem', ';')\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\trow.multiline && inline\n\t\t\t\t\t\t\t\t\t? 'display:inline-block;height:40px'\n\t\t\t\t\t\t\t\t\t: '',\n\t\t\t\t\t\t\t\t'\" type='\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(inputType, ' placeholder=\"')\n\t\t\t\t\t\t\t.concat(row.placeholder || '', '\"></')\n\t\t\t\t\t\t\t.concat(_tagName, '></')\n\t\t\t\t\t\t\t.concat(inline ? 'span' : 'div', '>')\n\t\t\t\t\t);\n\t\t\t\t\tret[$](_tagName)[ON]('input', update);\n\t\t\t\t}\n\n\t\t\t\tif (type.endsWith('number') || type.endsWith('range')) {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<' +\n\t\t\t\t\t\t\t(inline ? 'span' : 'div') +\n\t\t\t\t\t\t\t' class=\"harlowe-3-labeledInput\">' +\n\t\t\t\t\t\t\trow.text +\n\t\t\t\t\t\t\t'<input style=\"padding:var(--grid-size)\" type=' +\n\t\t\t\t\t\t\t(type.endsWith('range') ? 'range' : 'number') +\n\t\t\t\t\t\t\t' min=' +\n\t\t\t\t\t\t\trow.min +\n\t\t\t\t\t\t\t' max=' +\n\t\t\t\t\t\t\trow.max +\n\t\t\t\t\t\t\t' value=' +\n\t\t\t\t\t\t\trow.value +\n\t\t\t\t\t\t\t(row.step ? ' step=' + row.step : '') +\n\t\t\t\t\t\t\t'></input></' +\n\t\t\t\t\t\t\t(inline ? 'span' : 'div') +\n\t\t\t\t\t\t\t'>'\n\t\t\t\t\t);\n\t\t\t\t\tret[$]('input')[ON]('change', update);\n\t\t\t\t}\n\n\t\t\t\tif (type.endsWith('colour')) {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<' +\n\t\t\t\t\t\t\t(inline ? 'span' : 'div') +\n\t\t\t\t\t\t\t' class=\"harlowe-3-labeledInput\">' +\n\t\t\t\t\t\t\trow.text +\n\t\t\t\t\t\t\t'</' +\n\t\t\t\t\t\t\t(inline ? 'span' : 'div') +\n\t\t\t\t\t\t\t'>'\n\t\t\t\t\t);\n\t\t\t\t\tvar picker = makeColourPicker(row.value);\n\t\t\t\t\tret.append(picker);\n\t\t\t\t\tret[$$]('input').forEach(function (input) {\n\t\t\t\t\t\treturn input[ON]('change', update);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (type.endsWith('gradient')) {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t\"<div style='position:relative'><span class=harlowe-3-gradientBar></span><button class=\\\"\"\n\t\t\t\t\t\t\t.concat(buttonClass(), '\">')\n\t\t\t\t\t\t\t.concat(fontIcon('plus'), ' Colour</button></div>')\n\t\t\t\t\t);\n\t\t\t\t\tvar gradientBar = ret[$]('.harlowe-3-gradientBar');\n\n\t\t\t\t\tvar createColourStop = function createColourStop(\n\t\t\t\t\t\tpercent,\n\t\t\t\t\t\tcolour,\n\t\t\t\t\t\tselected\n\t\t\t\t\t) {\n\t\t\t\t\t\tvar ret = el(\n\t\t\t\t\t\t\t'<div '\n\t\t\t\t\t\t\t\t.concat(selected ? 'selected' : '', ' data-colour=\"')\n\t\t\t\t\t\t\t\t.concat(colour, '\" data-pos=\"')\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\tpercent,\n\t\t\t\t\t\t\t\t\t'\" class=harlowe-3-colourStop style=\"left:calc('\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\tpercent * 100,\n\t\t\t\t\t\t\t\t\t'% - 8px); top:-8px\"><div class=harlowe-3-colourStopButtons style=\"left:'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t-(twine23 ? 464 : 384) * percent - (twine23 ? 0 : 40),\n\t\t\t\t\t\t\t\t\t'px\">'\n\t\t\t\t\t\t\t\t) + '</div></div>'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvar picker = makeColourPicker(colour);\n\t\t\t\t\t\tpicker[$$]('input').forEach(function (input) {\n\t\t\t\t\t\t\treturn input[ON]('change', function () {\n\t\t\t\t\t\t\t\tvar alpha = picker[$]('[type=range]').value;\n\t\t\t\t\t\t\t\tvar colour = picker[$]('[type=color]').value;\n\t\t\t\t\t\t\t\tret.setAttribute('data-colour', toCSSColour(colour, alpha));\n\n\t\t\t\t\t\t\t\tif (alpha < 1) {\n\t\t\t\t\t\t\t\t\tret.setAttribute(\n\t\t\t\t\t\t\t\t\t\t'data-harlowe-colour',\n\t\t\t\t\t\t\t\t\t\ttoHarloweColour(colour, alpha)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar deleteButton = el(\n\t\t\t\t\t\t\t'<button class=\"'\n\t\t\t\t\t\t\t\t.concat(buttonClass(), \"\\\" style='float:right'>\")\n\t\t\t\t\t\t\t\t.concat(fontIcon('times'), ' Delete</button>')\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdeleteButton[ON]('click', function () {\n\t\t\t\t\t\t\tret.remove();\n\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tpicker.append(deleteButton);\n\t\t\t\t\t\tret.firstChild.prepend(picker);\n\t\t\t\t\t\tgradientBar.append(ret);\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t};\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tcreateColourStop(0, '#ffffff');\n\t\t\t\t\t\tcreateColourStop(0.5, '#000000', true);\n\t\t\t\t\t\tcreateColourStop(1, '#ffffff');\n\t\t\t\t\t});\n\t\t\t\t\tret[$]('button')[ON]('click', function () {\n\t\t\t\t\t\treturn createColourStop(0.5, '#888888');\n\t\t\t\t\t});\n\n\t\t\t\t\tvar listener = function listener(_ref5) {\n\t\t\t\t\t\tvar target = _ref5.target;\n\n\t\t\t\t\t\tif (target.classList.contains('harlowe-3-colourStop')) {\n\t\t\t\t\t\t\tvar html = document.documentElement;\n\n\t\t\t\t\t\t\tvar _gradientBar$getBound = gradientBar.getBoundingClientRect(),\n\t\t\t\t\t\t\t\tleft = _gradientBar$getBound.left,\n\t\t\t\t\t\t\t\tright = _gradientBar$getBound.right;\n\n\t\t\t\t\t\t\tvar width = right - left;\n\n\t\t\t\t\t\t\tvar onMouseMove = function onMouseMove(_ref6) {\n\t\t\t\t\t\t\t\tvar pageX = _ref6.pageX,\n\t\t\t\t\t\t\t\t\ttouches = _ref6.touches;\n\t\t\t\t\t\t\t\tpageX = pageX || (touches && touches[0].pageX);\n\n\t\t\t\t\t\t\t\tif (pageX === undefined) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar pos = Math.min(\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\tMath.max(0, (pageX - window.scrollX - left) / width)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\ttarget.style.left = 'calc('.concat(pos * 100, '% - 8px)');\n\t\t\t\t\t\t\t\t/*\\r\n                \tReposition the colour stop's button bar so that it's always entirely visible.\\r\n                */\n\n\t\t\t\t\t\t\t\ttarget.firstChild.style.left = ''.concat(\n\t\t\t\t\t\t\t\t\t-(twine23 ? 464 : 384) * pos - (twine23 ? 0 : 40),\n\t\t\t\t\t\t\t\t\t'px'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\ttarget.setAttribute('data-pos', pos);\n\t\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tvar onMouseUp = function onMouseUp() {\n\t\t\t\t\t\t\t\thtml[OFF]('mousemove', onMouseMove);\n\t\t\t\t\t\t\t\thtml[OFF]('mouseup', onMouseUp);\n\t\t\t\t\t\t\t\thtml[OFF]('touchmove', onMouseMove);\n\t\t\t\t\t\t\t\thtml[OFF]('touchend', onMouseUp);\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\thtml[ON]('mousemove', onMouseMove);\n\t\t\t\t\t\t\thtml[ON]('mouseup', onMouseUp);\n\t\t\t\t\t\t\thtml[ON]('touchmove', onMouseMove);\n\t\t\t\t\t\t\thtml[ON]('touchend', onMouseUp);\n\t\t\t\t\t\t\t/*\\r\n              \tAdditionally, when a stop is clicked, deselect all other stops and select this one,\\r\n              \tcausing its menu to appear.\\r\n              */\n\n\t\t\t\t\t\t\tArray.from(gradientBar[$$]('[selected]')).forEach(function (s) {\n\t\t\t\t\t\t\t\treturn s.removeAttribute('selected');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\ttarget.setAttribute('selected', true);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tret[ON]('mousedown', listener);\n\t\t\t\t\tret[ON]('touchstart', listener);\n\t\t\t\t\tupdaterFns.push(function () {\n\t\t\t\t\t\tgradientBar.style.background = 'linear-gradient(to right, '.concat(\n\t\t\t\t\t\t\tArray.from(gradientBar[$$]('.harlowe-3-colourStop'))\n\t\t\t\t\t\t\t\t.sort(function (a, b) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\ta.getAttribute('data-pos') - b.getAttribute('data-pos')\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.map(function (stop) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\tstop.getAttribute('data-colour') +\n\t\t\t\t\t\t\t\t\t\t' ' +\n\t\t\t\t\t\t\t\t\t\tstop.getAttribute('data-pos') * 100 +\n\t\t\t\t\t\t\t\t\t\t'%'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t')'\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tDropdowns.\\r\n        */\n\n\t\t\t\tif (type.endsWith('dropdown')) {\n\t\t\t\t\tvar dropdownDiv = el(\n\t\t\t\t\t\t'<' +\n\t\t\t\t\t\t\t(inline ? 'span' : 'div') +\n\t\t\t\t\t\t\t' style=\"white-space:nowrap;' +\n\t\t\t\t\t\t\t(inline ? '' : 'width:50%;') +\n\t\t\t\t\t\t\t'position:relative;\">' +\n\t\t\t\t\t\t\trow.text +\n\t\t\t\t\t\t\t'<span class=\"text-select-control\"><select style=\"' +\n\t\t\t\t\t\t\t(inline ? 'margin:0.5rem;' : 'margin-left:1rem;') +\n\t\t\t\t\t\t\t'font-size:0.9rem;margin-top:4px\"></select></span></' +\n\t\t\t\t\t\t\t(inline ? 'span' : 'div') +\n\t\t\t\t\t\t\t'>'\n\t\t\t\t\t);\n\t\t\t\t\trow.options.forEach(function (option, i) {\n\t\t\t\t\t\tdropdownDiv[$]('select').append(\n\t\t\t\t\t\t\tel(\n\t\t\t\t\t\t\t\t'<option value=\"' +\n\t\t\t\t\t\t\t\t\t(!i ? '' : option) +\n\t\t\t\t\t\t\t\t\t'\"' +\n\t\t\t\t\t\t\t\t\t(!option ? ' disabled' : !i ? ' selected' : '') +\n\t\t\t\t\t\t\t\t\t'>' +\n\t\t\t\t\t\t\t\t\t(option || '───────') +\n\t\t\t\t\t\t\t\t\t'</select>'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tdropdownDiv[$]('select')[ON]('change', update);\n\t\t\t\t\tret = dropdownDiv;\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tRows of options, selected using radio buttons.\\r\n        */\n\n\t\t\t\tif (type === 'radiorows') {\n\t\t\t\t\tret = el('<div>');\n\t\t\t\t\trow.options.forEach(function (subrows, i) {\n\t\t\t\t\t\tvar subrowEl = el(\n\t\t\t\t\t\t\t'<label class=\\'harlowe-3-radioRow\\'><input type=\"radio\" name=\"'\n\t\t\t\t\t\t\t\t.concat(row.name, '\" value=\"')\n\t\t\t\t\t\t\t\t.concat(!i ? 'none' : i, '\" ')\n\t\t\t\t\t\t\t\t.concat(!i ? 'checked' : '', '></input></label>')\n\t\t\t\t\t\t);\n\t\t\t\t\t\t/*\\r\n            \tPlace each of these sub-options within the <label>.\\r\n            */\n\n\t\t\t\t\t\tret.append(subrows.reduce(reducer, subrowEl));\n\t\t\t\t\t\t/*\\r\n            \tWrap each of the subrows' model functions, so that they only fire whenever this row is actually selected.\\r\n            */\n\n\t\t\t\t\t\tsubrows.forEach(function (subrow) {\n\t\t\t\t\t\t\tvar model = subrow.model;\n\n\t\t\t\t\t\t\tif (model) {\n\t\t\t\t\t\t\t\tsubrow.model = function (m, el) {\n\t\t\t\t\t\t\t\t\treturn subrowEl[$](':scope > input:checked') &&\n\t\t\t\t\t\t\t\t\t\t/*\\r\n                  \tDon't run the subrow's model unless the parent row's radio button is checked.\\r\n                  */\n\t\t\t\t\t\t\t\t\t\t(!nested || panelElem[$](':scope > input:checked'))\n\t\t\t\t\t\t\t\t\t\t? model(m, el)\n\t\t\t\t\t\t\t\t\t\t: m;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsubrowEl[$]('input')[ON]('change', update);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (type === 'macro-list') {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<div><div style=\"text-align:center\">Category: </div></div>'\n\t\t\t\t\t);\n\t\t\t\t\tvar categorySelectorWrapper = el(\n\t\t\t\t\t\t\"<span class='text-select-control'><select></span>\"\n\t\t\t\t\t);\n\t\t\t\t\tret.firstChild.append(categorySelectorWrapper);\n\t\t\t\t\tvar categorySelector = categorySelectorWrapper[$]('select');\n\t\t\t\t\tvar scrollBox = el(\n\t\t\t\t\t\t'<div style=\"margin-top:8px;border-top:1px solid hsla(0,0%,50%,0.5);max-height:40vh;overflow-y:scroll\">'\n\t\t\t\t\t);\n\t\t\t\t\tret.append(scrollBox);\n\t\t\t\t\tcategorySelector[ON]('change', function () {\n\t\t\t\t\t\tvar el = scrollBox[$](\n\t\t\t\t\t\t\t'[name=\"'.concat(categorySelector.value, '\"]')\n\t\t\t\t\t\t);\n\t\t\t\t\t\tel && el.scrollIntoView();\n\t\t\t\t\t});\n\t\t\t\t\tObject.values(Utils.ShortDefs.Macro)\n\t\t\t\t\t\t.sort(function (_ref7, _ref8) {\n\t\t\t\t\t\t\tvar leftName = _ref7.name,\n\t\t\t\t\t\t\t\tleftCategory = _ref7.category,\n\t\t\t\t\t\t\t\tleftCategoryOrder = _ref7.categoryOrder;\n\t\t\t\t\t\t\tvar rightName = _ref8.name,\n\t\t\t\t\t\t\t\trightCategory = _ref8.category,\n\t\t\t\t\t\t\t\trightCategoryOrder = _ref8.categoryOrder;\n\n\t\t\t\t\t\t\t/*\\r\n            \tSort alphabetically, then by explicit order number.\\r\n            */\n\t\t\t\t\t\t\tif (leftCategory !== rightCategory) {\n\t\t\t\t\t\t\t\treturn (leftCategory || '').localeCompare(rightCategory || '');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (leftCategoryOrder !== rightCategoryOrder) {\n\t\t\t\t\t\t\t\tif (isNaN(+leftCategoryOrder)) {\n\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (isNaN(+rightCategoryOrder)) {\n\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn Math.sign(leftCategoryOrder - rightCategoryOrder);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn leftName.localeCompare(rightName);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.forEach(function (defs, i, a) {\n\t\t\t\t\t\t\t// Add category titles whenever the category changes.\n\t\t\t\t\t\t\tif (i === 0 || defs.category !== a[i - 1].category) {\n\t\t\t\t\t\t\t\tscrollBox.append(\n\t\t\t\t\t\t\t\t\tel(\n\t\t\t\t\t\t\t\t\t\t'<h3 style=\"text-transform:capitalize\" name=\"'\n\t\t\t\t\t\t\t\t\t\t\t.concat(defs.category, '\">')\n\t\t\t\t\t\t\t\t\t\t\t.concat(defs.category, '</h3>')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcategorySelector.append(\n\t\t\t\t\t\t\t\t\tel(\n\t\t\t\t\t\t\t\t\t\t'<option value=\"'\n\t\t\t\t\t\t\t\t\t\t\t.concat(defs.category, '\">')\n\t\t\t\t\t\t\t\t\t\t\t.concat(defs.category, '</option>')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} // Filter out doubles (created by macro aliases).\n\n\t\t\t\t\t\t\tif (i > 0 && defs.name === a[i - 1].name) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar subrowEl = el(\n\t\t\t\t\t\t\t\t'<label class=\\'harlowe-3-radioRow\\'><input type=\"radio\" name=\"macro-list\" value=\"'.concat(\n\t\t\t\t\t\t\t\t\tdefs.name,\n\t\t\t\t\t\t\t\t\t'\"></input>'\n\t\t\t\t\t\t\t\t) +\n\t\t\t\t\t\t\t\t\t'<code><a href=\"https://twine2.neocities.org/#'\n\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\tdefs.anchor,\n\t\t\t\t\t\t\t\t\t\t\t'\" target=\"_blank\" rel=\"noopener noreferrer\">('\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.concat(defs.name, ': ')\n\t\t\t\t\t\t\t\t\t\t.concat(defs.sig, ') \\u2192 ')\n\t\t\t\t\t\t\t\t\t\t.concat(defs.returnType, '</a></code>') +\n\t\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\tdefs.aka.length\n\t\t\t\t\t\t\t\t\t\t\t\t? '<div><i>Also known as: '.concat(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefs.aka\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map(function (alias) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn '<code>('.concat(alias, ':)</code>');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.join(', '),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'</i>'\n\t\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t\t\t: '',\n\t\t\t\t\t\t\t\t\t\t\t'</div><div>'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\tdefs['abstract'].replace(\n\t\t\t\t\t\t\t\t\t\t\t\t/`([^`]+)`/g,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction (_, inner) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn '<code>'.concat(inner, '</code>');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t'</div></label>'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tscrollBox.append(subrowEl);\n\t\t\t\t\t\t\tsubrowEl[$]('input')[ON]('change', update);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tRows of options, selected using a single dropdown.\\r\n        */\n\n\t\t\t\tif (type.endsWith('dropdown-rows')) {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<'\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\tinline ? 'span' : 'div',\n\t\t\t\t\t\t\t\t'><span class=\"harlowe-3-dropdownRowLabel\">'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\trow.text,\n\t\t\t\t\t\t\t\t'</span><span class=\"text-select-control\"><select style=\"font-size:1rem;margin-top:4px;'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\trow.width\n\t\t\t\t\t\t\t\t\t? 'width:'.concat(row.width, ';text-overflow:ellipsis')\n\t\t\t\t\t\t\t\t\t: '',\n\t\t\t\t\t\t\t\t'\"></select></span><span class=\"harlowe-3-dropdownRows\"></span></'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(inline ? 'span' : 'div', '>')\n\t\t\t\t\t);\n\t\t\t\t\tvar selectEl = ret[$]('select');\n\t\t\t\t\trow.options.forEach(function (_ref9, i) {\n\t\t\t\t\t\tvar _ref10 = _toArray(_ref9),\n\t\t\t\t\t\t\tname = _ref10[0],\n\t\t\t\t\t\t\tsubrows = _ref10.slice(1);\n\n\t\t\t\t\t\tif (!name) {\n\t\t\t\t\t\t\tselectEl.append(\n\t\t\t\t\t\t\t\tel(\n\t\t\t\t\t\t\t\t\t'<option disabled>\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500</option>'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tselectEl.append(\n\t\t\t\t\t\t\tel(\n\t\t\t\t\t\t\t\t'<option value=\"'\n\t\t\t\t\t\t\t\t\t.concat(name, '\" ')\n\t\t\t\t\t\t\t\t\t.concat(!i ? 'selected' : '', '>')\n\t\t\t\t\t\t\t\t\t.concat(name, '<option>')\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvar subrowEl = el(\n\t\t\t\t\t\t\t'<span data-value=\"'\n\t\t\t\t\t\t\t\t.concat(name, '\" ')\n\t\t\t\t\t\t\t\t.concat(i ? 'hidden' : '', '>')\n\t\t\t\t\t\t);\n\t\t\t\t\t\t/*\\r\n            \tPlace each of these sub-options within the .harlowe-3-dropdownRows.\\r\n            */\n\n\t\t\t\t\t\tret[$]('.harlowe-3-dropdownRows').append(\n\t\t\t\t\t\t\tsubrows.reduce(reducer, subrowEl)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsubrows.forEach(function (subrow) {\n\t\t\t\t\t\t\tvar model = subrow.model;\n\n\t\t\t\t\t\t\tif (model) {\n\t\t\t\t\t\t\t\tsubrow.model = function (m, el) {\n\t\t\t\t\t\t\t\t\treturn selectEl.value === name &&\n\t\t\t\t\t\t\t\t\t\t/*\\r\n                  \tDon't run the subrow's model unless the parent row's radio button is checked.\\r\n                  */\n\t\t\t\t\t\t\t\t\t\t(!nested || panelElem[$](':scope > input:checked'))\n\t\t\t\t\t\t\t\t\t\t? model(m, el)\n\t\t\t\t\t\t\t\t\t\t: m;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tselectEl[ON]('change', function () {\n\t\t\t\t\t\tvar value = selectEl.value;\n\t\t\t\t\t\tret[$$](':scope > .harlowe-3-dropdownRows > span').forEach(\n\t\t\t\t\t\t\tfunction (el) {\n\t\t\t\t\t\t\t\tel[\n\t\t\t\t\t\t\t\t\t(el.getAttribute('data-value') === value ? 'remove' : 'set') +\n\t\t\t\t\t\t\t\t\t\t'Attribute'\n\t\t\t\t\t\t\t\t]('hidden', '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tA column of textareas, but with buttons to add and subtract additional ones.\\r\n        */\n\n\t\t\t\tif (type === 'textarea-rows') {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<div class=\"harlowe-3-textareaRows '.concat(\n\t\t\t\t\t\t\trow.nonZeroRows ? 'harlowe-3-nonZeroRows' : '',\n\t\t\t\t\t\t\t'\">'\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tvar makeRow = function makeRow() {\n\t\t\t\t\t\tif (ret.childNodes.length > 100) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar line = el(\n\t\t\t\t\t\t\t'<div class=\"harlowe-3-dataRow\"><input type=text style=\"width:80%;padding:var(--grid-size)\" placeholder=\"'\n\t\t\t\t\t\t\t\t.concat(row.placeholder, '\"></input><button class=\"')\n\t\t\t\t\t\t\t\t.concat(buttonClass(), ' harlowe-3-rowMinus\">')\n\t\t\t\t\t\t\t\t.concat(fontIcon('minus'), '</button><button class=\"')\n\t\t\t\t\t\t\t\t.concat(buttonClass(), ' harlowe-3-rowPlus\">')\n\t\t\t\t\t\t\t\t.concat(fontIcon('plus'), '</button></div>')\n\t\t\t\t\t\t);\n\t\t\t\t\t\tline[$]('input')[ON]('input', update);\n\t\t\t\t\t\tline[$]('.harlowe-3-rowPlus')[ON]('click', function () {\n\t\t\t\t\t\t\tmakeRow();\n\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tline[$]('.harlowe-3-rowMinus')[ON]('click', function () {\n\t\t\t\t\t\t\tline.remove();\n\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tret.append(line);\n\t\t\t\t\t};\n\n\t\t\t\t\tmakeRow();\n\t\t\t\t}\n\n\t\t\t\tif (type === 'datavalue-inner') {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<div class=\"harlowe-3-dataRow\" style=\\'margin:0.2em 0px\\'>'.concat(\n\t\t\t\t\t\t\trow.text,\n\t\t\t\t\t\t\t'</div>'\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tvar modelRegistry = [];\n\t\t\t\t\tvar rowValuesBuffer = [];\n\t\t\t\t\treducer(\n\t\t\t\t\t\tret,\n\t\t\t\t\t\tdataValueRow(\n\t\t\t\t\t\t\tfunction (_, v) {\n\t\t\t\t\t\t\t\treturn rowValuesBuffer.push(v);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmodelRegistry,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tvar innerModel = row.model;\n\n\t\t\t\t\trow.model = function (m) {\n\t\t\t\t\t\t/*\\r\n            \tThe process for actually obtaining a value from the child rows is:\\r\n            \tclear the rowValues buffer, then populate it by firing all of the model() methods\\r\n            \tthat were captured in the modelRegistry.\\r\n            */\n\t\t\t\t\t\trowValuesBuffer = [];\n\t\t\t\t\t\tmodelRegistry.reduce(function (m, fn) {\n\t\t\t\t\t\t\treturn fn(m) || m;\n\t\t\t\t\t\t}, m);\n\t\t\t\t\t\tinnerModel && innerModel(m, rowValuesBuffer);\n\t\t\t\t\t};\n\n\t\t\t\t\trow.renumber(ret[$](':scope > * > .harlowe-3-dropdownRowLabel'));\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tDatavalue rows are rows of inputs for Harlowe data values, which can be added and subtracted.\\r\n        \tEach Harlowe input is a special row created by dataValueRow(), above.\\r\n        \tDatavalue-map is a special case where the position name is an inline-textarea input, meaning\\r\n        \teach line has two inputs each.\\r\n        */\n\n\t\t\t\tif (type === 'datavalue-rows' || type === 'datavalue-map') {\n\t\t\t\t\tret = el(\n\t\t\t\t\t\t'<div class=\"harlowe-3-datavalueRows\">'\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\trow.text || '',\n\t\t\t\t\t\t\t\t'<div class=\"harlowe-3-dataEmptyRow\"><i>No data</i></div><button class=\"'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(buttonClass(), ' harlowe-3-rowPlus\">')\n\t\t\t\t\t\t\t.concat(fontIcon('plus'), ' Value</button></div>')\n\t\t\t\t\t);\n\t\t\t\t\tvar plusButton = ret[$]('.harlowe-3-rowPlus');\n\t\t\t\t\t/*\\r\n          \tUnlike every other panel row implemented, this dynamically creates and destroys other panel rows.\\r\n          \tAs such, some special measures have to be taken to allow this row to still act like a normal row,\\r\n          \tand for its subrows to be entirely subordinate to it.\\r\n          \tIn order to capture and suppress the model() methods of each subrow, two closure variables are needed:\\r\n          \ta modelRegistry, which vaccuums up the model() methods of subrows as they are created (by being passed to\\r\n          \tdataValueRow() in position 2) and a rowValuesBuffer, which is pushed to in place of assigning to the model\\r\n          \tin each row's model() methods (see above), using the callback argument to dataValueRow() in position 1.\\r\n          */\n\n\t\t\t\t\tvar childModelMethods = new Set();\n\t\t\t\t\tvar _rowValuesBuffer = [];\n\t\t\t\t\t/*\\r\n          \tA utility to ensure that each datavalue-row's \"Value:\" label is replaced with \"1st\", \"2nd\" and so forth.\\r\n          */\n\n\t\t\t\t\tvar renumber = function renumber() {\n\t\t\t\t\t\tArray.from(\n\t\t\t\t\t\t\tret[$$](\n\t\t\t\t\t\t\t\t':scope > .harlowe-3-dataRow > * > .harlowe-3-dropdownRowLabel'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t).forEach(row.renumber);\n\t\t\t\t\t};\n\n\t\t\t\t\tvar _makeRow = function _makeRow() {\n\t\t\t\t\t\tif (ret.childNodes.length > 50) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar line = el('<div class=\"harlowe-3-dataRow\">');\n\t\t\t\t\t\t/*\\r\n            \tThe model() methods of this line's subrows are captured in this array, as well as the childModelMethods set.\\r\n            \tThis is to allow them to be deleted from the set once the line is removed.\\r\n            */\n\n\t\t\t\t\t\tvar modelRegistry = [];\n\t\t\t\t\t\tret.insertBefore(\n\t\t\t\t\t\t\t(type.endsWith('map')\n\t\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\t\t\t\t\tplaceholder: 'Data name',\n\t\t\t\t\t\t\t\t\t\t\twidth: '15%',\n\t\t\t\t\t\t\t\t\t\t\tmodel: function model(_, elem) {\n\t\t\t\t\t\t\t\t\t\t\t\t_rowValuesBuffer.push(\n\t\t\t\t\t\t\t\t\t\t\t\t\tstringify(elem[$]('input').value)\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tmodelRegistry: modelRegistry\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: []\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\tdataValueRow(\n\t\t\t\t\t\t\t\t\t\tfunction (_, v) {\n\t\t\t\t\t\t\t\t\t\t\treturn _rowValuesBuffer.push(v);\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tmodelRegistry,\n\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.reduce(reducer, line),\n\t\t\t\t\t\t\tplusButton\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmodelRegistry.forEach(function (m) {\n\t\t\t\t\t\t\treturn childModelMethods.add(m);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tline.append(\n\t\t\t\t\t\t\tel(\n\t\t\t\t\t\t\t\t'<button class=\"'\n\t\t\t\t\t\t\t\t\t.concat(buttonClass(), ' harlowe-3-rowMinus\">')\n\t\t\t\t\t\t\t\t\t.concat(fontIcon('minus'), '</button>')\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tline[$](':scope > .harlowe-3-rowMinus')[ON]('click', function () {\n\t\t\t\t\t\t\tline.remove();\n\t\t\t\t\t\t\t/*\\r\n              \tWhen the line is removed, all of its model() methods must be freed, too.\\r\n              */\n\n\t\t\t\t\t\t\tmodelRegistry.forEach(function (m) {\n\t\t\t\t\t\t\t\treturn childModelMethods['delete'](m);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (ret.childNodes.length === 0) {\n\t\t\t\t\t\t\t\t_makeRow();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t\trenumber();\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\tvar _innerModel = row.model;\n\n\t\t\t\t\trow.model = function (m) {\n\t\t\t\t\t\t/*\\r\n            \tThe process for actually obtaining a value from the child rows is:\\r\n            \tclear the rowValues buffer, then populate it by firing all of the model() methods\\r\n            \tthat were captured in the modelRegistry.\\r\n            */\n\t\t\t\t\t\t_rowValuesBuffer = [];\n\n\t\t\t\t\t\t_toConsumableArray(childModelMethods).reduce(function (m, fn) {\n\t\t\t\t\t\t\treturn fn(m) || m;\n\t\t\t\t\t\t}, m);\n\n\t\t\t\t\t\t_innerModel && _innerModel(m, _rowValuesBuffer);\n\t\t\t\t\t};\n\n\t\t\t\t\tplusButton[ON]('click', function () {\n\t\t\t\t\t\t_makeRow();\n\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t\trenumber();\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (type === 'scroll-wrapper') {\n\t\t\t\t\tret = el('<div style=\"harlowe-3-scrollWrapper\"></div>');\n\t\t\t\t\trow.contents.reduce(reducer, ret);\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tThe \"Create\" and \"Cancel\" buttons. This is always the last row of a panel.\\r\n        */\n\n\t\t\t\tif (type === 'confirm') {\n\t\t\t\t\t/*\\r\n          \tIf this is Twine 2.4, wrap all preceding elements inside a scrollable container div.\\r\n          \tThis is a special convenience hack that saves me having to use \"scroll-wrapper\" a lot.\\r\n          */\n\t\t\t\t\tif (!twine23) {\n\t\t\t\t\t\tvar wrapper = el('<div class=\"harlowe-3-scrollWrapper\"></div>');\n\t\t\t\t\t\twrapper.append.apply(\n\t\t\t\t\t\t\twrapper,\n\t\t\t\t\t\t\t_toConsumableArray(panelElem.childNodes)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tpanelElem.append(wrapper);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar buttons = el(\n\t\t\t\t\t\t'<div class=\"harlowe-3-confirmButtons\" style=\"padding-bottom:8px;\"></div>'\n\t\t\t\t\t);\n\t\t\t\t\tvar cancel = el(\n\t\t\t\t\t\t'<button class=\"'\n\t\t\t\t\t\t\t.concat(buttonClass(), '\">')\n\t\t\t\t\t\t\t.concat(fontIcon('times'), ' Cancel</button>')\n\t\t\t\t\t);\n\t\t\t\t\tvar confirm = el(\n\t\t\t\t\t\t'<button class=\"'\n\t\t\t\t\t\t\t.concat(buttonClass(true), ' create\">')\n\t\t\t\t\t\t\t.concat(fontIcon('check'), ' Add</button>')\n\t\t\t\t\t);\n\t\t\t\t\tconfirm.setAttribute('style', disabledButtonCSS);\n\t\t\t\t\tupdaterFns.push(function (m) {\n\t\t\t\t\t\tvar setAttr = !m.valid ? 'setAttribute' : 'removeAttribute';\n\t\t\t\t\t\tconfirm[setAttr]('style', disabledButtonCSS);\n\n\t\t\t\t\t\tif (m.valid) {\n\t\t\t\t\t\t\tif (typeof m.wrapStart === 'function') {\n\t\t\t\t\t\t\t\tm.wrapStart = m.wrapStart(m);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (typeof m.wrapEnd === 'function') {\n\t\t\t\t\t\t\t\tm.wrapEnd = m.wrapEnd(m);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t/*\\r\n          \tBecause of a circular dependency, switchPanel and wrapSelection are injected into this module's exported object by Toolbar.\\r\n          */\n\n\t\t\t\t\tcancel[ON]('click', ToolbarPanel.switchPanel);\n\t\t\t\t\tconfirm[ON]('click', function () {\n\t\t\t\t\t\tvar m = model();\n\n\t\t\t\t\t\tif (typeof m.wrapStart === 'function') {\n\t\t\t\t\t\t\tm.wrapStart = m.wrapStart(m);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof m.wrapEnd === 'function') {\n\t\t\t\t\t\t\tm.wrapEnd = m.wrapEnd(m);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tToolbarPanel.wrapSelection(\n\t\t\t\t\t\t\tm.output() + m.wrapStart,\n\t\t\t\t\t\t\tm.wrapEnd,\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tm.innerText,\n\t\t\t\t\t\t\tm.wrapStringify\n\t\t\t\t\t\t);\n\t\t\t\t\t\tToolbarPanel.switchPanel();\n\t\t\t\t\t});\n\t\t\t\t\tbuttons.append(cancel, confirm);\n\t\t\t\t\tret = buttons;\n\t\t\t\t}\n\n\t\t\t\tif (nested) {\n\t\t\t\t\tvar u = row.update;\n\n\t\t\t\t\trow.update = function (m, el) {\n\t\t\t\t\t\tvar checked = panelElem[$](':scope > input:checked');\n\t\t\t\t\t\tArray.from(panelElem[$$]('div,br ~ *')).forEach(function (e) {\n\t\t\t\t\t\t\treturn e[(checked ? 'remove' : 'set') + 'Attribute'](\n\t\t\t\t\t\t\t\t'hidden',\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tArray.from(panelElem[$$]('input,select'))\n\t\t\t\t\t\t\t.slice(1)\n\t\t\t\t\t\t\t.forEach(function (e) {\n\t\t\t\t\t\t\t\treturn e[(checked ? 'remove' : 'set') + 'Attribute'](\n\t\t\t\t\t\t\t\t\t'disabled',\n\t\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tu && u(m, el);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t/*\\r\n        \tThe \"model\" and \"update\" functions are attached by default if they exist.\\r\n        \tIf an alternative modelRegistry array was passed in (i.e. by datavalue-rows), then use that instead.\\r\n        */\n\n\t\t\t\trow.model &&\n\t\t\t\t\t(row.modelRegistry || modelFns).push(function (m) {\n\t\t\t\t\t\treturn row.model(m, ret);\n\t\t\t\t\t});\n\t\t\t\trow.update &&\n\t\t\t\t\tupdaterFns.push(function (m) {\n\t\t\t\t\t\treturn row.update(m, ret);\n\t\t\t\t\t});\n\t\t\t\t/*\\r\n        \tAppend and return the panel element.\\r\n        */\n\n\t\t\t\tret && panelElem.append(ret);\n\t\t\t\t/*\\r\n        \tThis is something of a hack... by stashing the update() function on the element in this otherwise unused handler spot,\\r\n        \tit can be called whenever panels are switched.\\r\n        */\n\n\t\t\t\tpanelElem.onreset = update;\n\t\t\t\treturn panelElem;\n\t\t\t}, panelElem);\n\t\t\tpanelRows = null;\n\t\t\treturn ret;\n\t\t};\n\t};\n\n\tToolbarPanel.Panel = folddownPanel;\n\tToolbarPanel.dataValueRow = dataValueRow;\n\n\tif (this && this.loaded) {\n\t\tthis.modules.ToolbarPanel = ToolbarPanel;\n\t} else if (!this.window) {\n\t\tthis.ToolbarPanel = ToolbarPanel;\n\t}\n}.call(eval('this')));\n/*jshint strict:true*/\n\n(function () {\n\t'use strict';\n\n\tvar ShortDefs, twine23, insensitiveName; // this.loaded implies TwineJS 2.3.\n\n\tif (this && this.loaded) {\n\t\tvar _this$modules$Utils = this.modules.Utils;\n\t\tShortDefs = _this$modules$Utils.ShortDefs;\n\t\ttwine23 = _this$modules$Utils.twine23;\n\t\tinsensitiveName = _this$modules$Utils.insensitiveName;\n\t} // This can't be loaded in HarloweDocs.\n\telse if (!this.window) {\n\t\tvar _this$Utils = this.Utils;\n\t\tShortDefs = _this$Utils.ShortDefs;\n\t\ttwine23 = _this$Utils.twine23;\n\t\tinsensitiveName = _this$Utils.insensitiveName;\n\t}\n\n\tvar docsURL = function docsURL(anchor, contents) {\n\t\treturn '<a href=\"https://twine2.neocities.org/#'\n\t\t\t.concat(anchor, '\" target=\"_blank\" rel=\"noopener noreferrer\">')\n\t\t\t.concat(contents, '</a>');\n\t};\n\n\tvar enclosedText = 'This markup gives the enclosed text ';\n\n\tvar producesBooleanTrueIf = function producesBooleanTrueIf(c) {\n\t\treturn 'The <b>\"'.concat(\n\t\t\tc,\n\t\t\t'\" operator</b> produces the boolean value `true` if '\n\t\t);\n\t};\n\n\tvar otherwiseFalse = ' Otherwise, it produces `false`.';\n\tvar variableInProse =\n\t\t'If they contain strings, numbers, commands or changers, you can place them directly in your prose to display the value, run the command, or apply the changer.';\n\n\tvar lambdaClause = function lambdaClause(c) {\n\t\treturn 'The keyword <b>\"'\n\t\t\t.concat(c, '\"</b> makes the code on the right into a <b>\"')\n\t\t\t.concat(c, '\" lambda clause</b>. ');\n\t};\n\n\tvar specialHookName = function specialHookName(name, what) {\n\t\treturn 'Additionally, because it is the special name `'\n\t\t\t.concat(name, '`\", it also refers to <b>')\n\t\t\t.concat(what, '</b>, and can be used to apply changers to ')\n\t\t\t.concat(what, '.');\n\t};\n\n\tvar tooltipMessages = {\n\t\thr: \"This is a <b>horizontal rule</b>. It extends across the entire passage width (or the column width, if it's in a column).\",\n\t\tbulleted:\n\t\t\t'The `*` at the start of this line makes this a <b>bulleted list item</b>.',\n\t\tnumbered:\n\t\t\t'The `0.` at the start of this line makes this a <b>numbered list item</b>.',\n\t\theading: function heading(_ref11) {\n\t\t\tvar depth = _ref11.depth;\n\t\t\treturn 'This is a <b>level '\n\t\t\t\t.concat(depth, ' ')\n\t\t\t\t.concat(depth === 1 ? '(largest) ' : '', 'heading</b> mark.');\n\t\t},\n\t\talign: function align(_ref12) {\n\t\t\tvar _align = _ref12.align;\n\t\t\treturn (\n\t\t\t\t'This is an <b>aligner</b> mark. The text after this is '.concat(\n\t\t\t\t\t_align === 'justify'\n\t\t\t\t\t\t? 'justified (spaced out to touch both edges)'\n\t\t\t\t\t\t: 'aligned to the '.concat(_align),\n\t\t\t\t\t'. '\n\t\t\t\t) +\n\t\t\t\t'Write `<==` for left alignment, `==>` for right alignment, `=><=` for centering, and `<==>` for justified alignment.'\n\t\t\t);\n\t\t},\n\t\tcolumn: function column(_ref13) {\n\t\t\tvar text = _ref13.text,\n\t\t\t\twidth = _ref13.width,\n\t\t\t\tmarginRight = _ref13.marginRight,\n\t\t\t\tmarginLeft = _ref13.marginLeft;\n\t\t\treturn text.trim().startsWith('|') && text.trim().endsWith('|')\n\t\t\t\t? 'This mark ends all of the preceding columns. The text after this is not in a column.'\n\t\t\t\t: 'The text after this mark is in a <b>column</b> with width multiplier '\n\t\t\t\t\t\t.concat(width, 'x, a left margin of ')\n\t\t\t\t\t\t.concat(marginLeft, 'em, and a right margin of ')\n\t\t\t\t\t\t.concat(marginRight, 'em. ') +\n\t\t\t\t\t\t'Write more consecutive `|` marks to increase the width, and place `=` to the left and right to increase the margin on that side.';\n\t\t},\n\t\tem:\n\t\t\tenclosedText +\n\t\t\t'<b>emphasis style</b>. This is visually the same as italic style by default.',\n\t\tstrong:\n\t\t\tenclosedText +\n\t\t\t'<b>strong emphasis style</b>. This is visually the same as bold style by default.',\n\t\tbold: enclosedText + '<b>bold style</b>.',\n\t\titalic: enclosedText + '<b>italic style</b>.',\n\t\tstrike: enclosedText + '<b>strikethrough style</b>.',\n\t\tsup: enclosedText + '<b>superscript style</b>.',\n\t\tcomment:\n\t\t\t'This is a <b>HTML comment</b>. Everything inside it will be ignored by Harlowe.',\n\t\tscriptStyleTag: function scriptStyleTag() {\n\t\t\treturn tooltipMessages.tag;\n\t\t},\n\t\ttag: 'This is a <b>HTML tag</b>. Harlowe supports raw HTML in passage code.',\n\t\thook: function hook(_ref14) {\n\t\t\tvar type = _ref14.type,\n\t\t\t\tname = _ref14.name,\n\t\t\t\ttagPosition = _ref14.tagPosition;\n\t\t\treturn (\n\t\t\t\t(type === 'hook'\n\t\t\t\t\t? 'These square brackets are a <b>hook</b>, enclosing this section of passage code.'\n\t\t\t\t\t: '') +\n\t\t\t\t' Changer values can be attached to the left of hooks.' +\n\t\t\t\t(name\n\t\t\t\t\t? '<br>This hook has a <b>nametag</b> on the '\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\ttagPosition === 'prepended' ? 'left' : 'right',\n\t\t\t\t\t\t\t\t'. This allows the hook to be referred to in macro calls using the hook name <code>?'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(name, '</code>.')\n\t\t\t\t\t: '')\n\t\t\t);\n\t\t},\n\t\tunclosedHook: function unclosedHook(token) {\n\t\t\treturn (\n\t\t\t\t'This marks all of the remaining code in the passage as being inside a <b>hook</b>.' +\n\t\t\t\ttooltipMessages.hook(token)\n\t\t\t);\n\t\t},\n\t\tverbatim:\n\t\t\t'This is <b>verbatim markup</b>. Place text between matching pairs and amounts of <code>`</code> marks, and Harlowe will ignore the markup within, instead displaying it as-is.',\n\t\tunclosedCollapsed: function unclosedCollapsed(token) {\n\t\t\treturn tooltipMessages.collapsed(token);\n\t\t},\n\t\tcollapsed: function collapsed(_ref15) {\n\t\t\tvar type = _ref15.type;\n\t\t\treturn 'This is <b>'\n\t\t\t\t.concat(\n\t\t\t\t\ttype === 'unclosedCollapsed' ? 'unclosed ' : '',\n\t\t\t\t\t'collapsed whitespace</b> markup. All sequences of consecutive whitespace within '\n\t\t\t\t)\n\t\t\t\t.concat(\n\t\t\t\t\ttype === 'unclosedCollapsed'\n\t\t\t\t\t\t? 'the remainder of the passage '\n\t\t\t\t\t\t: 'the <code>{</code> and <code>}</code> marks',\n\t\t\t\t\t' will be replaced with a single space. You can use this to space out your code and keep your passage readable.<br>To include a line break within this markup that will be preserved, use a HTML <code>&lt;br&gt;</code> tag.'\n\t\t\t\t);\n\t\t},\n\t\tescapedLine:\n\t\t\t'This is an <b>escaped line break</b> mark. This removes the line break before or after it from the displayed passage.',\n\t\ttwineLink: function twineLink(_ref16) {\n\t\t\tvar passage = _ref16.passage;\n\t\t\treturn 'This is a <b>link to the passage \"'.concat(\n\t\t\t\tpassage,\n\t\t\t\t'\"</b>. Links, like hooks and commands, can have changer values attached to the left.'\n\t\t\t);\n\t\t},\n\t\tbr: '',\n\t\t// Display nothing,\n\t\turl: '',\n\t\tvariable:\n\t\t\t\"This is a <b>story-wide variable</b>. After this has been set to a data value, it can be used anywhere else in the story. Use these to store data values related to your story's game state, or changers that are commonly used. \" +\n\t\t\tvariableInProse,\n\t\ttempVariable:\n\t\t\t\"This is a <b>temp variable</b>. It can be used in the same passage and hook in which it's first set to a data value. Use these to store values temporarily, or that won't be needed elsewhere. \" +\n\t\t\tvariableInProse,\n\t\tmacroName: function macroName(_, _ref17) {\n\t\t\tvar _ref18 = _slicedToArray(_ref17, 2),\n\t\t\t\tparent = _ref18[1];\n\n\t\t\treturn tooltipMessages.macro(parent);\n\t\t},\n\t\tgrouping:\n\t\t\t'Use these <b>grouping brackets</b> to ensure operations are performed in a certain order. Code in brackets will be computed before the code adjacent to it.',\n\t\tproperty: function property(_ref19) {\n\t\t\tvar type = _ref19.type,\n\t\t\t\tname = _ref19.name;\n\t\t\treturn (\n\t\t\t\t(name\n\t\t\t\t\t? 'This retrieves the data stored at <b>the `'\n\t\t\t\t\t\t\t.concat(name, '` ')\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\tname.match(\n\t\t\t\t\t\t\t\t\t/^\\d+(?:th|nd|st|rd)(?:last)?(?:to\\d+(?:nth|nd|st|rd)(?:last)?)?$/g\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t? 'position'.concat(name.includes('to') ? 's' : '')\n\t\t\t\t\t\t\t\t\t: 'name',\n\t\t\t\t\t\t\t\t'</b> of the container value on the '\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\ttype.startsWith('belonging') ? 'right' : 'left',\n\t\t\t\t\t\t\t\t'.<br><br>'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t: '') +\n\t\t\t\t'Some types of data values (arrays, datamaps, datasets, strings, colours, gradients, custom macros, and typedvars) are also storage containers for other values. ' +\n\t\t\t\t\"You can access a specific value stored in them using that value's <b>data name</b> (or a string, number, or array value in brackets) by writing <i>value</i> `'s` <i>name</i>, or <i>name</i> `of` <i>value</i>.\"\n\t\t\t);\n\t\t},\n\t\tpossessiveOperator: function possessiveOperator(token) {\n\t\t\treturn tooltipMessages.property(token);\n\t\t},\n\t\titsProperty: function itsProperty(token) {\n\t\t\treturn tooltipMessages.property(token);\n\t\t},\n\t\titsOperator: function itsOperator(token) {\n\t\t\treturn tooltipMessages.identifier(token);\n\t\t},\n\t\tbelongingItProperty: function belongingItProperty(token) {\n\t\t\treturn tooltipMessages.property(token);\n\t\t},\n\t\tbelongingItOperator: function belongingItOperator(token) {\n\t\t\treturn tooltipMessages.property(token);\n\t\t},\n\t\tbelongingProperty: function belongingProperty(token) {\n\t\t\treturn tooltipMessages.property(token);\n\t\t},\n\t\tbelongingOperator: function belongingOperator(token) {\n\t\t\treturn tooltipMessages.property(token);\n\t\t},\n\t\tescapedStringChar: '',\n\t\tstring:\n\t\t\t'This is <b>string data</b>. Strings are sequences of text data enclosed in matching \" or \\' marks. Use a `\\\\` inside a string to \"escape\" the next character. Escaped \" or \\' marks don\\'t count as the end of the string.',\n\t\thookName: function hookName(_ref20) {\n\t\t\tvar name = _ref20.name;\n\t\t\treturn (\n\t\t\t\t'This <b>hook name</b> refers to all hooks named \"`'.concat(\n\t\t\t\t\tname,\n\t\t\t\t\t'`\" in this passage.<br><br>'\n\t\t\t\t) +\n\t\t\t\t(name.toLowerCase() === 'page'\n\t\t\t\t\t? specialHookName('page', 'the entire HTML page')\n\t\t\t\t\t: name.toLowerCase() === 'passage'\n\t\t\t\t\t? specialHookName('passage', 'the entire passage')\n\t\t\t\t\t: name.toLowerCase() === 'link'\n\t\t\t\t\t? specialHookName('link', 'every link in the passage')\n\t\t\t\t\t: name.toLowerCase() === 'sidebar'\n\t\t\t\t\t? specialHookName('sidebar', 'the sidebar')\n\t\t\t\t\t: '')\n\t\t\t);\n\t\t},\n\t\tcssTime: function cssTime(_ref21) {\n\t\t\tvar value = _ref21.value;\n\t\t\treturn 'This is <b>number data</b> in CSS time format. Harlowe automatically converts this to a number of milliseconds, so this is identical to '.concat(\n\t\t\t\tvalue,\n\t\t\t\t'.'\n\t\t\t);\n\t\t},\n\t\tdatatype:\n\t\t\t'This is the name of a <b>datatype</b>. Use these names to check what kind of data a data value is, using the `matches` or `is a` operators.<br>' +\n\t\t\t\"You can also use them in a `(set:)` or `(put:)` to restrict that variable's data for error-checking purposes. (See the documentation for details.)\",\n\t\tcolour: function colour(_ref22) {\n\t\t\tvar text = _ref22.text;\n\t\t\treturn (\n\t\t\t\t'This is a ' +\n\t\t\t\t(text.startsWith('#')\n\t\t\t\t\t? '<b>HTML colour value</b>. Harlowe can use this as colour data.'\n\t\t\t\t\t: 'built-in Harlowe <b>colour value</b>. The built-in colours are `red`, `orange`, `yellow`, `lime`, `green`, `cyan` (alias `aqua`), `blue`, `navy`, `purple`, `fuchsia` (alias `magenta`), `white`, `gray` (alias `grey`), `black`, and `transparent`.')\n\t\t\t);\n\t\t},\n\t\tnumber:\n\t\t\t'This is <b>number data</b>. Harlowe supports whole numbers (like `2`), negative numbers (like `-2`), and numbers with a decimal fraction component (like `2.2`).',\n\t\tinequality: function inequality(_ref23) {\n\t\t\tvar operator = _ref23.operator,\n\t\t\t\tnegate = _ref23.negate;\n\t\t\toperator = negate\n\t\t\t\t? {\n\t\t\t\t\t\t'>': '<=',\n\t\t\t\t\t\t'<': '>=',\n\t\t\t\t\t\t'>=': '<',\n\t\t\t\t\t\t'<=': '>'\n\t\t\t\t  }[operator]\n\t\t\t\t: operator;\n\t\t\tvar operatorEng =\n\t\t\t\t(operator[0] === '>' ? 'greater ' : 'less ') +\n\t\t\t\t'than' +\n\t\t\t\t(operator.endsWith('=') ? ' or equal to' : '');\n\t\t\treturn (\n\t\t\t\tproducesBooleanTrueIf(operatorEng) +\n\t\t\t\t' the number value on the left is '.concat(\n\t\t\t\t\toperatorEng,\n\t\t\t\t\t' the number value on the right.'\n\t\t\t\t) +\n\t\t\t\totherwiseFalse\n\t\t\t);\n\t\t},\n\t\taugmentedAssign:\n\t\t\t'This is an <b>augmented assignment operator</b>, similar to the ones in Javascript.',\n\t\tidentifier: function identifier(_ref24) {\n\t\t\tvar text = _ref24.text;\n\t\t\ttext = insensitiveName(text);\n\n\t\t\tif (text.startsWith('it')) {\n\t\t\t\treturn (\n\t\t\t\t\t'The keyword <b>it</b> is a shorthand for the leftmost part of an operation. You can write `(if: $candles < 2 and it > 5)` instead of `(if: $candles < 2 and $candles > 5)` ' +\n\t\t\t\t\t'or `(set: $candles to it + 3)` instead of `(set: $candles to $candles + 3)`. When accessing a data value from it, you can write it as <b>its</b>, such as in `its length > 0`.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (text === 'time') {\n\t\t\t\treturn 'The keyword <b>time</b> equals the number of milliseconds passed since the passage was displayed.';\n\t\t\t}\n\n\t\t\tif (text.startsWith('exit')) {\n\t\t\t\treturn (\n\t\t\t\t\t'The keyword <b>exits</b> or <b>exit</b> equals the number of currently available \"exits\" in a passage - the number of' +\n\t\t\t\t\t' link, mouseover, and mouseout elements that are still active on the page, which could lead to new content and progress.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (text.startsWith('visit')) {\n\t\t\t\treturn (\n\t\t\t\t\t'The keyword <b>visits</b> or <b>visit</b> equals the number of times the current passage has been visited this game, including the current visit.' +\n\t\t\t\t\t' In `(storylet:)` macros, when Harlowe decides whether this passage is available to `(open-storylets:)`, this will often be 0, but when actually visiting the passage, it will be at least 1.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (text === 'pos') {\n\t\t\t\treturn 'The keyword <b>pos</b> should ONLY be used within a \"where\" or \"via\" lambda clause. It refers to the position of the current data value that this lambda is processing.';\n\t\t\t}\n\n\t\t\treturn '';\n\t\t},\n\t\twhitespace:\n\t\t\t'<b>Whitespace</b> within macro calls is simply used to separate syntax elements. You can use as much or as little as you like to make your code more readable.',\n\t\terror: function error(_, _ref25) {\n\t\t\tvar _ref26 = _slicedToArray(_ref25, 1),\n\t\t\t\t_ref26$ = _ref26[0],\n\t\t\t\tmessage = _ref26$.message,\n\t\t\t\texplanation = _ref26$.explanation;\n\n\t\t\treturn message + (explanation ? '<br>' + explanation : '');\n\t\t},\n\t\tboolean:\n\t\t\t'The keywords <b>true</b> or <b>false</b> are the two <b>boolean values</b>. They are produced by comparison operators (`<`, `>`, `is`, etc.) and other macros.',\n\t\tis:\n\t\t\t'The <b>\"is\" operator</b> produces the boolean value `true` if the values on each sides of it are exactly the same.' +\n\t\t\totherwiseFalse,\n\t\tto: 'Use the <b>\"to\" operator</b> only inside a `(set:)` macro call. Place it to the left of the data, and right of the variable to set the data to.',\n\t\tinto: 'Use the <b>\"into\" operator</b> only inside a `(put:)`, `(move:)` or `(unpack:)` macro call. Place it to the right of the data, and left of the destination to put the data.',\n\t\twhere:\n\t\t\tlambdaClause('where') +\n\t\t\t'This lambda will search for input values <i>where</i> the right side, once computed, produces `true`.',\n\t\twhen:\n\t\t\tlambdaClause('when') +\n\t\t\t'This lambda will cause the macro (if it accepts \"when\" lambdas) to only do something <i>when</i> the right side, once computed, produces `true`.',\n\t\tvia:\n\t\t\tlambdaClause('via') +\n\t\t\t'This lambda is used to convert input values into new values <i>via</i> computing the expression to the right.',\n\t\tmaking:\n\t\t\tlambdaClause('making') +\n\t\t\t'This is used only by the `(folded:)` macro. The lambda <i>makes</i> the temp variable on the right, which becomes the final value of the `(folded:)` call.',\n\t\teach:\n\t\t\tlambdaClause('each') +\n\t\t\t'This causes the macro (if it accepts lambdas) to, for <i>each</i> input value, place that value in the temp variable on the right, before running the other lambda clauses adjacent to this one (if any).',\n\t\tand:\n\t\t\tproducesBooleanTrueIf('and') +\n\t\t\t'the values on each side of it are both `true`.' +\n\t\t\totherwiseFalse,\n\t\tor:\n\t\t\tproducesBooleanTrueIf('or') +\n\t\t\t'the values on each side of it are both `false`.' +\n\t\t\totherwiseFalse,\n\t\tnot: 'The <b>\"not\" operator</b> inverts the boolean value to its right, turning `true` to `false` and vice-versa.',\n\t\tisNot:\n\t\t\tproducesBooleanTrueIf('is not') +\n\t\t\t'the values on each sides of it are NOT exactly the same.' +\n\t\t\totherwiseFalse,\n\t\tcontains:\n\t\t\tproducesBooleanTrueIf('contains') +\n\t\t\t'the array, string, or dataset on the left contains the data on the right, or if the datamap on the left has the data name on the right.' +\n\t\t\totherwiseFalse,\n\t\tdoesNotContain:\n\t\t\tproducesBooleanTrueIf('does not contain') +\n\t\t\t'the array, string, or dataset on the left does NOT contain the data on the right, or if the datamap on the left does NOT have the data name on the right.' +\n\t\t\totherwiseFalse,\n\t\tisIn:\n\t\t\tproducesBooleanTrueIf('is in') +\n\t\t\t'the data on the left is in the array, string, datamap or dataset on the right.' +\n\t\t\totherwiseFalse,\n\t\tisA:\n\t\t\tproducesBooleanTrueIf('is a') +\n\t\t\t'the data on the left matches the datatype on the right.' +\n\t\t\totherwiseFalse,\n\t\tisNotA:\n\t\t\tproducesBooleanTrueIf('is not a') +\n\t\t\t'the data on the left does NOT match the datatype on the right.' +\n\t\t\totherwiseFalse,\n\t\tisNotIn:\n\t\t\tproducesBooleanTrueIf('is not in') +\n\t\t\t'the data on the left is NOT in the array, string, datamap or dataset on the right.' +\n\t\t\totherwiseFalse,\n\t\tmatches:\n\t\t\tproducesBooleanTrueIf('matches') +\n\t\t\t'one side describes the other - that is, if one side is a datatype that describes the other, ' +\n\t\t\t'or both sides are arrays, datamaps, or datasets, with data in positions that matches those in the other, or if both sides are equal.' +\n\t\t\totherwiseFalse,\n\t\tdoesNotMatch:\n\t\t\tproducesBooleanTrueIf('does not match') +\n\t\t\t'one side does NOT describe the other.' +\n\t\t\totherwiseFalse,\n\t\tbind: 'The <b>bind</b> or <b>2bind</b> keyword specifies that the variable to the right should be \"bound\" to an interactable element. This is used only by certain command macros, like `(dialog:)` or `(cycling-link:)`.',\n\t\tcomma:\n\t\t\t'Use <b>commas</b> to separate the values that you give to macro calls.',\n\t\tspread:\n\t\t\t'This is a <b>spreader</b>. These spread out the values in the array, string or dataset to the right of it, as if each value was individually placed in the call and separated with commas.' +\n\t\t\t'<br><br>Alternatively, if a datatype is to the right of it, that datatype becomes a <b>spread datatype</b> that matches zero or more of itself.',\n\t\ttypeSignature:\n\t\t\t'The <b>-type</b> suffix is used to restrict the variable on the right to only holding data that matches the data pattern on the left. Variables restricted in this way are called <b>typed variables</b>.',\n\t\taddition:\n\t\t\t'Use the <b>addition operator</b> to add two numbers together, as well as join two strings or two arrays, and combine two datamaps, two datasets, two changers, or two colours.' +\n\t\t\t' This operator can also combine two hook names, creating a hook name that applies to both sets of hooks.',\n\t\tsubtraction:\n\t\t\t\"Use the <b>subtraction operator</b> to subtract two numbers, as well as create a copy of the array or dataset on the left that doesn't contain values of the array or dataset on the right.\",\n\t\tmultiplication:\n\t\t\t'Use the <b>multiplication operator</b> to multiply two numbers.',\n\t\tdivision: function division(_ref27) {\n\t\t\tvar text = _ref27.text;\n\t\t\treturn ''.concat(\n\t\t\t\ttext === '/'\n\t\t\t\t\t? 'Use the <b>division operator</b> to divide'\n\t\t\t\t\t: 'Use the <b>modulo operator</b> to get the remainder (modulo) from dividing',\n\t\t\t\t' two numbers. Dividing a number by 0 produces an error.'\n\t\t\t);\n\t\t},\n\t\tmacro: function macro(_ref28) {\n\t\t\tvar name = _ref28.name;\n\n\t\t\tif (name === undefined) {\n\t\t\t\treturn 'This macro call is incomplete or erroneously written. Macro calls should consist of `(`, the name (which is case-insensitive and dash-insensitive), `:`, zero or more expressions separated by commas, then `)`, in that order.';\n\t\t\t}\n\n\t\t\tif (name[0] === '_' || name[0] === '$') {\n\t\t\t\treturn 'This is a <b>call to a custom macro stored in the '.concat(\n\t\t\t\t\tname,\n\t\t\t\t\t' variable</b>. Custom macros are created with the `(macro:)` macro, and must be stored in variables in order to be used.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tvar defs = ShortDefs.Macro[insensitiveName(name)];\n\n\t\t\tif (!defs) {\n\t\t\t\treturn 'This is a call to a nonexistent or misspelled macro. This will cause an error.';\n\t\t\t}\n\n\t\t\tvar rt = defs.returnType.toLowerCase();\n\t\t\treturn 'This is a <b>call to the `('\n\t\t\t\t.concat(defs.name, ':)` macro</b>. ')\n\t\t\t\t.concat(\n\t\t\t\t\trt === 'metadata'\n\t\t\t\t\t\t? 'Metadata macros like this should be placed at the very top of the passage, before all other macros.'\n\t\t\t\t\t\t: rt === 'instant' || rt === 'command'\n\t\t\t\t\t\t? 'It produces a <span class=\"cm-harlowe-3-macroName-command\">command</span>, so it should appear in passage code without being connected to a hook.'\n\t\t\t\t\t\t: rt === 'changer'\n\t\t\t\t\t\t? 'It produces a <span class=\"cm-harlowe-3-macroName-changer\">changer</span>, which can be placed to the left of a hook or a command (passage links are commands), or combined with other changers.'\n\t\t\t\t\t\t: rt === 'any' || rt === 'string'\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: 'Since it produces a <span class=\"cm-harlowe-3-macroName-'\n\t\t\t\t\t\t\t\t.concat(rt, '\">')\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\trt,\n\t\t\t\t\t\t\t\t\t'</span>, it should be nested inside another macro call that can use '\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.concat(rt, ' (or any) data.'),\n\t\t\t\t\t\"<code class='harlowe-3-tooltipMacroSignature'>\"\n\t\t\t\t)\n\t\t\t\t.concat(\n\t\t\t\t\tdocsURL(\n\t\t\t\t\t\tdefs.anchor,\n\t\t\t\t\t\t'('\n\t\t\t\t\t\t\t.concat(defs.name, ': ')\n\t\t\t\t\t\t\t.concat(defs.sig, ') -> ')\n\t\t\t\t\t\t\t.concat(defs.returnType)\n\t\t\t\t\t),\n\t\t\t\t\t'</code>'\n\t\t\t\t)\n\t\t\t\t.concat(\n\t\t\t\t\tdefs.aka.length\n\t\t\t\t\t\t? '<div><i>Also known as: '.concat(\n\t\t\t\t\t\t\t\tdefs.aka\n\t\t\t\t\t\t\t\t\t.map(function (alias) {\n\t\t\t\t\t\t\t\t\t\treturn '<code>('.concat(alias, ':)</code>');\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.join(', '),\n\t\t\t\t\t\t\t\t'</i>'\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: '',\n\t\t\t\t\t'</div><div>'\n\t\t\t\t)\n\t\t\t\t.concat(defs['abstract'], '</div>');\n\t\t},\n\t\ttext: function text(_ref29, path) {\n\t\t\tvar _text = _ref29.text;\n\n\t\t\tif (_text.trim()) {\n\t\t\t\tvar insideMacro = path.reduce(function (a, t) {\n\t\t\t\t\treturn a === undefined\n\t\t\t\t\t\t? t.type === 'macro'\n\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t: t.type === 'hook'\n\t\t\t\t\t\t\t? false\n\t\t\t\t\t\t\t: a\n\t\t\t\t\t\t: a;\n\t\t\t\t}, undefined);\n\n\t\t\t\tif (insideMacro) {\n\t\t\t\t\treturn \"This doesn't seem to be valid code.<br>Note that inside macro calls, only other macro calls, data, operators and whitespace are permitted.\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\tvar tooltipElem = document.createElement('div');\n\ttooltipElem.className = 'harlowe-3-tooltip';\n\tvar tooltipAppearDelay = 0;\n\tvar tooltipDismissTicker = 0;\n\tvar tooltipToggleHints = 4;\n\n\tfunction tooltipAppear() {\n\t\tif (tooltipAppearDelay < 1) {\n\t\t\ttooltipElem.style.display = ''; // Dismiss the newly-appeared tooltip after this many mousemove events.\n\n\t\t\ttooltipDismissTicker = 10;\n\t\t} else {\n\t\t\ttooltipAppearDelay -= 1;\n\t\t\trequestAnimationFrame(tooltipAppear);\n\t\t}\n\t}\n\n\tfunction Tooltips(doc, docData) {\n\t\tvar tree = docData.tree;\n\t\tvar cm = doc.cm;\n\t\ttooltipElem.setAttribute('style', 'display:none');\n\t\tvar cmElem = cm.display.wrapper;\n\t\t/*\n    \tDon't display the tooltip at all under these circumstances.\n    */\n\n\t\tif (\n\t\t\tcmElem.classList.contains('harlowe-3-hideTooltip') ||\n\t\t\tdoc.somethingSelected()\n\t\t) {\n\t\t\ttooltipAppearDelay = 0;\n\t\t\treturn;\n\t\t}\n\n\t\tif (tooltipElem.parentNode !== cmElem) {\n\t\t\tcmElem.append(tooltipElem);\n\t\t\t/*\n      \tIf the tooltipElem is disconnected from the DOM,\n      \tthen so is the previous cmElem to which it was appended.\n      \t.CodeMirror elements are destroyed by Twine 2.3, not detached.\n      \tThis means it is safe to attach the mousemove event to this cmElem.\n      */\n\n\t\t\tcmElem.addEventListener('mousemove', function () {\n\t\t\t\t/*\n        \tOnly reduce the dismiss ticker if the mouse is off the tooltip.\n        */\n\t\t\t\tif (\n\t\t\t\t\ttooltipElem.style.display !== 'none' &&\n\t\t\t\t\t!cmElem.querySelector('.harlowe-3-tooltip:hover')\n\t\t\t\t) {\n\t\t\t\t\ttooltipDismissTicker -= 1;\n\n\t\t\t\t\tif (tooltipDismissTicker <= 0) {\n\t\t\t\t\t\ttooltipElem.style.display = 'none';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tvar cursor = doc.getCursor();\n\t\tvar path = tree.pathAt(doc.indexFromPos(cursor));\n\n\t\tif (!path.length) {\n\t\t\ttooltipAppearDelay = 0;\n\t\t\treturn;\n\t\t}\n\n\t\tvar _path = _slicedToArray(path, 1),\n\t\t\ttoken = _path[0];\n\n\t\tvar message = tooltipMessages[token.type];\n\n\t\tif (typeof message === 'function') {\n\t\t\tmessage = message(token, path);\n\t\t}\n\n\t\tif (message) {\n\t\t\tmessage = message.replace(/`([^`]+)`/g, function (_, inner) {\n\t\t\t\treturn '<code>'.concat(inner, '</code>');\n\t\t\t});\n\t\t\ttooltipElem.innerHTML =\n\t\t\t\tmessage +\n\t\t\t\t(tooltipToggleHints > 0\n\t\t\t\t\t? (tooltipToggleHints--,\n\t\t\t\t\t  '<br><br><i>Use the '.concat(\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tdocument.querySelector(\n\t\t\t\t\t\t\t\t\t'[aria-label^=\"Coding tooltips\"],[title^=\"Coding tooltips\"]'\n\t\t\t\t\t\t\t\t) || {}\n\t\t\t\t\t\t\t).innerHTML || 'tooltip',\n\t\t\t\t\t\t\t' toolbar button to toggle these popups!</i>'\n\t\t\t\t\t  ))\n\t\t\t\t\t: '') +\n\t\t\t\t'<div class=harlowe-3-tooltipTail>';\n\t\t\ttooltipElem.removeAttribute('style');\n\n\t\t\tvar _tooltipElem$getBound = tooltipElem.getBoundingClientRect(),\n\t\t\t\twidth = _tooltipElem$getBound.width;\n\n\t\t\tvar _cmElem$getBoundingCl = cmElem.getBoundingClientRect(),\n\t\t\t\tmaxWidth = _cmElem$getBoundingCl.width;\n\n\t\t\tvar coords = cm.charCoords(cursor, 'local');\n\t\t\tvar gutterWidth = twine23 ? 30 : 0;\n\t\t\tvar tipLeft = Math.min(\n\t\t\t\tmaxWidth - width,\n\t\t\t\tMath.max((coords.left | 0) + gutterWidth - width / 2, gutterWidth)\n\t\t\t);\n\t\t\ttooltipElem.setAttribute(\n\t\t\t\t'style',\n\t\t\t\t'left:'\n\t\t\t\t\t.concat(tipLeft, 'px; top:')\n\t\t\t\t\t.concat(\n\t\t\t\t\t\t(coords.top | 0) +\n\t\t\t\t\t\t\t30 -\n\t\t\t\t\t\t\tcmElem.querySelector('.CodeMirror-scroll').scrollTop,\n\t\t\t\t\t\t'px;'\n\t\t\t\t\t)\n\t\t\t); // Place the tail at the correct location;\n\n\t\t\ttooltipElem.lastChild.setAttribute(\n\t\t\t\t'style',\n\t\t\t\t'left:'.concat(\n\t\t\t\t\tcoords.right -\n\t\t\t\t\t\ttipLeft +\n\t\t\t\t\t\t(twine23 ? (coords.right - coords.left) / 2 + 6 : -12),\n\t\t\t\t\t'px; top:-24px'\n\t\t\t\t)\n\t\t\t);\n\t\t\ttooltipElem.style.display = 'none';\n\t\t\t/*\n      \tTo avoid queueing the tooltipAppear function multiple times with requestAnimationFrame, only call it if\n      \tthe tooltip is not already delayed.\n      */\n\n\t\t\tvar alreadyDelayed = tooltipAppearDelay > 0;\n\t\t\ttooltipAppearDelay = 50;\n\n\t\t\tif (!alreadyDelayed) {\n\t\t\t\ttooltipAppear();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this && this.loaded) {\n\t\tthis.modules.Tooltips = Tooltips;\n\t} else if (!this.window) {\n\t\tthis.Tooltips = Tooltips;\n\t}\n}.call(eval('this')));\n/*jshint strict:true*/\n\n(function () {\n\t'use strict';\n\n\tvar stringify = JSON.stringify,\n\t\tparse = JSON.parse;\n\tvar round = Math.round;\n\tvar panels;\n\tvar cm, Patterns, ToolbarPanel, Utils; // This can only be loaded in TwineJS, not any other place.\n\n\tif (this && this.loaded) {\n\t\tvar _this$modules2 = this.modules;\n\t\tPatterns = _this$modules2.Patterns;\n\t\tUtils = _this$modules2.Utils;\n\t\tToolbarPanel = _this$modules2.ToolbarPanel;\n\t} else if (!this.window) {\n\t\tPatterns = this.Patterns;\n\t\tUtils = this.Utils;\n\t\tToolbarPanel = this.ToolbarPanel;\n\t} // This can't be loaded in the Harlowe docs.\n\telse {\n\t\treturn;\n\t}\n\n\tvar _ToolbarPanel = ToolbarPanel,\n\t\tPanel = _ToolbarPanel.Panel,\n\t\tdataValueRow = _ToolbarPanel.dataValueRow;\n\tvar _Utils2 = Utils,\n\t\ttwine23 = _Utils2.twine23,\n\t\ttoHarloweColour = _Utils2.toHarloweColour,\n\t\ttoCSSColour = _Utils2.toCSSColour,\n\t\tel = _Utils2.el,\n\t\tfontIcon = _Utils2.fontIcon,\n\t\tGCD = _Utils2.GCD,\n\t\tfourDecimals = _Utils2.fourDecimals;\n\t/*\n  \tThese are a couple of convenience routines.\n  */\n\n\tvar $ = 'querySelector';\n\tvar $$ = $ + 'All';\n\tvar ON = 'addEventListener';\n\t/*\n  \tThe Harlowe Toolbar fits above the CodeMirror panel and provides a number of convenience buttons, in the style of forum post editors,\n  \tto ease the new user into the format's language.\n  */\n\n\tvar toolbarElem = el('<div class=\"harloweToolbar\">');\n\t/*\n  \tAll output from the buttons and wizards is from this function, which places Harlowe code into the passage around the selection.\n  \t\"stringify\" indicates whether to convert the wrapped text to a string.\n  */\n\n\tfunction wrapSelection(before, after, sample, innerText) {\n\t\tvar stringify =\n\t\t\targuments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n\t\tif ((before + after).length === 0) {\n\t\t\treturn;\n\t\t}\n\t\t/*\n    \tSome syntax (such as links) directly replaces the current selection entirely. Others\n    \twrap the selection, or, if none exists, the \"Your Text Here\" prompt text.\n    */\n\n\t\tvar wrapped =\n\t\t\tinnerText !== undefined\n\t\t\t\t? innerText\n\t\t\t\t: cm.doc.getSelection() || sample || 'Your Text Here';\n\t\tcm.doc.replaceSelection(\n\t\t\tbefore + (stringify ? stringify : String)(wrapped) + after,\n\t\t\t'around'\n\t\t);\n\t}\n\t/*\n  \tThe mode-switcher function, which changes the displayed panel in the toolbar.\n  */\n\n\tfunction switchPanel(name) {\n\t\tif (typeof name !== 'string') {\n\t\t\tname = 'default';\n\t\t}\n\t\t/*\n    \tTwine 2.4+ doesn't have a default panel.\n    */\n\n\t\tif (!twine23 && name === 'default') {\n\t\t\ttoolbarElem[$$]('.harlowe-3-toolbarPanel').forEach(function (node) {\n\t\t\t\treturn node.remove();\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t/*\n    \tUncheck all checkboxes, return all <select>s to default, and clear all textareas.\n    */\n\n\t\tObject.entries(panels).forEach(function (_ref30) {\n\t\t\tvar _ref31 = _slicedToArray(_ref30, 2),\n\t\t\t\tname2 = _ref31[0],\n\t\t\t\tpanel = _ref31[1];\n\n\t\t\t/*\n      \tLazy-create the panel if it's the one we're switching to and it hasn't been created yet.\n      */\n\t\t\tif (typeof panel === 'function') {\n\t\t\t\tif (name2 === name) {\n\t\t\t\t\tpanel = panels[name2] = panel();\n\t\t\t\t} else return;\n\t\t\t}\n\n\t\t\tpanel[$$]('[type=radio]').forEach(function (node) {\n\t\t\t\treturn (node.checked =\n\t\t\t\t\tnode.parentNode.parentNode[$]('label:first-of-type') ===\n\t\t\t\t\tnode.parentNode);\n\t\t\t});\n\t\t\tpanel[$$]('[type=checkbox]').forEach(function (node) {\n\t\t\t\treturn (node.checked = false);\n\t\t\t});\n\t\t\tpanel[$$]('[type=text]').forEach(function (node) {\n\t\t\t\treturn (node.value = '');\n\t\t\t});\n\t\t\tpanel[$$]('select').forEach(function (node) {\n\t\t\t\tnode.value = node.firstChild.getAttribute('value'); // For dropdowns that involve dropdown rows, hide the rows themselves.\n\n\t\t\t\tvar next = node.nextElementSibling;\n\n\t\t\t\tif (next && next.className.includes('harlowe-3-dropdownRows')) {\n\t\t\t\t\tArray.from(next.children).forEach(function (el) {\n\t\t\t\t\t\tel[\n\t\t\t\t\t\t\t(el.getAttribute('data-value') === node.value\n\t\t\t\t\t\t\t\t? 'remove'\n\t\t\t\t\t\t\t\t: 'set') + 'Attribute'\n\t\t\t\t\t\t]('hidden', '');\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tpanel.onreset && panel.onreset();\n\t\t});\n\n\t\tvar _getComputedStyle = getComputedStyle(toolbarElem),\n\t\t\theight = _getComputedStyle.height;\n\n\t\ttoolbarElem[$$]('.harlowe-3-toolbarPanel').forEach(function (node) {\n\t\t\treturn node.remove();\n\t\t});\n\n\t\tif (twine23) {\n\t\t\t/*\n      \tTouch the maxHeight of the incoming panel, using the computed height of the current panel, to\n      \tanimate its height as it enters.\n      */\n\t\t\tpanels[name].style.maxHeight = height;\n\t\t\t/*\n      \tFor prefilled \"use selection\" input elements, pre-fill with the selected text now.\n      */\n\n\t\t\ttoolbarElem[$$]('[data-use-selection]').forEach(function (node) {\n\t\t\t\treturn (node.value = cm.doc.getSelection());\n\t\t\t}); // Sadly, I think using this setTimeout is necessary to get it to work.\n\t\t\t// \"70vh\" is the absolute maximum height for these panels.\n\n\t\t\tsetTimeout(function () {\n\t\t\t\treturn (panels[name].style.maxHeight = '70vh');\n\t\t\t}, 100);\n\t\t} else {\n\t\t\tpanels[name].classList.add('card-button-card', 'card', 'floating');\n\t\t}\n\n\t\ttoolbarElem.append(panels[name]);\n\t}\n\t/*\n  \tTo work around a circular dependency (involving the Confirm button implementation), ToolbarPanel has wrapSelection and switchPanel injected into it.\n  */\n\n\tToolbarPanel.wrapSelection = wrapSelection;\n\tToolbarPanel.switchPanel = switchPanel;\n\t/*\n  \tA key between Harlowe transition names and their corresponding CSS animation names.\n  */\n\n\tvar t8nPreviewAnims = {\n\t\tdefault: function _default(rev) {\n\t\t\treturn rev ? 'appear step-end' : 'appear';\n\t\t},\n\t\tdissolve: function dissolve() {\n\t\t\treturn 'appear';\n\t\t},\n\t\tshudder: function shudder() {\n\t\t\treturn 'shudder-in';\n\t\t},\n\t\trumble: function rumble() {\n\t\t\treturn 'rumble-in';\n\t\t},\n\t\tzoom: function zoom() {\n\t\t\treturn 'zoom-in';\n\t\t},\n\t\t'slide-left': function slideLeft(rev) {\n\t\t\treturn rev ? 'slide-right' : 'slide-left';\n\t\t},\n\t\t'slide-right': function slideRight(rev) {\n\t\t\treturn rev ? 'slide-left' : 'slide-right';\n\t\t},\n\t\t'slide-up': function slideUp(rev) {\n\t\t\treturn rev ? 'slide-down' : 'slide-up';\n\t\t},\n\t\t'slide-down': function slideDown(rev) {\n\t\t\treturn rev ? 'slide-up' : 'slide-down';\n\t\t},\n\t\tflicker: function flicker() {\n\t\t\treturn 'flicker';\n\t\t},\n\t\tpulse: function pulse() {\n\t\t\treturn 'pulse';\n\t\t},\n\t\tinstant: function instant(rev) {\n\t\t\treturn 'appear step-' + (rev ? 'end' : 'start');\n\t\t},\n\t\t'fade-right': function fadeRight(rev) {\n\t\t\treturn rev ? 'fade-left' : 'fade-right';\n\t\t},\n\t\t'fade-left': function fadeLeft(rev) {\n\t\t\treturn rev ? 'fade-right' : 'fade-left';\n\t\t},\n\t\t'fade-up': function fadeUp(rev) {\n\t\t\treturn rev ? 'fade-down' : 'fade-up';\n\t\t},\n\t\t'fade-down': function fadeDown(rev) {\n\t\t\treturn rev ? 'fade-up' : 'fade-down';\n\t\t},\n\t\tblur: function blur() {\n\t\t\treturn 'blur';\n\t\t}\n\t};\n\tvar t8nNames = [\n\t\t'default',\n\t\t'',\n\t\t'instant',\n\t\t'dissolve',\n\t\t'blur',\n\t\t'rumble',\n\t\t'shudder',\n\t\t'pulse',\n\t\t'zoom',\n\t\t'flicker',\n\t\t'slide-left',\n\t\t'slide-right',\n\t\t'slide-up',\n\t\t'slide-down',\n\t\t'fade-left',\n\t\t'fade-right',\n\t\t'fade-up',\n\t\t'fade-down'\n\t];\n\t/*\n  \tSome frequently used panel elements.\n  */\n\n\tvar remainderOfPassageCheckbox = {\n\t\ttype: 'checkbox',\n\t\ttext: 'Affect the entire remainder of the passage or hook',\n\t\tmodel: function model(m, elem) {\n\t\t\tif (elem[$](':checked')) {\n\t\t\t\tm.wrapStart = '[=\\\n';\n\t\t\t\tm.wrapEnd = '';\n\t\t\t}\n\t\t}\n\t};\n\tvar hookDescription =\n\t\t'A <b>hook</b> is a section of passage prose enclosed in <code>[</code> or <code>]</code>, or preceded with <code>[=</code>.';\n\tvar confirmRow = {\n\t\ttype: 'confirm'\n\t};\n\t/*\n  \tThe Toolbar element consists of a single <div> in which a one of a set of precomputed panel <div>s are inserted. There's a \"default\"\n  \tpanel, plus other panels for specific markup wizards.\n  */\n\n\tpanels = {\n\t\t/*\n    \tThe (text-style:) button's panel. This simply consists of several radio buttons and checkboxes that configure a (text-style:) changer.\n    */\n\t\ttextstyle: (function () {\n\t\t\t/*\n      \tThis big block of styles needs to be kept in sync with (text-style:)'s implementation.\n      */\n\t\t\tvar previewStyles = {\n\t\t\t\tbold: 'font-weight:bold',\n\t\t\t\titalic: 'font-style:italic',\n\t\t\t\tunderline: 'text-decoration: underline',\n\t\t\t\t'double-underline':\n\t\t\t\t\t'text-decoration: underline;text-decoration-style:double',\n\t\t\t\t'wavy-underline':\n\t\t\t\t\t'text-decoration: underline;text-decoration-style:wavy',\n\t\t\t\tstrike: 'text-decoration: line-through',\n\t\t\t\t'double-strike':\n\t\t\t\t\t'text-decoration: line-through;text-decoration-style:double',\n\t\t\t\t'wavy-strike':\n\t\t\t\t\t'text-decoration: line-through;text-decoration-style:wavy',\n\t\t\t\tsuperscript: 'vertical-align:super;font-size:.83em',\n\t\t\t\tsubscript: 'vertical-align:sub;font-size:.83em',\n\t\t\t\tmark: 'background-color: hsla(60, 100%, 50%, 0.6)',\n\t\t\t\toutline:\n\t\t\t\t\t'color:black; text-shadow: -1px -1px 0 white, 1px -1px 0 white, -1px  1px 0 white, 1px  1px 0 white',\n\t\t\t\tshadow: 'text-shadow: 0.08em 0.08em 0.08em white',\n\t\t\t\temboss: 'text-shadow: 0.04em 0.04em 0em white',\n\t\t\t\tcondense: 'letter-spacing:-0.08em',\n\t\t\t\texpand: 'letter-spacing:0.1em',\n\t\t\t\tblur: 'text-shadow: 0em 0em 0.08em white; color:transparent',\n\t\t\t\tblurrier: 'text-shadow: 0em 0em 0.2em white; color:transparent',\n\t\t\t\tsmear:\n\t\t\t\t\t'text-shadow: 0em 0em 0.02em white, -0.2em 0em 0.5em white, 0.2em 0em 0.5em white; color:transparent',\n\t\t\t\tmirror: 'display:inline-block;transform:scaleX(-1)',\n\t\t\t\t'upside-down': 'display:inline-block;transform:scaleY(-1)',\n\t\t\t\ttall: 'display:inline-block;transform:scaleY(1.5) translateY(-0.25ex)',\n\t\t\t\tflat: 'display:inline-block;transform:scaleY(0.5) translateY(0.25ex)',\n\t\t\t\tblink:\n\t\t\t\t\t'animation:harlowe-3-fade-in-out 1s steps(1,end) infinite alternate',\n\t\t\t\t'fade-in-out':\n\t\t\t\t\t'animation:harlowe-3-fade-in-out 2s ease-in-out infinite alternate',\n\t\t\t\trumble:\n\t\t\t\t\t'display:inline-block;animation:harlowe-3-rumble linear 0.1s 0s infinite',\n\t\t\t\tshudder:\n\t\t\t\t\t'display:inline-block;animation:harlowe-3-shudder linear 0.1s 0s infinite',\n\t\t\t\tsway: 'display:inline-block;animation:harlowe-3-sway 5s linear 0s infinite',\n\t\t\t\tbuoy: 'display:inline-block;animation:harlowe-3-buoy 5s linear 0s infinite',\n\t\t\t\tfidget:\n\t\t\t\t\t'display:inline-block;animation:harlowe-3-fidget 60s linear 0s infinite'\n\t\t\t};\n\n\t\t\tfunction model(m, elem) {\n\t\t\t\tvar _m$changerNamed;\n\n\t\t\t\tvar styles = Array.from(elem[$$]('[type=radio]:checked'))\n\t\t\t\t\t.map(function (node) {\n\t\t\t\t\t\treturn node.value;\n\t\t\t\t\t})\n\t\t\t\t\t.filter(function (e) {\n\t\t\t\t\t\treturn e !== 'none';\n\t\t\t\t\t})\n\t\t\t\t\t.concat(\n\t\t\t\t\t\tArray.from(elem[$$]('[type=checkbox]:checked')).map(function (\n\t\t\t\t\t\t\tnode\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn node.parentNode.textContent;\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\n\t\t\t\t(_m$changerNamed = m.changerNamed('text-style')).push.apply(\n\t\t\t\t\t_m$changerNamed,\n\t\t\t\t\t_toConsumableArray(styles.map(stringify))\n\t\t\t\t);\n\n\t\t\t\tm.valid = m.valid || styles.length > 0;\n\t\t\t}\n\n\t\t\treturn Panel(\n\t\t\t\t{\n\t\t\t\t\ttype: 'preview',\n\t\t\t\t\ttext: 'Example text preview',\n\t\t\t\t\tupdate: function update(model, panel) {\n\t\t\t\t\t\tpanel.firstChild.setAttribute(\n\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t'position:relative;' +\n\t\t\t\t\t\t\t\tmodel.changers['text-style']\n\t\t\t\t\t\t\t\t\t.map(function (name) {\n\t\t\t\t\t\t\t\t\t\treturn previewStyles[parse(name)];\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.join(';')\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'small',\n\t\t\t\t\ttext: \"This preview doesn't account for other modifications to this passage's text colour, font, or background, and is meant only for you to examine each of these styles.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'checkboxes',\n\t\t\t\t\tname: 'Font variants',\n\t\t\t\t\tcapitalise: true,\n\t\t\t\t\tbold: true,\n\t\t\t\t\toptions: ['bold', 'italic', 'mark'],\n\t\t\t\t\tmodel: model\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'radios',\n\t\t\t\t\tname: 'Underlines and strikes',\n\t\t\t\t\tcapitalise: true,\n\t\t\t\t\tbold: true,\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t'none',\n\t\t\t\t\t\t'underline',\n\t\t\t\t\t\t'double-underline',\n\t\t\t\t\t\t'wavy-underline',\n\t\t\t\t\t\t'strike',\n\t\t\t\t\t\t'double-strike',\n\t\t\t\t\t\t'wavy-strike'\n\t\t\t\t\t],\n\t\t\t\t\tmodel: model\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'radios',\n\t\t\t\t\tname: 'Superscript and subscript',\n\t\t\t\t\tcapitalise: true,\n\t\t\t\t\tbold: true,\n\t\t\t\t\toptions: ['none', 'superscript', 'subscript'],\n\t\t\t\t\tmodel: model\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'radios',\n\t\t\t\t\tname: 'Outlines',\n\t\t\t\t\tcapitalise: true,\n\t\t\t\t\tbold: true,\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t'none',\n\t\t\t\t\t\t'outline',\n\t\t\t\t\t\t'shadow',\n\t\t\t\t\t\t'emboss',\n\t\t\t\t\t\t'blur',\n\t\t\t\t\t\t'blurrier',\n\t\t\t\t\t\t'smear'\n\t\t\t\t\t],\n\t\t\t\t\tmodel: model\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'radios',\n\t\t\t\t\tname: 'Letter spacing',\n\t\t\t\t\tcapitalise: true,\n\t\t\t\t\tbold: true,\n\t\t\t\t\toptions: ['none', 'condense', 'expand'],\n\t\t\t\t\tmodel: model\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'radios',\n\t\t\t\t\tname: 'Flips and stretches',\n\t\t\t\t\tcapitalise: true,\n\t\t\t\t\tbold: true,\n\t\t\t\t\toptions: ['none', 'mirror', 'upside-down', 'tall', 'flat'],\n\t\t\t\t\tmodel: model\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'radios',\n\t\t\t\t\tname: 'Animations',\n\t\t\t\t\tcapitalise: true,\n\t\t\t\t\tbold: true,\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t'none',\n\t\t\t\t\t\t'blink',\n\t\t\t\t\t\t'fade-in-out',\n\t\t\t\t\t\t'rumble',\n\t\t\t\t\t\t'shudder',\n\t\t\t\t\t\t'sway',\n\t\t\t\t\t\t'buoy',\n\t\t\t\t\t\t'fidget'\n\t\t\t\t\t],\n\t\t\t\t\tmodel: model\n\t\t\t\t},\n\t\t\t\tremainderOfPassageCheckbox,\n\t\t\t\tconfirmRow\n\t\t\t);\n\t\t})(),\n\t\tborders: (function () {\n\t\t\tfunction dropdownControls(orientation, index) {\n\t\t\t\treturn [\n\t\t\t\t\tel('<div><b>'.concat(orientation, '</b></div>')),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\ttext: 'Style:',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t'none',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t'dotted',\n\t\t\t\t\t\t\t'dashed',\n\t\t\t\t\t\t\t'solid',\n\t\t\t\t\t\t\t'double',\n\t\t\t\t\t\t\t'groove',\n\t\t\t\t\t\t\t'ridge',\n\t\t\t\t\t\t\t'inset',\n\t\t\t\t\t\t\t'outset'\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\tvar enabled = el[$]('select').value;\n\t\t\t\t\t\t\tm.changerNamed('b4r').push(stringify(enabled || 'none'));\n\t\t\t\t\t\t\t/*\n            \tThis expando determines if the border is enabled.\n            */\n\n\t\t\t\t\t\t\t(m.borderEnabled = m.borderEnabled || [])[index] = !!enabled;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\ttext: 'Size:',\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\tmin: 0.1,\n\t\t\t\t\t\tmax: 20,\n\t\t\t\t\t\tstep: 0.1,\n\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\tm.changerNamed('b4r-size').push(el[$]('input').value);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-colour',\n\t\t\t\t\t\ttext: 'Colour:',\n\t\t\t\t\t\tvalue: '#ffffff',\n\n\t\t\t\t\t\t/*\n          \tOnly show the border colour panel if this border is enabled.\n          */\n\t\t\t\t\t\tupdate: function update(m, el) {\n\t\t\t\t\t\t\tel.setAttribute(\n\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t!m.borderEnabled[index] ? 'display:none' : ''\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\tvar c = el[$]('[type=color]').value,\n\t\t\t\t\t\t\t\ta = el[$]('[type=range]').value;\n\t\t\t\t\t\t\tm.changerNamed('b4r-colour').push(toHarloweColour(c, a));\n\t\t\t\t\t\t\tm.borderColours = (m.borderColours || []).concat(\n\t\t\t\t\t\t\t\ttoCSSColour(c, a)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\t\t\t/*\n      \tReduces a 4-value array of CSS properties as far as possible.\n      */\n\n\t\t\tfunction reduce4ValueProp(arr) {\n\t\t\t\tif (arr.length === 4 && arr[3] === arr[1]) {\n\t\t\t\t\tarr.pop();\n\t\t\t\t}\n\n\t\t\t\tif (arr.length === 3 && arr[2] === arr[0]) {\n\t\t\t\t\tarr.pop();\n\t\t\t\t}\n\n\t\t\t\tif (arr.length === 2 && arr[1] === arr[0]) {\n\t\t\t\t\tarr.pop();\n\t\t\t\t}\n\n\t\t\t\treturn arr;\n\t\t\t}\n\n\t\t\treturn Panel.apply(\n\t\t\t\tvoid 0,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'preview',\n\t\t\t\t\t\ttext: 'Example border preview',\n\t\t\t\t\t\tupdate: function update(m, panel) {\n\t\t\t\t\t\t\tvar changersObj = m.suppressedChangers || m.changers;\n\t\t\t\t\t\t\tpanel.firstChild.setAttribute(\n\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t'border-style:'\n\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\tchangersObj.b4r\n\t\t\t\t\t\t\t\t\t\t\t? changersObj.b4r.map(parse).join(' ') + ';'\n\t\t\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t/*\n          \tBorder-size is a multiplier on the default Harlowe border (2px).\n          */\n\t\t\t\t\t\t\t\t\t\tchangersObj['b4r-size']\n\t\t\t\t\t\t\t\t\t\t\t? 'border-width:' +\n\t\t\t\t\t\t\t\t\t\t\t\t\tchangersObj['b4r-size'].reduce(function (a, e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn ''.concat(a, ' ').concat(e * 2, 'px');\n\t\t\t\t\t\t\t\t\t\t\t\t\t}, '') +\n\t\t\t\t\t\t\t\t\t\t\t\t\t';'\n\t\t\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\tchangersObj['b4r-colour']\n\t\t\t\t\t\t\t\t\t\t\t? 'border-color:' + m.borderColours.join(' ') + ';'\n\t\t\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t].concat(\n\t\t\t\t\t_toConsumableArray(dropdownControls('Top', 0)),\n\t\t\t\t\t_toConsumableArray(dropdownControls('Right', 1)),\n\t\t\t\t\t_toConsumableArray(dropdownControls('Bottom', 2)),\n\t\t\t\t\t_toConsumableArray(dropdownControls('Left', 3)),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'radios',\n\t\t\t\t\t\t\tname: 'Affect:',\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t'The attached hook',\n\t\t\t\t\t\t\t\t'The remainder of the passage or hook.',\n\t\t\t\t\t\t\t\t'The entire passage.'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\tvar v = el[$]('input:checked');\n\t\t\t\t\t\t\t\tvar index = Array.from(el[$$]('label')).indexOf(v.parentNode);\n\n\t\t\t\t\t\t\t\tif (index >= 2 && Object.keys(m.changers).length) {\n\t\t\t\t\t\t\t\t\tm.suppressedChangers = m.changers;\n\t\t\t\t\t\t\t\t\tm.changers = {};\n\t\t\t\t\t\t\t\t} else if (index === 1) {\n\t\t\t\t\t\t\t\t\tm.wrapStart = '[=\\\n';\n\t\t\t\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'confirm',\n\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t/*\n          \tQuickly check that each of the to-be-constructed changers' values differ from the default,\n          \tand don't create them if not.\n          */\n\n\t\t\t\t\t\t\t\tvar changersObj = m.suppressedChangers || m.changers;\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t'b4r',\n\t\t\t\t\t\t\t\t\t\tfunction (e) {\n\t\t\t\t\t\t\t\t\t\t\treturn parse(e) === 'none';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t'b4r-size',\n\t\t\t\t\t\t\t\t\t\tfunction (e) {\n\t\t\t\t\t\t\t\t\t\t\treturn +e === 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t'b4r-colour',\n\t\t\t\t\t\t\t\t\t\tfunction (e) {\n\t\t\t\t\t\t\t\t\t\t\treturn e === 'transparent';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t].forEach(function (_ref32) {\n\t\t\t\t\t\t\t\t\tvar _ref33 = _slicedToArray(_ref32, 2),\n\t\t\t\t\t\t\t\t\t\tname = _ref33[0],\n\t\t\t\t\t\t\t\t\t\ttest = _ref33[1];\n\n\t\t\t\t\t\t\t\t\tchangersObj[name] = reduce4ValueProp(changersObj[name]);\n\n\t\t\t\t\t\t\t\t\tif (changersObj[name].every(test)) {\n\t\t\t\t\t\t\t\t\t\tdelete changersObj[name];\n\n\t\t\t\t\t\t\t\t\t\tif (name === 'b4r') {\n\t\t\t\t\t\t\t\t\t\t\tm.valid = false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (m.valid && m.suppressedChangers) {\n\t\t\t\t\t\t\t\t\tm.wrapStart =\n\t\t\t\t\t\t\t\t\t\t'(enchant:?passage,' +\n\t\t\t\t\t\t\t\t\t\tObject.entries(changersObj)\n\t\t\t\t\t\t\t\t\t\t\t.map(function (_ref34) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _ref35 = _slicedToArray(_ref34, 2),\n\t\t\t\t\t\t\t\t\t\t\t\t\tk = _ref35[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\tv = _ref35[1];\n\n\t\t\t\t\t\t\t\t\t\t\t\treturn '('.concat(k, ':').concat(v.join(','), ')');\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t.join('+') +\n\t\t\t\t\t\t\t\t\t\t')';\n\t\t\t\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t);\n\t\t})(),\n\t\ttextcolor: Panel(\n\t\t\t{\n\t\t\t\ttype: 'preview',\n\t\t\t\ttext: 'Example text preview',\n\t\t\t\tupdate: function update(model, panel) {\n\t\t\t\t\tvar changers = model.suppressedChangers || model.changers;\n\t\t\t\t\tpanel.firstChild.setAttribute(\n\t\t\t\t\t\t'style',\n\t\t\t\t\t\t''\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\tchangers['text-colour']\n\t\t\t\t\t\t\t\t\t? 'color:'.concat(model.textColour, ';')\n\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\tmodel.stops\n\t\t\t\t\t\t\t\t\t? 'background:linear-gradient('\n\t\t\t\t\t\t\t\t\t\t\t.concat(model.angle, 'deg, ')\n\t\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\t\tmodel.stops.map(function (stop) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstop.getAttribute('data-colour') +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t' ' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstop.getAttribute('data-pos') * 100 +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'%'\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t')'\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: changers.bg\n\t\t\t\t\t\t\t\t\t? 'background:'.concat(model.backgroundColour)\n\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'small',\n\t\t\t\ttext: \"This preview doesn't account for other modifications to this passage's text colour or background, and is meant only for you to examine the selected colours.\"\n\t\t\t},\n\t\t\tel('<div><b>Text colour</b></div>'),\n\t\t\t{\n\t\t\t\ttype: 'radiorows',\n\t\t\t\tname: 'txtcolor',\n\t\t\t\toptions: [\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\ttext: 'Default text colour'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\tnew Text('Flat colour'),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'colour',\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tvalue: '#ffffff',\n\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\tvar c = el[$]('[type=color]').value,\n\t\t\t\t\t\t\t\t\ta = el[$]('[type=range]').value;\n\t\t\t\t\t\t\t\tm.changerNamed('text-colour').push(toHarloweColour(c, a));\n\t\t\t\t\t\t\t\tm.textColour = toCSSColour(c, a);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t},\n\t\t\tel('<div><b>Background</b></div>'),\n\t\t\t{\n\t\t\t\ttype: 'radiorows',\n\t\t\t\tname: 'bgcolor',\n\t\t\t\toptions: [\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\ttext: 'Default background',\n\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\tnew Text('Flat colour'),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'colour',\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tvalue: '#000000',\n\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\tvar c = el[$]('[type=color]').value,\n\t\t\t\t\t\t\t\t\ta = el[$]('[type=range]').value;\n\t\t\t\t\t\t\t\tm.changerNamed('bg').push(toHarloweColour(c, a));\n\t\t\t\t\t\t\t\tm.backgroundColour = toCSSColour(c, a);\n\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\tnew Text('Linear gradient'),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'gradient',\n\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\tvar stops = Array.from(el[$$]('.harlowe-3-colourStop')).sort(\n\t\t\t\t\t\t\t\t\tfunction (a, b) {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\ta.getAttribute('data-pos') - b.getAttribute('data-pos')\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif (stops.length > 1) {\n\t\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t\tm.changerNamed('bg').push(\n\t\t\t\t\t\t\t\t\t\t'(gradient: $deg, '.concat(\n\t\t\t\t\t\t\t\t\t\t\tstops.map(function (stop) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\tfourDecimals(stop.getAttribute('data-pos')) +\n\t\t\t\t\t\t\t\t\t\t\t\t\t',' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t(stop.getAttribute('data-harlowe-colour') ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstop.getAttribute('data-colour'))\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t')'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tm.stops = stops;\n\t\t\t\t\t\t\t\t\tm.angle = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tel('<br style=\"height:'.concat(twine23 ? 1 : 4, 'rem\">')),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-range',\n\t\t\t\t\t\t\ttext: 'Angle (deg):',\n\t\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: 359,\n\t\t\t\t\t\t\tstep: 1,\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tif (m.valid) {\n\t\t\t\t\t\t\t\t\tvar bg = m.changerNamed('bg');\n\t\t\t\t\t\t\t\t\tm.angle = +elem[$]('input').value;\n\t\t\t\t\t\t\t\t\tbg[0] = bg[0].replace('$deg', m.angle);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'radios',\n\t\t\t\tname: 'Affect:',\n\t\t\t\toptions: [\n\t\t\t\t\t'The attached hook',\n\t\t\t\t\t'The remainder of the passage or hook.',\n\t\t\t\t\t'The entire passage.',\n\t\t\t\t\t'The entire page.'\n\t\t\t\t],\n\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\tvar v = el[$]('input:checked');\n\t\t\t\t\tvar index = Array.from(el[$$]('label')).indexOf(v.parentNode);\n\t\t\t\t\tvar changers = Object.entries(m.changers);\n\n\t\t\t\t\tif (index >= 2 && changers.length) {\n\t\t\t\t\t\tm.wrapStart =\n\t\t\t\t\t\t\t'(enchant:?pa' +\n\t\t\t\t\t\t\t(index === 2 ? 'ssa' : '') +\n\t\t\t\t\t\t\t'ge,' +\n\t\t\t\t\t\t\tchangers\n\t\t\t\t\t\t\t\t.map(function (_ref36) {\n\t\t\t\t\t\t\t\t\tvar _ref37 = _slicedToArray(_ref36, 2),\n\t\t\t\t\t\t\t\t\t\tk = _ref37[0],\n\t\t\t\t\t\t\t\t\t\tv = _ref37[1];\n\n\t\t\t\t\t\t\t\t\treturn '('.concat(k, ':').concat(v.join(','), ')');\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('+') +\n\t\t\t\t\t\t\t')';\n\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\tm.suppressedChangers = m.changers;\n\t\t\t\t\t\tm.changers = {};\n\t\t\t\t\t} else if (index === 1) {\n\t\t\t\t\t\tm.wrapStart = '[=\\\n';\n\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tconfirmRow\n\t\t),\n\n\t\t/*\n    \tThe [[Link]] button's panel. This configures the link syntax, plus a (t8n-depart:) and/or (t8n-arrive:) macro to attach to it.\n    */\n\t\tpassagelink: (function () {\n\t\t\tvar passageT8nPreviews = function passageT8nPreviews() {\n\t\t\t\treturn [\n\t\t\t\t\tel('<br>'),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\ttext: 'Departing transition: ',\n\t\t\t\t\t\toptions: t8nNames,\n\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\tvar _el$$ = el[$]('select'),\n\t\t\t\t\t\t\t\tvalue = _el$$.value;\n\n\t\t\t\t\t\t\tif (value !== '') {\n\t\t\t\t\t\t\t\tm.changerNamed('t8n-depart').push(stringify(value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\ttext: 'Arriving transition: ',\n\t\t\t\t\t\toptions: t8nNames,\n\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\tvar _el$$2 = el[$]('select'),\n\t\t\t\t\t\t\t\tvalue = _el$$2.value;\n\n\t\t\t\t\t\t\tif (value !== '') {\n\t\t\t\t\t\t\t\tm.changerNamed('t8n-arrive').push(stringify(value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\ttext: 'Transition time (sec): ',\n\t\t\t\t\t\tvalue: 0.8,\n\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\tmax: 999,\n\t\t\t\t\t\tstep: 0.1,\n\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\tvar value = elem[$]('input').value;\n\t\t\t\t\t\t\t/*\n            \tThis uses the hardcoded default time value.\n            */\n\n\t\t\t\t\t\t\tif (+value !== 0.8) {\n\t\t\t\t\t\t\t\tm.changerNamed('t8n-time').push(value + 's');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 't8n-preview',\n\t\t\t\t\t\ttext: 'Departing Text',\n\t\t\t\t\t\ttext2: 'Arriving Text',\n\t\t\t\t\t\tupdate: function update(m, el) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tm.initiator &&\n\t\t\t\t\t\t\t\t!['select', 'div', 'span'].some(function (e) {\n\t\t\t\t\t\t\t\t\treturn e === m.initiator.tagName.toLowerCase();\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar t8nName1 =\n\t\t\t\t\t\t\t\t'harlowe-3-' +\n\t\t\t\t\t\t\t\tt8nPreviewAnims[\n\t\t\t\t\t\t\t\t\tm.changers['t8n-depart']\n\t\t\t\t\t\t\t\t\t\t? parse(m.changers['t8n-depart'][0])\n\t\t\t\t\t\t\t\t\t\t: 'default'\n\t\t\t\t\t\t\t\t](true);\n\t\t\t\t\t\t\tvar t8nName2 =\n\t\t\t\t\t\t\t\t'harlowe-3-' +\n\t\t\t\t\t\t\t\tt8nPreviewAnims[\n\t\t\t\t\t\t\t\t\tm.changers['t8n-arrive']\n\t\t\t\t\t\t\t\t\t\t? parse(m.changers['t8n-arrive'][0])\n\t\t\t\t\t\t\t\t\t\t: 'default'\n\t\t\t\t\t\t\t\t](false);\n\t\t\t\t\t\t\tvar t8nTime = m.changers['t8n-time']\n\t\t\t\t\t\t\t\t? m.changers['t8n-time'][0]\n\t\t\t\t\t\t\t\t: '0.8s';\n\t\t\t\t\t\t\tvar span1 = el.firstChild;\n\t\t\t\t\t\t\tvar span2 = el.lastChild;\n\t\t\t\t\t\t\tspan1.setAttribute(\n\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t'animation:'\n\t\t\t\t\t\t\t\t\t.concat(t8nName1, ' reverse ')\n\t\t\t\t\t\t\t\t\t.concat(t8nTime, ' 1;')\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tspan2.setAttribute(\n\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t'animation:'.concat(t8nName2, ' ').concat(t8nTime, ' 1;')\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t/*\n            \tFlicker the <span>s to trigger a restart of the animation.\n            */\n\n\t\t\t\t\t\t\tspan1.remove();\n\t\t\t\t\t\t\tspan2.remove();\n\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\treturn el.append(span1, span2);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t};\n\n\t\t\treturn Panel(\n\t\t\t\t{\n\t\t\t\t\ttype: 'radiorows',\n\t\t\t\t\tname: 'whichclick',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\t\t\ttext: 'Create a hyperlink, with this text:',\n\t\t\t\t\t\t\t\tplaceholder: \"Link text (can't be empty)\",\n\t\t\t\t\t\t\t\tuseSelection: true,\n\t\t\t\t\t\t\t\twidth: '50%',\n\t\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\t\tvar text = elem[$]('input').value;\n\n\t\t\t\t\t\t\t\t\tif (text.length > 0) {\n\t\t\t\t\t\t\t\t\t\tm.linkText = text;\n\t\t\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\t\ttext: 'Allow the entire page to be clicked.',\n\t\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\t\tm.changerNamed('click').push('?page');\n\t\t\t\t\t\t\t\t\tm.clickPage = true;\n\t\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\ttext: 'This will place a faint blue border around the edges of the page, and change the mouse cursor to the hand pointer, until it is clicked.'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\ttext: '<b>When it is clicked, perform this action:</b>'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'radiorows',\n\t\t\t\t\tname: 'passagelink',\n\t\t\t\t\tupdate: function update(m, el) {\n\t\t\t\t\t\t// Disable the \"cycling link\" option if \"click page\" is selected...\n\t\t\t\t\t\tel.lastChild.firstChild[\n\t\t\t\t\t\t\t(m.clickPage ? 'set' : 'remove') + 'Attribute'\n\t\t\t\t\t\t]('disabled', ''); // ...And deselect it if it's selected.\n\n\t\t\t\t\t\tif (m.clickPage && el.lastChild.firstChild.checked) {\n\t\t\t\t\t\t\tel.firstChild.firstChild.click();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-passage-textarea',\n\t\t\t\t\t\t\t\ttext: 'Go to this passage:',\n\t\t\t\t\t\t\t\twidth: '70%',\n\t\t\t\t\t\t\t\tplaceholder: 'Passage name',\n\t\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\t\tvar name = elem[$]('input').value;\n\n\t\t\t\t\t\t\t\t\tif (!name.length) {\n\t\t\t\t\t\t\t\t\t\tm.valid = false;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ('click' in m.changers) {\n\t\t\t\t\t\t\t\t\t\tdelete m.changers.click;\n\t\t\t\t\t\t\t\t\t\tm.wrapStart = '(click-goto:?page,' + stringify(name) + ')';\n\t\t\t\t\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t![']]', '->', '<-'].some(function (str) {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\tname.includes(str) ||\n\t\t\t\t\t\t\t\t\t\t\t\t(m.linkText && m.linkText.includes(str))\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tm.wrapStart = '[[' + m.linkText;\n\t\t\t\t\t\t\t\t\t\tm.wrapEnd = '->' + name + ']]';\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tm.wrapStart = '(link-goto:' + stringify(m.linkText) + ',';\n\t\t\t\t\t\t\t\t\t\tm.wrapEnd = stringify(name) + ')';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tm.innerText = '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t].concat(_toConsumableArray(passageT8nPreviews())),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\t\ttext: 'Undo the current turn, returning to the previous passage.',\n\t\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\t\tif ('click' in m.changers) {\n\t\t\t\t\t\t\t\t\t\tm.wrapStart = '(click-undo:' + m.changers.click + ')';\n\t\t\t\t\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\t\t\t\t\tdelete m.changers.click;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tm.changerNamed('link-undo').push(stringify(m.linkText));\n\t\t\t\t\t\t\t\t\t\tm.wrapStart = '';\n\t\t\t\t\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t].concat(_toConsumableArray(passageT8nPreviews())),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\t\t\ttext: 'Reveal ',\n\t\t\t\t\t\t\t\toptions: ['an attached hook.', 'the remainder of the passage.'],\n\t\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\t\tif (elem[$]('select').value) {\n\t\t\t\t\t\t\t\t\t\tm.wrapStart = '[=\\\n';\n\t\t\t\t\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tel('<br>'),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\ttext: '(' + hookDescription + ')'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\t\t\ttext: 'Revealed text transition: ',\n\t\t\t\t\t\t\t\toptions: t8nNames,\n\t\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\t\tvar _el$$3 = el[$]('select'),\n\t\t\t\t\t\t\t\t\t\tvalue = _el$$3.value;\n\n\t\t\t\t\t\t\t\t\tif (value !== '') {\n\t\t\t\t\t\t\t\t\t\tm.changerNamed('t8n').push(stringify(value));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\t\t\ttext: 'Transition time (sec): ',\n\t\t\t\t\t\t\t\tvalue: 0.8,\n\t\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\t\tmax: 999,\n\t\t\t\t\t\t\t\tstep: 0.1,\n\t\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\t\tvar value = elem[$]('input').value;\n\t\t\t\t\t\t\t\t\t/*\n            \tThis uses the hardcoded default time value.\n            */\n\n\t\t\t\t\t\t\t\t\tif (+value !== 0.8) {\n\t\t\t\t\t\t\t\t\t\tm.changerNamed('t8n-time').push(value + 's');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 't8n-preview',\n\t\t\t\t\t\t\t\ttext2: 'Revealed Text',\n\t\t\t\t\t\t\t\tupdate: function update(m, el) {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tm.initiator &&\n\t\t\t\t\t\t\t\t\t\t!['select', 'div', 'span'].some(function (e) {\n\t\t\t\t\t\t\t\t\t\t\treturn e === m.initiator.tagName.toLowerCase();\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar t8nName =\n\t\t\t\t\t\t\t\t\t\t'harlowe-3-' +\n\t\t\t\t\t\t\t\t\t\tt8nPreviewAnims[\n\t\t\t\t\t\t\t\t\t\t\tm.changers.t8n ? parse(m.changers.t8n[0]) : 'default'\n\t\t\t\t\t\t\t\t\t\t](false);\n\t\t\t\t\t\t\t\t\tvar t8nTime = m.changers['t8n-time']\n\t\t\t\t\t\t\t\t\t\t? m.changers['t8n-time'][0]\n\t\t\t\t\t\t\t\t\t\t: '0.8s';\n\t\t\t\t\t\t\t\t\tvar span = el.lastChild;\n\t\t\t\t\t\t\t\t\tspan.setAttribute(\n\t\t\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t\t\t'animation:'.concat(t8nName, ' ').concat(t8nTime, ' 1;')\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t/*\n            \tFlicker the <span> to trigger a restart of the animation.\n            */\n\n\t\t\t\t\t\t\t\t\tspan.remove();\n\t\t\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\t\t\treturn el.append(span);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'radiorows',\n\t\t\t\t\t\t\t\tname: 'linkReveal',\n\t\t\t\t\t\t\t\tupdate: function update(m, el) {\n\t\t\t\t\t\t\t\t\tel[$$]('input').forEach(function (e) {\n\t\t\t\t\t\t\t\t\t\treturn e[(m.clickPage ? 'set' : 'remove') + 'Attribute'](\n\t\t\t\t\t\t\t\t\t\t\t'disabled',\n\t\t\t\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\t\t\t\t\ttext: \"Then remove the link's own text.\",\n\t\t\t\t\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!m.clickPage) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tm.changerNamed('link').push(stringify(m.linkText));\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\t\t\t\t\ttext: \"Then unlink the link's own text.\",\n\t\t\t\t\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!m.clickPage) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tm.changerNamed('link-reveal').push(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstringify(m.linkText)\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\t\t\t\t\ttext: 'Re-run the hook each time the link is clicked.',\n\t\t\t\t\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!m.clickPage) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tm.changerNamed('link-rerun').push(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstringify(m.linkText)\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\t\t\t\t\ttext: 'Repeat the hook each time the link is clicked.',\n\t\t\t\t\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!m.clickPage) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tm.changerNamed('link-repeat').push(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstringify(m.linkText)\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\t\ttext: \"Cycle the link's text to the next alternative in a list.\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tel('<br>'),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'textarea-rows',\n\t\t\t\t\t\t\t\tnonZeroRows: true,\n\t\t\t\t\t\t\t\tplaceholder: \"Link text (can't be empty)\",\n\t\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\t\tvar els = [m.linkText].concat(\n\t\t\t\t\t\t\t\t\t\tArray.from(el[$$]('input')).map(function (el) {\n\t\t\t\t\t\t\t\t\t\t\treturn el.value;\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tif (!m.clickPage && els.every(Boolean)) {\n\t\t\t\t\t\t\t\t\t\tm.wrapStart = '(cycling-link:'.concat(\n\t\t\t\t\t\t\t\t\t\t\tels.map(function (e) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn JSON.stringify(e);\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t')'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\t\t\t\t\tm.innerText = '';\n\t\t\t\t\t\t\t\t\t} else if (el.parentNode.firstChild.checked) {\n\t\t\t\t\t\t\t\t\t\tm.valid = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'radios',\n\t\t\t\t\t\t\t\tname: 'Upon reaching the end:',\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t'Loop to the start.',\n\t\t\t\t\t\t\t\t\t'Remove the link.',\n\t\t\t\t\t\t\t\t\t'Unlink the link.'\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\t\tif (!m.valid) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar _el$$4 = el[$]('[type=radio]:checked'),\n\t\t\t\t\t\t\t\t\t\tvalue = _el$$4.value;\n\n\t\t\t\t\t\t\t\t\tif (value[0] === 'U') {\n\t\t\t\t\t\t\t\t\t\tm.wrapStart = m.wrapStart.replace(/^\\(cycling/, '(seq');\n\t\t\t\t\t\t\t\t\t} else if (value[0] === 'R') {\n\t\t\t\t\t\t\t\t\t\tm.wrapStart = m.wrapStart.replace(/\\)$/, ',\"\")');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\tconfirmRow\n\t\t\t);\n\t\t})(),\n\t\tif: Panel(\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: '<b>Only show a section of the passage if this condition is met:</b>'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'radiorows',\n\t\t\t\tname: 'if',\n\t\t\t\toptions: [\n\t\t\t\t\t[\n\t\t\t\t\t\t/*\n      \tThe player visited this passage [exactly] [1] times.\n      */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\t\ttext: 'The player visited this passage',\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t'exactly',\n\t\t\t\t\t\t\t\t'at most',\n\t\t\t\t\t\t\t\t'at least',\n\t\t\t\t\t\t\t\t'anything but',\n\t\t\t\t\t\t\t\t'a multiple of'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tm.changerNamed('if').push(\n\t\t\t\t\t\t\t\t\t'visits' +\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t'': ' is ',\n\t\t\t\t\t\t\t\t\t\t\t'at most': ' <= ',\n\t\t\t\t\t\t\t\t\t\t\t'at least': ' >= ',\n\t\t\t\t\t\t\t\t\t\t\t'anything but': ' is not ',\n\t\t\t\t\t\t\t\t\t\t\t'a multiple of': ' % '\n\t\t\t\t\t\t\t\t\t\t}[elem[$]('select').value]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: 999,\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar ifArgs = m.changerNamed('if');\n\t\t\t\t\t\t\t\tifArgs[0] += elem[$]('input').value;\n\n\t\t\t\t\t\t\t\tif (ifArgs[0].includes(' % ')) {\n\t\t\t\t\t\t\t\t\tifArgs[0] += ' is 0'; // Replace \"% 2 is 0\" with \"is an even\"\n\n\t\t\t\t\t\t\t\t\tifArgs[0] = ifArgs[0].replace(' % 2 is 0', ' is an even');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnew Text(' times.')\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t/*\n      \tIt's an [even] numbered visit.\n      */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\t\ttext: 'The player has now visited this passage an',\n\t\t\t\t\t\t\toptions: ['even', 'odd'],\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tm.changerNamed('if').push(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'': 'visits is an even',\n\t\t\t\t\t\t\t\t\t\todd: 'visits is an odd'\n\t\t\t\t\t\t\t\t\t}[elem[$]('select').value]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnew Text(' number of times.')\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t/*\n      \t[1] seconds have passed since this passage was entered.\n      */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tvalue: 2,\n\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\tmax: 999,\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tm.changerNamed('after').push(\n\t\t\t\t\t\t\t\t\t''.concat(elem[$]('input').value, 's')\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnew Text(' seconds have passed since this passage was entered.')\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t/*\n      \tThis passage [___] was visited [exactly] [2] times.\n      */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\t\twidth: '30%',\n\t\t\t\t\t\t\ttext: 'The passage ',\n\t\t\t\t\t\t\tplaceholder: 'Passage name',\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar v = elem[$]('input').value;\n\n\t\t\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\t\t\tm.changerNamed('if').push(\n\t\t\t\t\t\t\t\t\t\t'(history: where its name contains ' +\n\t\t\t\t\t\t\t\t\t\t\tstringify(v) +\n\t\t\t\t\t\t\t\t\t\t\t\")'s length\"\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\t\ttext: 'was visited ',\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t'exactly',\n\t\t\t\t\t\t\t\t'at most',\n\t\t\t\t\t\t\t\t'at least',\n\t\t\t\t\t\t\t\t'anything but',\n\t\t\t\t\t\t\t\t'a multiple of'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tm.changerNamed('if')[0] += {\n\t\t\t\t\t\t\t\t\t'': ' is ',\n\t\t\t\t\t\t\t\t\t'at most': ' <= ',\n\t\t\t\t\t\t\t\t\t'at least': ' >= ',\n\t\t\t\t\t\t\t\t\t'anything but': ' is not ',\n\t\t\t\t\t\t\t\t\t'a multiple of': ' % '\n\t\t\t\t\t\t\t\t}[elem[$]('select').value];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\tmax: 999,\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar ifArgs = m.changerNamed('if');\n\t\t\t\t\t\t\t\tifArgs[0] += elem[$]('input').value;\n\n\t\t\t\t\t\t\t\tif (ifArgs[0].includes(' % ')) {\n\t\t\t\t\t\t\t\t\tifArgs[0] += ' is 0'; // Replace \"% 2 is 0\" with \"is even\"\n\n\t\t\t\t\t\t\t\t\tifArgs[0] = ifArgs[0].replace(' % 2 is 0', ' is even');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnew Text(' times.')\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t/*\n      \tPassages with the tag [___] were visited [exactly] [2] times.\n      */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\t\twidth: '20%',\n\t\t\t\t\t\t\ttext: 'Passages with the tag ',\n\t\t\t\t\t\t\tplaceholder: 'Tag name',\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar v = elem[$]('input').value;\n\n\t\t\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\t\t\tm.changerNamed('if').push(\n\t\t\t\t\t\t\t\t\t\t\"(history: where (passage:it)'s tags contains \" +\n\t\t\t\t\t\t\t\t\t\t\tstringify(v) +\n\t\t\t\t\t\t\t\t\t\t\t\")'s length\"\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\t\ttext: 'were visited ',\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t'exactly',\n\t\t\t\t\t\t\t\t'at most',\n\t\t\t\t\t\t\t\t'at least',\n\t\t\t\t\t\t\t\t'anything but',\n\t\t\t\t\t\t\t\t'a multiple of'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar v = elem[$]('select').value;\n\t\t\t\t\t\t\t\tm.changerNamed('if')[0] += {\n\t\t\t\t\t\t\t\t\t'': ' is ',\n\t\t\t\t\t\t\t\t\t'at most': ' <= ',\n\t\t\t\t\t\t\t\t\t'at least': ' >= ',\n\t\t\t\t\t\t\t\t\t'anything but': ' is not ',\n\t\t\t\t\t\t\t\t\t'a multiple of': ' % '\n\t\t\t\t\t\t\t\t}[v];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\tmax: 999,\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar ifArgs = m.changerNamed('if');\n\t\t\t\t\t\t\t\tifArgs[0] += elem[$]('input').value;\n\n\t\t\t\t\t\t\t\tif (ifArgs[0].includes(' % ')) {\n\t\t\t\t\t\t\t\t\tifArgs[0] += ' is 0'; // Replace \"% 2 is 0\" with \"is even\"\n\n\t\t\t\t\t\t\t\t\tifArgs[0] = ifArgs[0].replace(' % 2 is 0', ' is even');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnew Text(' times.')\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t/*\n      \tThere are no more interactable elements in the passage.\n      */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\ttext: 'There are no more interactable elements in the passage.',\n\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\tm.changerNamed('more');\n\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\ttext:\n\t\t\t\t\t\t\t\t\"Interactable elements are link, mouseover, or mouseout areas. If you're using links that reveal \" +\n\t\t\t\t\t\t\t\t'additional lines of prose and then remove or unlink themselves, this will reveal the attached text when all of those are gone.'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t/*\n      \tThe variable [___] [equals] this expression [______]\n      */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\t\ttext: 'The variable ',\n\t\t\t\t\t\t\toptions: ['$', '_'],\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tm.variable = elem[$]('select').value ? '_' : '$';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\t\twidth: '25%',\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tplaceholder: 'Variable name',\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar v = elem[$]('input').value;\n\n\t\t\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tRegExp('^' + Patterns.validPropertyName + '$').exec(v) &&\n\t\t\t\t\t\t\t\t\t\t!RegExp(/^\\d/).exec(v)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tm.variable += v;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t'is',\n\t\t\t\t\t\t\t\t'is not',\n\t\t\t\t\t\t\t\t'is greater than',\n\t\t\t\t\t\t\t\t'is less than',\n\t\t\t\t\t\t\t\t'contains',\n\t\t\t\t\t\t\t\t'is in'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar v = elem[$]('select').value;\n\t\t\t\t\t\t\t\tm.operator =\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'is greater than': '>',\n\t\t\t\t\t\t\t\t\t\t'is less than': '<',\n\t\t\t\t\t\t\t\t\t\t'': 'is'\n\t\t\t\t\t\t\t\t\t}[v] || v;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnew Text('a value.'),\n\t\t\t\t\t\tel('<br>'),\n\t\t\t\t\t\tdataValueRow(),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tm.expression !== undefined &&\n\t\t\t\t\t\t\t\t\tm.expression !== '' &&\n\t\t\t\t\t\t\t\t\tm.operator &&\n\t\t\t\t\t\t\t\t\tm.variable &&\n\t\t\t\t\t\t\t\t\t!m.invalidSubrow\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tm.changerNamed('if').push(\n\t\t\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t\t\t\t\t.concat(m.variable, ' ')\n\t\t\t\t\t\t\t\t\t\t\t.concat(m.operator, ' ')\n\t\t\t\t\t\t\t\t\t\t\t.concat(m.expression)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'checkbox',\n\t\t\t\ttext: \"Also, only if the previous (if:), (else-if:) or (unless:) hook's condition wasn't fulfilled.\",\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tif (elem[$](':checked')) {\n\t\t\t\t\t\tif ('if' in m.changers) {\n\t\t\t\t\t\t\tvar _m$changerNamed2;\n\n\t\t\t\t\t\t\t(_m$changerNamed2 = m.changerNamed('else-if')).push.apply(\n\t\t\t\t\t\t\t\t_m$changerNamed2,\n\t\t\t\t\t\t\t\t_toConsumableArray(m.changerNamed('if'))\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tdelete m.changers['if'];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tm.changerNamed('else');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tremainderOfPassageCheckbox,\n\t\t\tconfirmRow\n\t\t),\n\t\thook: Panel(\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext:\n\t\t\t\t\thookDescription +\n\t\t\t\t\t' The main purpose of hooks is that they can be visually or textually altered by special data values called <b>changers</b>. Changers are usually placed in front of hooks to change them.',\n\t\t\t\tmodel: function model(m) {\n\t\t\t\t\tm.wrapStart = '[';\n\t\t\t\t\tm.wrapEnd = ']';\n\t\t\t\t\tm.valid = true;\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'textarea',\n\t\t\t\twidth: '25%',\n\t\t\t\ttext: 'Hook name (letters, numbers and underscores only):',\n\t\t\t\tplaceholder: 'Hook name',\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tvar v = elem[$]('input').value;\n\n\t\t\t\t\tif (v) {\n\t\t\t\t\t\tif (RegExp('^' + Patterns.validPropertyName + '$').exec(v)) {\n\t\t\t\t\t\t\tm.wrapStart = '|' + v + '>[';\n\t\t\t\t\t\t\tm.hookName = v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tm.valid = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: '',\n\t\t\t\tupdate: function update(m, elem) {\n\t\t\t\t\tvar name = (m.hookName || '').toLowerCase();\n\n\t\t\t\t\tif (name) {\n\t\t\t\t\t\tif (['link', 'page', 'passage', 'sidebar'].includes(name)) {\n\t\t\t\t\t\t\telem.innerHTML = 'The hook name <b><code>?'\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t'</code></b> is <b>reserved</b> by Harlowe. It refers to <b>'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\tname === 'link'\n\t\t\t\t\t\t\t\t\t\t? 'all of the links in the passage'\n\t\t\t\t\t\t\t\t\t\t: name === 'page'\n\t\t\t\t\t\t\t\t\t\t? 'the entire HTML page'\n\t\t\t\t\t\t\t\t\t\t: name === 'passage'\n\t\t\t\t\t\t\t\t\t\t? \"the element that contains the current passage's text\"\n\t\t\t\t\t\t\t\t\t\t: name === 'sidebar'\n\t\t\t\t\t\t\t\t\t\t? \"the passage's sidebar, containing the undo/redo icons\"\n\t\t\t\t\t\t\t\t\t\t: 'unknown',\n\t\t\t\t\t\t\t\t\t'</b>.'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telem.innerHTML =\n\t\t\t\t\t\t\t\t'You can refer to this hook (and every other one with this name) using the code <b><code>?'.concat(\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t'</code></b>.'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.innerHTML =\n\t\t\t\t\t\t\t'Hook names are optional, but giving a hook a nametag allows it to be remotely altered using macros like <code>(click:)</code>, <code>(replace:)</code>, or <code>(enchant:)</code>. ' +\n\t\t\t\t\t\t\t'You can use these macros elsewhere in the passage, keeping your prose uncluttered.';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tconfirmRow\n\t\t),\n\t\talign: Panel(\n\t\t\t{\n\t\t\t\ttype: 'preview',\n\t\t\t\ttext: 'You can apply left, center and right alignment to your passage text, as well as adjust the margins and width.',\n\t\t\t\tupdate: function update(m, elem) {\n\t\t\t\t\telem.setAttribute(\n\t\t\t\t\t\t'style',\n\t\t\t\t\t\t'width:100%;height:6em;overflow-y:hidden;'\n\t\t\t\t\t);\n\t\t\t\t\tvar style = 'width:'\n\t\t\t\t\t\t.concat(m.width * 100, '%;margin-left:')\n\t\t\t\t\t\t.concat(m.left * 100, '%;margin-right:')\n\t\t\t\t\t\t.concat(m.right * 100, '%;');\n\n\t\t\t\t\tif (m.align !== 'center') {\n\t\t\t\t\t\tstyle += 'text-align:' + m.align + ';';\n\t\t\t\t\t}\n\n\t\t\t\t\telem.firstChild.setAttribute('style', 'display:block;' + style);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'inline-range',\n\t\t\t\ttext: 'Placement: ',\n\t\t\t\tvalue: 0,\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 10,\n\t\t\t\tstep: 1,\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tm.placement = elem[$]('input').value / 10;\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'inline-range',\n\t\t\t\ttext: 'Width: ',\n\t\t\t\tvalue: 5,\n\t\t\t\tmin: 1,\n\t\t\t\tmax: 10,\n\t\t\t\tstep: 1,\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tm.width = elem[$]('input').value / 10;\n\t\t\t\t\tvar area = 1 - m.width;\n\t\t\t\t\tm.left = area * m.placement;\n\t\t\t\t\tm.right = area * (1 - m.placement);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'radios',\n\t\t\t\tname: 'Alignment',\n\t\t\t\tcapitalise: true,\n\t\t\t\toptions: ['left', 'center', 'justify', 'right'],\n\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\tm.align = el[$]('input:checked').value;\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'checkbox',\n\t\t\t\ttext: 'Affect the entire remainder of the passage',\n\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\tvar remainder = !!el[$](':checked');\n\t\t\t\t\t/*\n        \tIf it's possible to reduce this specific alignment configuration to just the basic aligner markup, do so.\n        */\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tm.width === (m.align === 'center' ? 0.5 : 1) &&\n\t\t\t\t\t\t(!m.left || !m.right) ===\n\t\t\t\t\t\t\t(m.align !== 'center' && m.align !== 'justify')\n\t\t\t\t\t) {\n\t\t\t\t\t\tvar left = round(m.left * 10),\n\t\t\t\t\t\t\tright = round(m.right * 10),\n\t\t\t\t\t\t\tgcd = GCD(left, right),\n\t\t\t\t\t\t\taligner =\n\t\t\t\t\t\t\t\tm.align === 'left'\n\t\t\t\t\t\t\t\t\t? '<=='\n\t\t\t\t\t\t\t\t\t: m.align === 'right'\n\t\t\t\t\t\t\t\t\t? '==>'\n\t\t\t\t\t\t\t\t\t: '='.repeat(left / gcd) +\n\t\t\t\t\t\t\t\t\t  (left ? '>' : '') +\n\t\t\t\t\t\t\t\t\t  (right ? '<' : '') +\n\t\t\t\t\t\t\t\t\t  '='.repeat(right / gcd);\n\n\t\t\t\t\t\tif (remainder) {\n\t\t\t\t\t\t\tm.wrapStart = aligner + '\\\n';\n\t\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tm.changerNamed('align').push(stringify(aligner));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _left = round(m.left * 100),\n\t\t\t\t\t\t\twidth = round(m.width * 100),\n\t\t\t\t\t\t\t_right = round(m.right * 100),\n\t\t\t\t\t\t\t_gcd = GCD(width, GCD(_left, _right));\n\n\t\t\t\t\t\tm.changerNamed('align').push(\n\t\t\t\t\t\t\tstringify(\n\t\t\t\t\t\t\t\tm.align === 'left'\n\t\t\t\t\t\t\t\t\t? '<=='\n\t\t\t\t\t\t\t\t\t: m.align === 'right'\n\t\t\t\t\t\t\t\t\t? '==>'\n\t\t\t\t\t\t\t\t\t: m.align === 'justify'\n\t\t\t\t\t\t\t\t\t? '<==>'\n\t\t\t\t\t\t\t\t\t: '=><='\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tm.changerNamed('box').push(\n\t\t\t\t\t\t\tstringify(\n\t\t\t\t\t\t\t\t'='.repeat(_left / _gcd) +\n\t\t\t\t\t\t\t\t\t'X'.repeat(width / _gcd) +\n\t\t\t\t\t\t\t\t\t'='.repeat(_right / _gcd)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (remainder) {\n\t\t\t\t\t\t\tm.wrapStart = '[=\\\n';\n\t\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tm.valid = true;\n\t\t\t\t}\n\t\t\t},\n\t\t\tconfirmRow\n\t\t),\n\t\trotate: Panel(\n\t\t\t{\n\t\t\t\ttype: 'preview',\n\t\t\t\ttext: 'Rotated text preview',\n\t\t\t\tupdate: function update(model, panel) {\n\t\t\t\t\tpanel.setAttribute('style', 'height:6em;');\n\t\t\t\t\tvar span = panel[$]('span');\n\t\t\t\t\tvar c = model.changers,\n\t\t\t\t\t\trx = c['text-rotate-x'],\n\t\t\t\t\t\try = c['text-rotate-y'],\n\t\t\t\t\t\trz = c['text-rotate-z'];\n\t\t\t\t\tvar style = 'margin-top:2em;transform:';\n\n\t\t\t\t\tif (rx || ry) {\n\t\t\t\t\t\tstyle += 'perspective(50vw) ';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rx) {\n\t\t\t\t\t\tstyle += 'rotateX('.concat(rx, 'deg) ');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ry) {\n\t\t\t\t\t\tstyle += 'rotateY('.concat(ry, 'deg) ');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rz) {\n\t\t\t\t\t\tstyle += 'rotateZ('.concat(rz, 'deg)');\n\t\t\t\t\t}\n\n\t\t\t\t\tspan.setAttribute('style', style);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'range',\n\t\t\t\ttext: 'Rotation (X axis):',\n\t\t\t\tvalue: 0,\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 359,\n\t\t\t\tstep: 1,\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tvar _elem$$ = elem[$]('input'),\n\t\t\t\t\t\tvalue = _elem$$.value;\n\n\t\t\t\t\tif (+value) {\n\t\t\t\t\t\tm.changerNamed('text-rotate-x').push(value);\n\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'range',\n\t\t\t\ttext: 'Rotation (Y axis):',\n\t\t\t\tvalue: 0,\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 359,\n\t\t\t\tstep: 1,\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tvar _elem$$2 = elem[$]('input'),\n\t\t\t\t\t\tvalue = _elem$$2.value;\n\n\t\t\t\t\tif (+value) {\n\t\t\t\t\t\tm.changerNamed('text-rotate-y').push(value);\n\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'range',\n\t\t\t\ttext: 'Rotation (Z axis):',\n\t\t\t\tvalue: 0,\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 359,\n\t\t\t\tstep: 1,\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tvar _elem$$3 = elem[$]('input'),\n\t\t\t\t\t\tvalue = _elem$$3.value;\n\n\t\t\t\t\tif (+value) {\n\t\t\t\t\t\tm.changerNamed('text-rotate-z').push(value);\n\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tremainderOfPassageCheckbox,\n\t\t\tconfirmRow\n\t\t),\n\t\tcolumns: Panel.apply(\n\t\t\tvoid 0,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttype: 'preview',\n\t\t\t\t\ttext: 'Use columns to lay out two or more spans of prose alongside each other. Each column has its own margins and can occupy a different amount of horizontal space.',\n\t\t\t\t\tupdate: function update(model, panel) {\n\t\t\t\t\t\tpanel.setAttribute(\n\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t'width:90%;display:flex;justify-content:space-between;height:5em;overflow-y:hidden;'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvar columns = model.columns || [];\n\t\t\t\t\t\tvar spans = Array.from(panel[$$]('span'));\n\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar i = 0;\n\t\t\t\t\t\t\ti < Math.max(columns.length, spans.length);\n\t\t\t\t\t\t\ti += 1\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t/*\n          \tRemove excess columns and add missing columns.\n          */\n\t\t\t\t\t\t\tif (i >= columns.length) {\n\t\t\t\t\t\t\t\tspans[i].remove();\n\t\t\t\t\t\t\t} else if (i >= spans.length) {\n\t\t\t\t\t\t\t\tpanel.append(el('<span>' + spans[0].textContent + '</span>'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar totalWidth = columns.reduce(function (a, e) {\n\t\t\t\t\t\t\treturn a + e.width;\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\tArray.from(panel[$$]('span')).forEach(function (span, i) {\n\t\t\t\t\t\t\treturn span.setAttribute(\n\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t'position:relative; font-size:50%; width:'\n\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t(columns[i].width / totalWidth) * 100,\n\t\t\t\t\t\t\t\t\t\t'%;margin-left:'\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.concat(columns[i].left, 'em;margin-right:')\n\t\t\t\t\t\t\t\t\t.concat(columns[i].right, 'em')\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\ttext: 'Columns:',\n\t\t\t\t\toptions: ['1', '2', '3', '4', '5', '6'],\n\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\tm.columns = _toConsumableArray(\n\t\t\t\t\t\t\tArray(+elem[$]('select').value || 1)\n\t\t\t\t\t\t).map(function () {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tleft: 1,\n\t\t\t\t\t\t\t\twidth: 1,\n\t\t\t\t\t\t\t\tright: 1\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t\tm.wrapStart = '';\n\t\t\t\t\t\tm.innerText = '';\n\t\t\t\t\t\tm.wrapEnd = m.columns.length > 1 ? '\\\n|==|' : '';\n\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t},\n\t\t\t\t\tupdate: function update(m, elem) {\n\t\t\t\t\t\t/*\n        \tThis crude function hides all of the unavailable columns' margin and width inputs.\n        */\n\t\t\t\t\t\tArray.from(elem.parentNode[$$]('.harlowe-3-labeledInput')).forEach(\n\t\t\t\t\t\t\tfunction (el) {\n\t\t\t\t\t\t\t\treturn el.removeAttribute('style');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tArray.from(\n\t\t\t\t\t\t\telem.parentNode[$$](\n\t\t\t\t\t\t\t\t'p:nth-of-type('.concat(\n\t\t\t\t\t\t\t\t\tm.columns.length,\n\t\t\t\t\t\t\t\t\t') ~ .harlowe-3-labeledInput'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t).forEach(function (el) {\n\t\t\t\t\t\t\treturn el.setAttribute('style', 'display:none');\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tel('<br>')\n\t\t\t].concat(\n\t\t\t\t_toConsumableArray(\n\t\t\t\t\t[0, 1, 2, 3, 4, 5].reduce(function (a, n) {\n\t\t\t\t\t\treturn a.concat(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\t\t\ttext: 'Column '.concat(n + 1, ' left margin:'),\n\t\t\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\t\tmax: 9,\n\t\t\t\t\t\t\t\tstep: 1,\n\t\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\t\tif (m.columns[n]) {\n\t\t\t\t\t\t\t\t\t\tm.columns[n].left = +el[$]('input').value;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\t\t\ttext: 'Width:',\n\t\t\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\t\tmax: 9,\n\t\t\t\t\t\t\t\tstep: 1,\n\t\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\t\tif (m.columns[n]) {\n\t\t\t\t\t\t\t\t\t\tm.columns[n].width = +el[$]('input').value;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\t\t\ttext: 'Right margin:',\n\t\t\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\t\tmax: 9,\n\t\t\t\t\t\t\t\tstep: 1,\n\t\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\t\tvar col = m.columns[n];\n\n\t\t\t\t\t\t\t\t\tif (col) {\n\t\t\t\t\t\t\t\t\t\tcol.right = +el[$]('input').value;\n\t\t\t\t\t\t\t\t\t\tm.wrapStart += '\\\n'\n\t\t\t\t\t\t\t\t\t\t\t.concat('='.repeat(col.left))\n\t\t\t\t\t\t\t\t\t\t\t.concat('|'.repeat(col.width))\n\t\t\t\t\t\t\t\t\t\t\t.concat('='.repeat(col.right), '\\\nColumn ')\n\t\t\t\t\t\t\t\t\t\t\t.concat(n + 1);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tel('<p>')\n\t\t\t\t\t\t);\n\t\t\t\t\t}, [])\n\t\t\t\t),\n\t\t\t\t[confirmRow]\n\t\t\t)\n\t\t),\n\t\tcollapse: Panel(\n\t\t\t{\n\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\ttext: 'Collapse the whitespace within ',\n\t\t\t\toptions: ['a section of the passage.', 'the remainder of the passage.'],\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tif (elem[$]('select').value) {\n\t\t\t\t\t\tm.wrapStart = '{=\\\n';\n\t\t\t\t\t\tm.wrapEnd = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tm.wrapStart = '{';\n\t\t\t\t\t\tm.wrapEnd = '}';\n\t\t\t\t\t}\n\n\t\t\t\t\tm.valid = true;\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: 'The <b>collapsing markup</b> hides line breaks and reduces sequences of consecutive spaces to just a single space.'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: \"If you wish to include whitespace that's exempt from this, you may include <b>HTML &lt;br&gt; tags</b>, or use the verbatim (Vb) markup.\"\n\t\t\t},\n\t\t\tconfirmRow\n\t\t),\n\t\tbasicValue: Panel(\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext:\n\t\t\t\t\t'Use <b>variables</b> to store <b>data values</b>, either across your story or within a passage.<br>' +\n\t\t\t\t\t\"That data can then be used in the passage, or in other macro calls, by using the variable's name in place of that value.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'textarea',\n\t\t\t\twidth: '25%',\n\t\t\t\ttext: 'Variable name (letters, numbers and underscores only):',\n\t\t\t\tplaceholder: 'Variable name',\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tvar v = elem[$]('input').value;\n\n\t\t\t\t\tif (v) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tRegExp('^' + Patterns.validPropertyName + '$').exec(v) &&\n\t\t\t\t\t\t\t!RegExp(/^\\d/).exec(v)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tm.variableName = v;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdataValueRow(),\n\t\t\t{\n\t\t\t\ttype: 'checkbox',\n\t\t\t\ttext: 'Temp variable (the variable only exists in this passage and hook).',\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tm.sigil = elem[$]('input').checked ? '_' : '$';\n\t\t\t\t\t/*\n        \tPerform the main (set:) construction here.\n        */\n\n\t\t\t\t\tif (m.variableName && m.expression && !m.invalidSubrow) {\n\t\t\t\t\t\tm.wrapStart = '(set: '\n\t\t\t\t\t\t\t.concat(m.sigil)\n\t\t\t\t\t\t\t.concat(m.variableName, ' to ')\n\t\t\t\t\t\t\t.concat(m.expression, ')');\n\t\t\t\t\t\tm.wrapEnd = m.innerText = '';\n\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tm.valid = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: '',\n\t\t\t\tupdate: function update(m, elem) {\n\t\t\t\t\tvar code = m.valid ? ''.concat(m.sigil).concat(m.variableName) : '';\n\t\t\t\t\telem.innerHTML = m.valid\n\t\t\t\t\t\t? '<p>You can refer to this variable using the code <b><code>'.concat(\n\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\t'</code></b>.</p>'\n\t\t\t\t\t\t  ) +\n\t\t\t\t\t\t  '<p>Some types of data values (arrays, datamaps, datasets, strings, colours, gradients, custom macros, and typedvars) are storage containers for other values.<br>' +\n\t\t\t\t\t\t  \"You can access a specific value stored in them using that value's <b>data name</b> (or a string or number value in brackets) by writing <b><code>\"\n\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\t\t\"'s</code></b> <i>name</i>, or <i>name</i> <b><code>of \"\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.concat(code, '</code></b>.</p>') +\n\t\t\t\t\t\t  \"<p>(If you want to display that stored value in the passage, you'll need to give it to a macro, such as <code>(print: \".concat(\n\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\t\"'s </code> <i>name</i><code>)</code>.)</p>\"\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: '';\n\t\t\t\t}\n\t\t\t},\n\t\t\tconfirmRow\n\t\t),\n\n\t\t/*\n    \tWhen bound to a variable, most all of these use 2bind, because that binding more closely fits intuitions about how bindings \"should\" work.\n    */\n\t\tinput: Panel(\n\t\t\t{\n\t\t\t\ttype: 'radiorows',\n\t\t\t\tname: 'inputelement',\n\t\t\t\toptions: [\n\t\t\t\t\t[\n\t\t\t\t\t\tnew Text('Create a text input box.'),\n\t\t\t\t\t\tel('<br>'),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'preview',\n\t\t\t\t\t\t\ttagName: 'textarea',\n\t\t\t\t\t\t\ttext: 'You can type sample text into this preview box.',\n\t\t\t\t\t\t\tupdate: function update(m, elem) {\n\t\t\t\t\t\t\t\telem.setAttribute('style', 'width:100%;height:6em;');\n\t\t\t\t\t\t\t\telem.firstChild.setAttribute(\n\t\t\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t\t\t'display:block;resize:none;font-family:Georgia,serif;border-style:solid;border-color:#fff;color:#fff;' +\n\t\t\t\t\t\t\t\t\t\t'width:'\n\t\t\t\t\t\t\t\t\t\t\t.concat(m.width * 100, '%;margin-left:')\n\t\t\t\t\t\t\t\t\t\t\t.concat(m.left * 100, '%;margin-right:')\n\t\t\t\t\t\t\t\t\t\t\t.concat(m.right * 100, '%;')\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\telem.firstChild.setAttribute('rows', m.rows || 3);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmodel: function model(m) {\n\t\t\t\t\t\t\t\tm.wrapStart = function (m) {\n\t\t\t\t\t\t\t\t\tvar left = round(m.left * 100),\n\t\t\t\t\t\t\t\t\t\twidth = round(m.width * 100),\n\t\t\t\t\t\t\t\t\t\tright = round(m.right * 100),\n\t\t\t\t\t\t\t\t\t\tgcd = GCD(width, GCD(left, right));\n\t\t\t\t\t\t\t\t\treturn '('\n\t\t\t\t\t\t\t\t\t\t.concat('forcedText' in m ? 'force-' : '', 'input-box:')\n\t\t\t\t\t\t\t\t\t\t.concat(m.variable ? '2bind '.concat(m.variable, ',') : '')\n\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\tstringify(\n\t\t\t\t\t\t\t\t\t\t\t\t'='.repeat(left / gcd) +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'X'.repeat(width / gcd) +\n\t\t\t\t\t\t\t\t\t\t\t\t\t'='.repeat(right / gcd)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.concat(m.rows !== 3 ? ',' + m.rows : '')\n\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\t'forcedText' in m\n\t\t\t\t\t\t\t\t\t\t\t\t? ',' + stringify(m.forcedText)\n\t\t\t\t\t\t\t\t\t\t\t\t: m.initialText\n\t\t\t\t\t\t\t\t\t\t\t\t? ',' + stringify(m.initialText)\n\t\t\t\t\t\t\t\t\t\t\t\t: '',\n\t\t\t\t\t\t\t\t\t\t\t')'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tm.wrapEnd = m.innerText = '';\n\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-range',\n\t\t\t\t\t\t\ttext: 'Placement: ',\n\t\t\t\t\t\t\tvalue: 5,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: 10,\n\t\t\t\t\t\t\tstep: 1,\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tm.placement = elem[$]('input').value / 10;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-range',\n\t\t\t\t\t\t\ttext: 'Width: ',\n\t\t\t\t\t\t\tvalue: 5,\n\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\tmax: 10,\n\t\t\t\t\t\t\tstep: 1,\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tm.width = elem[$]('input').value / 10;\n\t\t\t\t\t\t\t\tvar area = 1 - m.width;\n\t\t\t\t\t\t\t\tm.left = area * m.placement;\n\t\t\t\t\t\t\t\tm.right = area * (1 - m.placement);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-number',\n\t\t\t\t\t\t\ttext: 'Rows:',\n\t\t\t\t\t\t\tvalue: 3,\n\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\tmax: 9,\n\t\t\t\t\t\t\tstep: 1,\n\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\tm.rows = +el[$]('input').value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'radiorows',\n\t\t\t\t\t\t\tname: 'inputboxtype',\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\t\t\t\t\twidth: '50%',\n\t\t\t\t\t\t\t\t\t\ttext: 'The box initially contains this text:',\n\t\t\t\t\t\t\t\t\t\tplaceholder: 'Initial text',\n\t\t\t\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\t\t\t\tm.initialText = elem[$]('input').value || '';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\t\t\t\t\twidth: '50%',\n\t\t\t\t\t\t\t\t\t\ttext: 'Force the player to type this text:',\n\t\t\t\t\t\t\t\t\t\tplaceholder: 'Text to display',\n\t\t\t\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\t\t\t\tm.forcedText = elem[$]('input').value || '';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tel(\n\t\t\t\t\t\t\t\t\t\t'<div>Instead of being a normal input box, this will instead slowly write the above text into the box as the player presses keys.</div>'\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\tnew Text('Create a dropdown menu.'),\n\t\t\t\t\t\tel('<br>'),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\ttext: 'Dropdown options (leave blank to make a separator):'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'textarea-rows',\n\t\t\t\t\t\t\tnonZeroRows: true,\n\t\t\t\t\t\t\tplaceholder: 'Option text (leave blank to make a separator)',\n\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\tvar els = Array.from(el[$$]('input')).map(function (el) {\n\t\t\t\t\t\t\t\t\treturn el.value;\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (els.some(Boolean)) {\n\t\t\t\t\t\t\t\t\tm.wrapStart = function (m) {\n\t\t\t\t\t\t\t\t\t\treturn '(dropdown: '\n\t\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\t\tm.variable ? '2bind '.concat(m.variable, ',') : ''\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\t\tels.map(function (e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn stringify(e);\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t')'\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tm.wrapEnd = m.innerText = '';\n\t\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\tnew Text('Create a checkbox.'),\n\t\t\t\t\t\tel('<br>'),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\t\twidth: '50%',\n\t\t\t\t\t\t\ttext: 'Checkbox label:',\n\t\t\t\t\t\t\tplaceholder: 'Label text',\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar labelText = elem[$]('input').value || '';\n\n\t\t\t\t\t\t\t\tif (labelText) {\n\t\t\t\t\t\t\t\t\tm.wrapStart = function (m) {\n\t\t\t\t\t\t\t\t\t\treturn '(checkbox: '\n\t\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\t\tm.variable ? '2bind '.concat(m.variable, ',') : ''\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.concat(stringify(labelText), ')');\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tm.wrapEnd = m.innerText = '';\n\t\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tm.needsVariable = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\tnew Text('Show a dialog box.'),\n\t\t\t\t\t\tel('<br>'),\n\t\t\t\t\t\tel(\n\t\t\t\t\t\t\t\"<div>This dialog box will appear as soon as the macro is displayed. This is best used inside a hook that's only shown if a condition is met.</div>\"\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'textarea',\n\t\t\t\t\t\t\twidth: '80%',\n\t\t\t\t\t\t\ttext: 'Text:',\n\t\t\t\t\t\t\tplaceholder: 'Your text here',\n\t\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\t\tvar text = elem[$]('input').value || '';\n\n\t\t\t\t\t\t\t\tm.wrapStart = function (m) {\n\t\t\t\t\t\t\t\t\treturn '(dialog: '\n\t\t\t\t\t\t\t\t\t\t.concat(m.variable ? 'bind '.concat(m.variable, ',') : '')\n\t\t\t\t\t\t\t\t\t\t.concat(stringify(text), ', ')\n\t\t\t\t\t\t\t\t\t\t.concat(\n\t\t\t\t\t\t\t\t\t\t\tm.links.map(function (e) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn stringify(e);\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t')'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tm.wrapEnd = m.innerText = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'inline-text',\n\t\t\t\t\t\t\ttext: 'Link options:'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'textarea-rows',\n\t\t\t\t\t\t\tnonZeroRows: true,\n\t\t\t\t\t\t\tplaceholder: \"Link text (can't be blank)\",\n\t\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\t\tvar els = Array.from(el[$$]('input')).map(function (el) {\n\t\t\t\t\t\t\t\t\treturn el.value;\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (els.every(Boolean)) {\n\t\t\t\t\t\t\t\t\tm.links = els;\n\t\t\t\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'checkboxrow',\n\t\t\t\ttext: '',\n\t\t\t\tupdate: function update(m, elem) {\n\t\t\t\t\tvar input = elem[$]('input');\n\n\t\t\t\t\tif (m.needsVariable) {\n\t\t\t\t\t\tinput.setAttribute('disabled', true);\n\t\t\t\t\t\tinput.checked = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput.removeAttribute('disabled', true);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\tif (m.needsVariable && !elem[$]('input:checked')) {\n\t\t\t\t\t\tm.valid = false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsubrow: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\ttext: 'Bind this input element to the variable',\n\t\t\t\t\t\toptions: ['$', '_'],\n\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\tm.variable = elem[$]('select').value ? '_' : '$';\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\twidth: '25%',\n\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\tplaceholder: 'Variable name',\n\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\tvar v = elem[$]('input').value;\n\n\t\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tRegExp('^' + Patterns.validPropertyName + '$').exec(v) &&\n\t\t\t\t\t\t\t\t\t!RegExp(/^\\d/).exec(v)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tm.variable += v;\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tm.valid = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tconfirmRow\n\t\t),\n\t\tmacro: Panel(\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext:\n\t\t\t\t\t\"<b>Macros</b> are code used for programming and styling your story. The vast majority of Harlowe's features are available through macros.\" +\n\t\t\t\t\t'<br>All of the built-in Harlowe macros are listed here. For more details, click their signatures to open the documentation.'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'macro-list',\n\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\tvar selected = el[$]('input:checked');\n\n\t\t\t\t\tif (selected) {\n\t\t\t\t\t\tm.wrapStart = '(' + selected.value + ':';\n\t\t\t\t\t\tm.wrapEnd = ')';\n\t\t\t\t\t\tm.innerText = 'Your Code Here';\n\t\t\t\t\t\tm.valid = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tconfirmRow\n\t\t),\n\t\tfind: Panel(\n\t\t\t{\n\t\t\t\ttype: 'scroll-wrapper',\n\t\t\t\tcontents: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\tmultiline: true,\n\t\t\t\t\t\twidth: '30%',\n\t\t\t\t\t\ttext: 'Find:',\n\t\t\t\t\t\tplaceholder: '',\n\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\tm.query = elem[$]('textarea').value;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'buttons',\n\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Previous Result',\n\t\t\t\t\t\t\t\thtml: '<b style=\"font-size:150%\">\\u2191</b>',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn cm.constructor.signal(cm, 'harlowe-3-findNext', -1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Next Result',\n\t\t\t\t\t\t\t\thtml: '<b style=\"font-size:150%\">\\u2193</b>',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn cm.constructor.signal(cm, 'harlowe-3-findNext', 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-dropdown',\n\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t'Everywhere',\n\t\t\t\t\t\t\t'Only in prose',\n\t\t\t\t\t\t\t'Only in code',\n\t\t\t\t\t\t\t'Only in selection'\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmodel: function model(m, el) {\n\t\t\t\t\t\t\tm.onlyIn = el[$]('select').value;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-checkbox',\n\t\t\t\t\t\ttext: 'Match Case',\n\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\tm.matchCase = elem && elem[$]('input').checked;\n\t\t\t\t\t\t\tcm.constructor.signal(cm, 'harlowe-3-find', m);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tel('<br>'),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inline-textarea',\n\t\t\t\t\t\tmultiline: true,\n\t\t\t\t\t\twidth: '30%',\n\t\t\t\t\t\ttext: 'Replace:',\n\t\t\t\t\t\tplaceholder: '',\n\t\t\t\t\t\tmodel: function model(m, elem) {\n\t\t\t\t\t\t\tm.replaceQuery = elem[$]('textarea').value;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'buttons',\n\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Replace',\n\t\t\t\t\t\t\t\thtml: 'Replace',\n\t\t\t\t\t\t\t\tonClick: function onClick(_ref38) {\n\t\t\t\t\t\t\t\t\tvar target = _ref38.target;\n\t\t\t\t\t\t\t\t\treturn cm.constructor.signal(\n\t\t\t\t\t\t\t\t\t\tcm,\n\t\t\t\t\t\t\t\t\t\t'harlowe-3-replace',\n\t\t\t\t\t\t\t\t\t\ttarget.previousSibling.lastChild.value,\n\t\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Replace All',\n\t\t\t\t\t\t\t\thtml: 'Replace All',\n\t\t\t\t\t\t\t\tonClick: function onClick(_ref39) {\n\t\t\t\t\t\t\t\t\tvar target = _ref39.target;\n\t\t\t\t\t\t\t\t\treturn cm.constructor.signal(\n\t\t\t\t\t\t\t\t\t\tcm,\n\t\t\t\t\t\t\t\t\t\t'harlowe-3-replace',\n\t\t\t\t\t\t\t\t\t\ttarget.previousSibling.previousSibling.lastChild.value,\n\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t(function () {\n\t\t\t\t// This <span> wrapper ensures that it isn't considered a main panel button by the CSS.\n\t\t\t\tvar done = el(\n\t\t\t\t\t'<span style=\"float:right;align-self:end;\"><button class=\"variant-primary primary icon-button\">Done</button></span>'\n\t\t\t\t);\n\t\t\t\tdone.firstChild[ON]('click', function () {\n\t\t\t\t\tswitchPanel();\n\t\t\t\t\tcm.constructor.signal(cm, 'harlowe-3-findDone');\n\t\t\t\t});\n\t\t\t\treturn done;\n\t\t\t})()\n\t\t),\n\t\tdefault:\n\t\t\t/*\n    \tThe default panel is present only if this is 2.3. In 2.4, an identical panel is created using the TwineJS extension API.\n    */\n\t\t\t!twine23\n\t\t\t\t? Panel()\n\t\t\t\t: Panel({\n\t\t\t\t\t\ttype: 'buttons',\n\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Bold',\n\t\t\t\t\t\t\t\thtml: \"<div style='font-family:serif;font-weight:bold'>B</div>\",\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn wrapSelection(\"''\", \"''\", 'Bold Text');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Italic',\n\t\t\t\t\t\t\t\thtml: \"<div style='font-family:serif;font-style:italic'>I</div>\",\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn wrapSelection('//', '//', 'Italic Text');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Strikethrough',\n\t\t\t\t\t\t\t\thtml: \"<div style='font-family:serif;text-decoration:line-through'>S</div>\",\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn wrapSelection('~~', '~~', 'Strikethrough Text');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Superscript',\n\t\t\t\t\t\t\t\thtml: \"<div style='font-family:serif'>X<sup>2</sup></div>\",\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn wrapSelection('^^', '^^', 'Superscript Text');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Text and background colour',\n\t\t\t\t\t\t\t\thtml: \"<div class='harlowe-3-bgColourButton'>\",\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('textcolor');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Borders',\n\t\t\t\t\t\t\t\thtml: fontIcon('border-style'),\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('borders');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Rotated text',\n\t\t\t\t\t\t\t\thtml: '<div style=\"transform:rotate(-30deg);font-family:serif;font-weight:bold\">R</div>',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('rotate');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Special text style',\n\t\t\t\t\t\t\t\thtml: 'Styles…',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('textstyle');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tel('<span class=\"harlowe-3-toolbarBullet\">'),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Heading',\n\t\t\t\t\t\t\t\thtml: \"<div style='font-family:serif;font-weight:bold'>H</div>\",\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn wrapSelection('\\\n#', '', 'Heading Text');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Bulleted list item',\n\t\t\t\t\t\t\t\thtml: fontIcon('list-ul'),\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn wrapSelection('\\\n* ', '');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Numbered list item',\n\t\t\t\t\t\t\t\thtml: fontIcon('list-ol'),\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn wrapSelection('\\\n0. ', '');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Horizontal rule',\n\t\t\t\t\t\t\t\thtml: '<b>—</b>',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn wrapSelection('\\\n---\\\n', '');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Alignment',\n\t\t\t\t\t\t\t\thtml: fontIcon('align-right'),\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('align');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Columns',\n\t\t\t\t\t\t\t\thtml: fontIcon('columns'),\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('columns');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tel('<span class=\"harlowe-3-toolbarBullet\">'),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Collapse whitespace (at runtime)',\n\t\t\t\t\t\t\t\thtml: '<b>{}</b>',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('collapse');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Verbatim (ignore all markup)',\n\t\t\t\t\t\t\t\thtml: 'Vb',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\tvar selection = cm.doc.getSelection();\n\t\t\t\t\t\t\t\t\tvar consecutiveGraves = (selection.match(/`+/g) || []).reduce(\n\t\t\t\t\t\t\t\t\t\tfunction (a, e) {\n\t\t\t\t\t\t\t\t\t\t\treturn Math.max(e.length, a);\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t0\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\twrapSelection(\n\t\t\t\t\t\t\t\t\t\t'`'.repeat(consecutiveGraves + 1),\n\t\t\t\t\t\t\t\t\t\t'`'.repeat(consecutiveGraves + 1),\n\t\t\t\t\t\t\t\t\t\t'Verbatim Text (Markup Ignored)'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Comments',\n\t\t\t\t\t\t\t\thtml: '<b>&lt;!--</b>',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn wrapSelection(\n\t\t\t\t\t\t\t\t\t\t'<!--',\n\t\t\t\t\t\t\t\t\t\t'-->',\n\t\t\t\t\t\t\t\t\t\t'Comments (Not Visible In-Game)'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tel('<span class=\"harlowe-3-toolbarBullet\">'),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Link element',\n\t\t\t\t\t\t\t\thtml: 'Link…',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('passagelink');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Only show a portion of text if a condition is met',\n\t\t\t\t\t\t\t\thtml: 'If…',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('if');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Input element',\n\t\t\t\t\t\t\t\thtml: 'Input…',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('input');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Hook (named section of the passage)',\n\t\t\t\t\t\t\t\thtml: 'Hook…',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('hook');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Set a variable with a data value',\n\t\t\t\t\t\t\t\thtml: 'Var…',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('basicValue');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Peruse a list of all built-in macros',\n\t\t\t\t\t\t\t\thtml: 'Macro…',\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('macro');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tel('<span class=\"harlowe-3-toolbarBullet\">'),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Proofreading view (dim all code except strings)',\n\t\t\t\t\t\t\t\thtml: fontIcon('eye'),\n\t\t\t\t\t\t\t\tonClick: function onClick(_ref40) {\n\t\t\t\t\t\t\t\t\tvar target = _ref40.target;\n\t\t\t\t\t\t\t\t\tcm.display.wrapper.classList.toggle('harlowe-3-hideCode');\n\n\t\t\t\t\t\t\t\t\tif (target.tagName.toLowerCase() === 'svg') {\n\t\t\t\t\t\t\t\t\t\ttarget = target.parentNode;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\ttarget.classList.toggle('active');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\t\t'Coding tooltips (show a tooltip when the cursor rests on code structures)',\n\t\t\t\t\t\t\t\thtml: fontIcon('comment'),\n\t\t\t\t\t\t\t\tactive: true,\n\t\t\t\t\t\t\t\tonClick: function onClick(_ref41) {\n\t\t\t\t\t\t\t\t\tvar target = _ref41.target;\n\t\t\t\t\t\t\t\t\tcm.display.wrapper.classList.toggle('harlowe-3-hideTooltip');\n\n\t\t\t\t\t\t\t\t\tif (target.tagName.toLowerCase() === 'svg') {\n\t\t\t\t\t\t\t\t\t\ttarget = target.parentNode;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\ttarget.classList.toggle('active');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tel('<span class=\"harlowe-3-toolbarBullet\">'),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Find and replace',\n\t\t\t\t\t\t\t\thtml: fontIcon('search'),\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn switchPanel('find');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Open the Harlowe documentation',\n\t\t\t\t\t\t\t\thtml: \"<div style='font-weight:bold'>?</div>\",\n\t\t\t\t\t\t\t\tonClick: function onClick() {\n\t\t\t\t\t\t\t\t\treturn window.open(\n\t\t\t\t\t\t\t\t\t\t'https://twine2.neocities.org/',\n\t\t\t\t\t\t\t\t\t\t'Harlowe Documentation',\n\t\t\t\t\t\t\t\t\t\t'noopener,noreferrer'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t(function () {\n\t\t\t\t\t\t\t\tvar button = el(\n\t\t\t\t\t\t\t\t\t'<button style=\"position:absolute;right:0em;margin-top:-2em\">' +\n\t\t\t\t\t\t\t\t\t\tfontIcon('chevron-up') +\n\t\t\t\t\t\t\t\t\t\t'</button>'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbutton[ON]('click', function () {\n\t\t\t\t\t\t\t\t\ttoolbarElem.classList.toggle('harlowe-3-minimised');\n\t\t\t\t\t\t\t\t\tvar list = button.firstChild.classList;\n\t\t\t\t\t\t\t\t\tlist.toggle('fa-chevron-down');\n\t\t\t\t\t\t\t\t\tlist.toggle('fa-chevron-up');\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn button;\n\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t]\n\t\t\t\t  })\n\t};\n\t/*\n  \tSwitch to the default panel at startup.\n  */\n\n\tswitchPanel();\n\t/*\n  \tTwine 2.4+ toolbar.\n  */\n\n\tvar svgURIPrefix = 'data:image/svg+xml,';\n\n\tvar svgURI = function svgURI(contents) {\n\t\treturn ''\n\t\t\t.concat(svgURIPrefix)\n\t\t\t.concat(\n\t\t\t\twindow.escape(\n\t\t\t\t\t\"<svg viewBox='0 0 14 14' width='80' height='80' xmlns='http://www.w3.org/2000/svg'>\".concat(\n\t\t\t\t\t\tcontents,\n\t\t\t\t\t\t'</svg>'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t};\n\n\tvar t24Icon = function t24Icon(x, y, style, text) {\n\t\treturn svgURI(\n\t\t\t\"<text y='\"\n\t\t\t\t.concat(y, \"' x='\")\n\t\t\t\t.concat(x, \"' fill='currentColor' style='/*harlowe-3*/\")\n\t\t\t\t.concat(style, \"'>\")\n\t\t\t\t.concat(text, '</text>')\n\t\t);\n\t};\n\n\tvar fontIconURI = function fontIconURI(name) {\n\t\treturn ''.concat(svgURIPrefix).concat(window.escape(fontIcon(name)));\n\t};\n\n\tvar t24commands = {};\n\tvar t24keymap = {\n\t\tname: 'harlowe-3-keymap'\n\t};\n\tvar hideCodeButton, hideTooltipButton;\n\tvar t24toolbar = twine23\n\t\t? []\n\t\t: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'menu',\n\t\t\t\t\tlabel: 'Styles',\n\t\t\t\t\ticon: svgURI(\n\t\t\t\t\t\t\"<text y='11' x='-7' fill='currentColor' style='/*harlowe-3*/font-weight:bold;font-size:80%'>B</text>\" +\n\t\t\t\t\t\t\t\"<text y='8' x='1' fill='currentColor' style='/*harlowe-3*/font-style:italic;font-size:80%'>I</text>\" +\n\t\t\t\t\t\t\t\"<text y='13' x='5' fill='currentColor' style='/*harlowe-3*/text-decoration:line-through;font-size:80%'>S</text>\"\n\t\t\t\t\t).replace('%2780%27', '%27144%27'),\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tkey: 'Ctrl-B',\n\t\t\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\t\t\twrapSelection(\"''\", \"''\", 'Bold Text');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlabel: 'Bold'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tkey: 'Ctrl-I',\n\t\t\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\t\t\twrapSelection('//', '//'), 'Italic Text';\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlabel: 'Italic'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tkey: 'Ctrl--',\n\t\t\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\t\t\twrapSelection('~~', '~~', 'Superscript Text');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlabel: 'Superscript'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tkey: 'Ctrl-Shift-6',\n\t\t\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\t\t\twrapSelection('^^', '^^', 'Strikethrough Text');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlabel: 'Strikethrough'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'separator'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\t\t\tswitchPanel('textstyle');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlabel: 'More Styles…'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('textcolor');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Colours',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: svgURI(\n\t\t\t\t\t\t'<defs><linearGradient id=\"X\"><stop offset=\"0%\" stop-color=\"hsla(0,100%,50%,0.5)\"/><stop offset=\"16%\" stop-color=\"hsla(30,100%,50%,0.5)\"/><stop offset=\"33%\" stop-color=\"hsla(60,100%,50%,0.5)\"/><stop offset=\"50%\" stop-color=\"hsla(120,100%,50%,0.5)\"/><stop offset=\"66%\" stop-color=\"hsla(180,100%,50%,0.5)\"/><stop offset=\"83%\" stop-color=\"hsla(240,100%,50%,0.5)\"/><stop offset=\"100%\" stop-color=\"hsla(320,100%,50%,0.5)\"/></linearGradient></defs><circle cx=\"8\" cy=\"8\" r=\"6\" fill=\"url(\\'#X\\')\"/>'\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('borders');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Borders',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: fontIconURI('border-style')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('rotate');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Rotate',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: t24Icon(\n\t\t\t\t\t\t-3,\n\t\t\t\t\t\t14,\n\t\t\t\t\t\t'transform:rotate(-30deg);font-family:serif;',\n\t\t\t\t\t\t'R'\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\twrapSelection('\\\n#', '', 'Heading Text');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Header',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: t24Icon(0, 14, 'font-weight:bold;font-size:18px;', 'H')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'menu',\n\t\t\t\t\ticon: fontIconURI('list-ul'),\n\t\t\t\t\tlabel: 'List',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\t\t\twrapSelection('\\\n* ', '');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlabel: 'Bulleted list item'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\t\t\twrapSelection('\\\n0. ', '');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlabel: 'Numbered list item'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\twrapSelection('\\\n---\\\n', '');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Horizontal rule',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: fontIconURI('minus')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('align');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Alignment',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: fontIconURI('align-right')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('columns');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Columns',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: fontIconURI('columns')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('collapse');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Collapse',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: t24Icon(0, 10, 'font-weight:bold;font-size:12px', '{ }')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tvar selection = cm.doc.getSelection();\n\t\t\t\t\t\tvar consecutiveGraves = (selection.match(/`+/g) || []).reduce(\n\t\t\t\t\t\t\tfunction (a, e) {\n\t\t\t\t\t\t\t\treturn Math.max(e.length, a);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t0\n\t\t\t\t\t\t);\n\t\t\t\t\t\twrapSelection(\n\t\t\t\t\t\t\t'`'.repeat(consecutiveGraves + 1),\n\t\t\t\t\t\t\t'`'.repeat(consecutiveGraves + 1),\n\t\t\t\t\t\t\t'Verbatim Text (Markup Ignored)'\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Verbatim',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: t24Icon(1, 12, 'font-size:11px', 'Vb')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\twrapSelection('<!--', '-->', 'HTML Comments (Not Visible In-Game)');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Comments',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: t24Icon(-1, 10, 'font-weight:bold', '&#10216;!-')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('passagelink');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Link…',\n\t\t\t\t\ticon: ''\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('if');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'If…',\n\t\t\t\t\ticon: ''\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('input');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Input…',\n\t\t\t\t\ticon: ''\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('hook');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Hook…',\n\t\t\t\t\ticon: ''\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('basicValue');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Value…',\n\t\t\t\t\ticon: ''\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('macro');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Macro…',\n\t\t\t\t\ticon: ''\n\t\t\t\t},\n\t\t\t\t/*\n  \tAs a convenient hack to support multi-editor in 2.4, the hideCode, etc. classes are placed on the .CodeMirror element\n  \trather than the (global) harloweToolbar element.\n  */\n\t\t\t\t(hideCodeButton = {\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tcm.display.wrapper.classList.toggle('harlowe-3-hideCode');\n\t\t\t\t\t\tcm.constructor.signal(cm, 'cursorActivity');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Proofread view',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: fontIconURI('eye')\n\t\t\t\t}),\n\t\t\t\t(hideTooltipButton = {\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tcm.display.wrapper.classList.toggle('harlowe-3-hideTooltip');\n\t\t\t\t\t\tcm.constructor.signal(cm, 'cursorActivity');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Coding tooltips',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: fontIconURI('comment')\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tkey: 'Ctrl-F',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\tswitchPanel('find');\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Find and replace',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: fontIconURI('search')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tcommand: function command() {\n\t\t\t\t\t\twindow.open(\n\t\t\t\t\t\t\t'https://twine2.neocities.org/',\n\t\t\t\t\t\t\t'Harlowe Documentation',\n\t\t\t\t\t\t\t'noopener,noreferrer'\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tlabel: 'Show Manual',\n\t\t\t\t\ticonOnly: true,\n\t\t\t\t\ticon: t24Icon(3, 12, 'font-weight:bold;font-size:19px;', '?')\n\t\t\t\t}\n\t\t  ].map(function recur(b, i) {\n\t\t\t\t/*\n    \tThe above definition is split into separate command and toolbar objects, as per the TwineJS 2.4 spec.\n    */\n\t\t\t\tif (b.type === 'button') {\n\t\t\t\t\tvar command = b.command;\n\t\t\t\t\t/*\n      \tBefore each command is run, reassign the cm object.\n      */\n\n\t\t\t\t\tt24commands[i] = function (cmObj) {\n\t\t\t\t\t\tcm = cmObj;\n\t\t\t\t\t\tcommand();\n\t\t\t\t\t};\n\n\t\t\t\t\tif (b.key) {\n\t\t\t\t\t\tt24keymap[b.key] = command;\n\t\t\t\t\t}\n\n\t\t\t\t\tb.command = i + '';\n\t\t\t\t}\n\n\t\t\t\tif (b.type === 'menu') {\n\t\t\t\t\tb.items = b.items.map(function (b, j) {\n\t\t\t\t\t\treturn recur(b, i + '.' + j);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn b;\n\t\t  });\n\n\tfunction Toolbar(cmObj) {\n\t\tvar _ref42 =\n\t\t\t\targuments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t\t\tforegroundColor = _ref42.foregroundColor;\n\n\t\t/*\n    \tLook for the TwineJS toolbar element in either 2.4 or 2.3.\n    */\n\t\tvar passageTagsElem =\n\t\t\tdocument[$]('.story-format-toolbar') ||\n\t\t\tdocument[$]('.editor .passageTags');\n\n\t\tif (passageTagsElem && passageTagsElem.nextElementSibling !== toolbarElem) {\n\t\t\tpassageTagsElem.after(toolbarElem);\n\t\t}\n\n\t\tcm = cmObj;\n\t\t!twine23 && cm.addKeyMap(t24keymap);\n\t\t/*\n    \tColourise the icons for each toolbar button based on the current appTheme (light mode or dark mode).\n    */\n\n\t\tt24toolbar.forEach(function (item) {\n\t\t\tvar replaceColor = foregroundColor;\n\n\t\t\tif (\n\t\t\t\t(item === hideCodeButton &&\n\t\t\t\t\tcm.display.wrapper.classList.contains('harlowe-3-hideCode')) ||\n\t\t\t\t(item === hideTooltipButton &&\n\t\t\t\t\t!cm.display.wrapper.classList.contains('harlowe-3-hideTooltip'))\n\t\t\t) {\n\t\t\t\treplaceColor = '#0a60c2';\n\t\t\t}\n\n\t\t\titem.icon &&\n\t\t\t\t(item.icon = item.icon.replace(\n\t\t\t\t\t/fill%3D%27[^']+?%27/g,\n\t\t\t\t\t'fill%3D%27'.concat(window.escape(replaceColor), '%27')\n\t\t\t\t));\n\t\t});\n\t\treturn t24toolbar;\n\t}\n\n\tif (this && this.loaded) {\n\t\tthis.modules.Toolbar = Toolbar;\n\t} else if (!this.window) {\n\t\tthis.Toolbar = Toolbar;\n\t\tthis.ToolbarCommands = t24commands;\n\t}\n}.call(eval('this')));\n/*jshint strict:true*/\n\n(function () {\n\t'use strict';\n\t/*\n  \tImport the TwineMarkup lexer function, and store it locally.\n  */\n\n\tvar _this = this;\n\n\tvar lex, toolbar, tooltips, commands, ShortDefs, insensitiveName;\n\n\tif (\n\t\t(typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object'\n\t) {\n\t\tvar _require = require('../lexer');\n\n\t\tlex = _require.lex;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine('markup', [], function (markup) {\n\t\t\tlex = markup.lex;\n\t\t});\n\t} // Loaded in HarloweDocs's preview pane.\n\telse if (this.window) {\n\t\tlex = this.Markup.lex;\n\t\tvar _this$Utils2 = this.Utils;\n\t\tShortDefs = _this$Utils2.ShortDefs;\n\t\tinsensitiveName = _this$Utils2.insensitiveName;\n\t} // Loaded as a story format in TwineJS (any ver)\n\telse {\n\t\tvar _ref43 = this.modules || this;\n\n\t\tlex = _ref43.Markup.lex;\n\t\ttoolbar = _ref43.Toolbar;\n\t\tcommands = _ref43.ToolbarCommands;\n\t\ttooltips = _ref43.Tooltips;\n\t\tvar _ref43$Utils = _ref43.Utils;\n\t\tShortDefs = _ref43$Utils.ShortDefs;\n\t\tinsensitiveName = _ref43$Utils.insensitiveName;\n\t}\n\t/*\n  \tProduce an object holding macro names, using both their names and their aliases.\n  */\n\n\tvar validMacros = Object.entries(ShortDefs.Macro).reduce(function (\n\t\ta,\n\t\t_ref44\n\t) {\n\t\tvar _ref45 = _slicedToArray(_ref44, 2),\n\t\t\tname = _ref45[0],\n\t\t\tmacro = _ref45[1];\n\n\t\t[name].concat(_toConsumableArray(macro.aka)).forEach(function (name) {\n\t\t\treturn (a[name] = macro);\n\t\t});\n\t\treturn a;\n\t},\n\t{});\n\t/*\n  \tThe mode is defined herein.\n  */\n\n\tvar mode = function mode() {\n\t\tvar cm;\n\t\t/*\n    \tTo handle 2.4's multi-editor mode, this WeakMap stores multiple parse trees (plus referenceTokens) tied to CodeMirror docs.\n    */\n\n\t\tvar editors = new WeakMap();\n\n\t\tvar docData = function docData(doc) {\n\t\t\tif (!editors.has(doc)) {\n\t\t\t\t/*\n        \tUse refreshTree() to create all the relevant data structures for this doc, including the tree.\n        */\n\t\t\t\trefreshTree(doc);\n\t\t\t}\n\n\t\t\treturn editors.get(doc);\n\t\t};\n\t\t/*\n    \tRefresh (re-lex) an existing doc's tree.\n    */\n\n\t\tfunction refreshTree(doc) {\n\t\t\tvar data;\n\t\t\t/*\n      \tIf the doc doesn't exist, quickly create it now.\n      */\n\n\t\t\tif (!editors.has(doc)) {\n\t\t\t\tdata = {\n\t\t\t\t\ttooltipsEnabled: true\n\t\t\t\t};\n\t\t\t\teditors.set(doc, data);\n\t\t\t} else {\n\t\t\t\tdata = editors.get(doc);\n\t\t\t}\n\n\t\t\tdata.tree = lex(doc.getValue()); // These caches are used to implement special highlighting when the cursor\n\t\t\t// rests on variables or hookNames, such that all the other variable/hook\n\t\t\t// tokens are highlighted as well.\n\n\t\t\tdata.referenceTokens = {\n\t\t\t\tvariable: [],\n\t\t\t\ttempVariable: [],\n\t\t\t\thook: [],\n\t\t\t\thookName: []\n\t\t\t};\n\t\t\tdata.cursorMarks = [];\n\t\t\tdata.tree.children.forEach(function lexTreePostProcess(token) {\n\t\t\t\tif (\n\t\t\t\t\ttoken.type === 'variable' ||\n\t\t\t\t\ttoken.type === 'tempVariable' ||\n\t\t\t\t\ttoken.type === 'hook' ||\n\t\t\t\t\ttoken.type === 'hookName'\n\t\t\t\t) {\n\t\t\t\t\tdata.referenceTokens[token.type].push(token);\n\t\t\t\t}\n\t\t\t\t/*\n        \tDon't syntax-highlight the interiors of strings.\n        */\n\n\t\t\t\tif (token.type === 'string') {\n\t\t\t\t\t/*\n          \tInvalidate both the childAt cache and the children array.\n          */\n\t\t\t\t\ttoken.childAt = undefined;\n\t\t\t\t\ttoken.children = [];\n\t\t\t\t}\n\n\t\t\t\ttoken.children.forEach(lexTreePostProcess);\n\t\t\t});\n\t\t}\n\t\t/*\n    \tThis 'beforeChange' event handler applies a hack to CodeMirror to force it\n    \tto rerender the entire text area whenever a change is made, not just the change.\n    \tThis allows 'backtrack' styling, such as unclosed brackets, to be possible\n    \tunder CodeMirror.\n    */\n\n\t\tfunction forceFullChange(changeObj, oldText) {\n\t\t\tif (!changeObj.update) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t/*\n      \tFirst, obtain the text area's full text line array, truncated\n      \tto just the line featuring the change.\n      */\n\n\t\t\tvar line = changeObj.from.line;\n\t\t\tvar newText = oldText.split('\\\n').slice(0, changeObj.from.line + 1);\n\t\t\t/*\n      \tJoin it with the change's text.\n      */\n\n\t\t\tnewText[line] =\n\t\t\t\tnewText[line].slice(0, changeObj.from.ch) + changeObj.text[0];\n\t\t\t/*\n      \tIf the change is multi-line, the additional lines should be added.\n      */\n\n\t\t\tnewText = newText.concat(changeObj.text.slice(1));\n\t\t\t/*\n      \tNow, register this change.\n      */\n\n\t\t\tchangeObj.update(\n\t\t\t\t{\n\t\t\t\t\tline: 0,\n\t\t\t\t\tch: 0\n\t\t\t\t},\n\t\t\t\tchangeObj.to,\n\t\t\t\tnewText\n\t\t\t);\n\t\t\treturn newText.join('\\\n');\n\t\t}\n\t\t/*\n    \tThis 'cursorActivity' event handler applies CodeMirror marks based on\n    \tthe token that the cursor is resting on.\n    */\n\n\t\tfunction cursorMarking(doc) {\n\t\t\tvar data = docData(doc);\n\t\t\tvar tree = data.tree,\n\t\t\t\tcursorMarks = data.cursorMarks,\n\t\t\t\treferenceTokens = data.referenceTokens;\n\n\t\t\tif (cursorMarks.length) {\n\t\t\t\tcursorMarks.forEach(function (mark) {\n\t\t\t\t\treturn mark.clear();\n\t\t\t\t});\n\t\t\t\tcursorMarks = data.cursorMarks = [];\n\t\t\t}\n\n\t\t\tvar token = tree.tokenAt(doc.indexFromPos(doc.getCursor())); // If the cursor is at the end of the passage, or there is no text, then\n\t\t\t// the returned token will be null.\n\n\t\t\tif (!token) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t/*\n      \tFirst, mark the containing token for the cursor's current position.\n      \tThis illuminates the boundaries between tokens, and provides makeshift\n      \tbracket/closer matching.\n      */\n\n\t\t\tcursorMarks.push(\n\t\t\t\tdoc.markText(\n\t\t\t\t\tdoc.posFromIndex(token.start),\n\t\t\t\t\tdoc.posFromIndex(token.end),\n\t\t\t\t\t{\n\t\t\t\t\t\tclassName: 'cm-harlowe-3-cursor'\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t\t/*\n      \tIf the token is a variable or hookName, then\n      \thighlight certain other instances in the text.\n      \tFor variables, hooks and hookNames, highlight all other occurrences of\n      \tthe variable in the passage text.\n      */\n\n\t\t\tif (\n\t\t\t\ttoken.type === 'variable' ||\n\t\t\t\ttoken.type === 'tempVariable' ||\n\t\t\t\ttoken.type === 'hookName' ||\n\t\t\t\ttoken.type === 'hook'\n\t\t\t) {\n\t\t\t\t// <hooks| should highlight matching ?hookNames.\n\t\t\t\tvar type = token.type === 'hook' ? 'hookName' : token.type;\n\t\t\t\treferenceTokens[type].forEach(function (e) {\n\t\t\t\t\tif (e !== token && e.name === token.name) {\n\t\t\t\t\t\tcursorMarks.push(\n\t\t\t\t\t\t\tdoc.markText(doc.posFromIndex(e.start), doc.posFromIndex(e.end), {\n\t\t\t\t\t\t\t\tclassName: 'cm-harlowe-3-variableOccurrence'\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t/*\n      \tAlso for hookNames and hooks, highlight the nametags of the\n      \tnamed hook(s) that match this one's name.\n      */\n\n\t\t\tif (token.type === 'hookName' || token.type === 'hook') {\n\t\t\t\treferenceTokens.hook.forEach(function (e) {\n\t\t\t\t\tif (e !== token && e.name && e.name === token.name) {\n\t\t\t\t\t\tvar tagStart = // This assumes that the end of the hook's text consists of its <tag|,\n\t\t\t\t\t\t\t// and nothing else.\n\t\t\t\t\t\t\te.tagPosition === 'appended'\n\t\t\t\t\t\t\t\t? e.end - e.name.length - 1 // This assumes that the start of the hook's text is its |tag>.\n\t\t\t\t\t\t\t\t: e.start + 1;\n\t\t\t\t\t\tcursorMarks.push(\n\t\t\t\t\t\t\tdoc.markText(\n\t\t\t\t\t\t\t\tdoc.posFromIndex(tagStart),\n\t\t\t\t\t\t\t\tdoc.posFromIndex(tagStart + e.name.length),\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tclassName: 'cm-harlowe-3-hookOccurrence'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t/*\n    \tFind/Replace functionality.\n    \tThis is in here instead of toolbar.js because on('change') needs to re-run existing searches\n    \tif the doc is edited while the find/replace panel is open.\n    \tWhen a search is performed (using find()), currentQuery becomes a { query, regExp, onlyIn, matchCase } object,\n    \tand a CodeMirror overlay (below) is added that highlights the matches.\n    */\n\n\t\tvar matches = [];\n\t\t/*\n    \tThe matchIndex refers to the currently highlighted match, the target of \"Replace One\" operations.\n    */\n\n\t\tvar matchIndex;\n\t\tvar currentQuery;\n\t\t/*\n    \tfindFromIndex allows a search to begin from a given index, setting the matchIndex correctly.\n    */\n\n\t\tvar findFromIndex = -1;\n\t\tvar findOverlay = {\n\t\t\ttoken: function token(stream) {\n\t\t\t\t/*\n        \tTo highlight, simply go through each match and apply the CSS class if the stream\n        \tis inside it.\n        \tAssumption: all matches entries are in ascending order.\n        */\n\t\t\t\tvar line = stream.lineOracle.line;\n\t\t\t\tvar ch = stream.pos;\n\n\t\t\t\tfor (var i = 0; i < matches.length; i += 1) {\n\t\t\t\t\tvar _matches$i = matches[i],\n\t\t\t\t\t\tstart = _matches$i.start,\n\t\t\t\t\t\tend = _matches$i.end;\n\n\t\t\t\t\tif (start.line > line || end.line < line) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t/*\n          \tThis checks that the stream is currently within this match's range.\n          \tBecause the end ch is noninclusive, \"end.ch > ch\" is used instead of \"end.ch >= ch\".\n          */\n\n\t\t\t\t\tif (start.line <= line && end.line >= line) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(start.line < line || start.ch <= ch) &&\n\t\t\t\t\t\t\t(end.line > line || end.ch > ch)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tend.line > line ? stream.skipToEnd() : (stream.pos = end.ch);\n\t\t\t\t\t\t\treturn matchIndex === i\n\t\t\t\t\t\t\t\t? 'harlowe-3-findResultCurrent'\n\t\t\t\t\t\t\t\t: 'harlowe-3-findResult';\n\t\t\t\t\t\t} else if (start.line === line && start.ch > ch) {\n\t\t\t\t\t\t\tstream.pos = start.ch;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstream.skipToEnd();\n\t\t\t}\n\t\t};\n\t\t/*\n    \tThe main finding function.\n    \tThis can begin a search from a specific index (such as after using \"Replace One\").\n    */\n\n\t\tfunction harlowe3Find(q) {\n\t\t\tcm.removeOverlay(findOverlay);\n\t\t\tmatches = [];\n\t\t\tmatchIndex = -1;\n\t\t\t/*\n      \tDon't initialise a search for \"\".\n      */\n\n\t\t\tif (!q.query) {\n\t\t\t\tcurrentQuery = undefined;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcurrentQuery = q;\n\t\t\tvar _cm = cm,\n\t\t\t\tdoc = _cm.doc;\n\t\t\t/*\n      \tThe focused match is the one immediately after (or at) the cursor, or the first one if there is none after.\n      */\n\n\t\t\tvar cursorIndex =\n\t\t\t\tfindFromIndex > -1\n\t\t\t\t\t? findFromIndex\n\t\t\t\t\t: Math.max(0, doc.indexFromPos(doc.getCursor()) - 1);\n\t\t\t/*\n      \tThe actual work in finding the results is done using this RegExp. It is cached so that replace() can use it, too.\n      */\n\n\t\t\tq.regExp = new RegExp(\n\t\t\t\tq.query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/gm, '\\\\$&'),\n\t\t\t\tq.matchCase ? 'g' : 'gi'\n\t\t\t);\n\t\t\tvar fullText = doc.getValue();\n\t\t\tvar tree = docData(doc).tree;\n\t\t\tvar onlyIn = q.onlyIn;\n\t\t\tvar match;\n\n\t\t\tmatchLoop: while ((match = q.regExp.exec(fullText))) {\n\t\t\t\t/*\n        \tProcess a result if it's at the front of the input stream.\n        */\n\t\t\t\tvar matchLength = match[0].length || 1;\n\t\t\t\tvar _match = match,\n\t\t\t\t\tindex = _match.index;\n\n\t\t\t\tif (onlyIn === 'Only prose' || onlyIn === 'Only code') {\n\t\t\t\t\t/*\n          \tSearch for text and string tokens in the result's branch.\n          \tIf there are any, and \"Only prose\" is set, then break the loop (thus skipping the return at the end.)\n          \tIf there are any, and \"Only code\" is set, then it's invalid - end and go to the next token.\n          */\n\t\t\t\t\tvar currentToken = tree.tokenAt(index);\n\t\t\t\t\tvar currentBranch = tree.pathAt(index);\n\n\t\t\t\t\tfor (var j = index; j < index + matchLength; j += 1) {\n\t\t\t\t\t\tif (j > currentToken.end) {\n\t\t\t\t\t\t\tcurrentToken = tree.tokenAt(j);\n\t\t\t\t\t\t\tcurrentBranch = tree.pathAt(j);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar i = void 0;\n\n\t\t\t\t\t\tfor (i = 0; i < currentBranch.length; i += 1) {\n\t\t\t\t\t\t\tvar type = currentBranch[i].type;\n\n\t\t\t\t\t\t\tif (type === 'text' || type === 'string') {\n\t\t\t\t\t\t\t\t/*\n                \tIf this is a text/string node and \"Only code\" is set, then it's invalid. Otherwise, it's valid.\n                */\n\t\t\t\t\t\t\t\tif (onlyIn === 'Only code') {\n\t\t\t\t\t\t\t\t\tcontinue matchLoop;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*\n            \tIf no text or string tokens were found, and \"Only prose\" is set, then it's invalid - end and go to the next token.\n            */\n\n\t\t\t\t\t\tif (i === currentBranch.length && onlyIn === 'Only prose') {\n\t\t\t\t\t\t\tcontinue matchLoop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (onlyIn === 'Only selection') {\n\t\t\t\t\t/*\n        \tLimit the search if \"Only seiection\" is set. This requires looping through every CodeMirror selection\n        \t(whose anchor-head order isn't obvious) and checking.\n        */\n\t\t\t\t\tvar selections = doc.listSelections();\n\n\t\t\t\t\tfor (var _i2 = 0; _i2 < selections.length; _i2 += 1) {\n\t\t\t\t\t\tvar pos1 = doc.indexFromPos(selections[_i2].anchor),\n\t\t\t\t\t\t\tpos2 = doc.indexFromPos(selections[_i2].head);\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tindex >= Math.min(pos1, pos2) &&\n\t\t\t\t\t\t\tindex + matchLength < Math.max(pos1, pos2)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue matchLoop;\n\t\t\t\t}\n\t\t\t\t/*\n        \tAdd this match to the highlighter overlay's array.\n        */\n\n\t\t\t\tvar start = doc.posFromIndex(index);\n\t\t\t\tvar end = doc.posFromIndex(index + matchLength);\n\t\t\t\tmatches.push({\n\t\t\t\t\tstart: start,\n\t\t\t\t\tend: end\n\t\t\t\t});\n\n\t\t\t\tif (matchIndex === -1) {\n\t\t\t\t\t/*\n          \tUpdate the matchIndex if this is the match immediately after the cursor.\n          */\n\t\t\t\t\tif (index > cursorIndex) {\n\t\t\t\t\t\tmatchIndex = matches.length - 1;\n\t\t\t\t\t}\n\t\t\t\t\t/*\n          \tDon't scroll into view if this is a continued search.\n          */\n\n\t\t\t\t\tif (!findFromIndex) {\n\t\t\t\t\t\tcm.scrollIntoView(start, cm.display.wrapper.offsetHeight / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n      \tIf no matchIndex was set above, set it now.\n      */\n\n\t\t\tif (matchIndex === -1) {\n\t\t\t\tmatchIndex = 0;\n\t\t\t}\n\n\t\t\tcm.addOverlay(findOverlay);\n\t\t\t/*\n      \tReset this thing now.\n      */\n\n\t\t\tfindFromIndex = -1;\n\t\t}\n\n\t\tfunction harlowe3FindNext(dir) {\n\t\t\tmatchIndex = (matchIndex + dir) % matches.length;\n\n\t\t\tif (matchIndex < 0) {\n\t\t\t\tmatchIndex += matches.length;\n\t\t\t}\n\n\t\t\tmatches[matchIndex] &&\n\t\t\t\tcm.scrollIntoView(\n\t\t\t\t\tmatches[matchIndex].start,\n\t\t\t\t\tcm.display.wrapper.offsetHeight / 2\n\t\t\t\t);\n\t\t\t/*\n      \tThis crudely refreshes the overlay.\n      */\n\n\t\t\tcm.removeOverlay(findOverlay);\n\t\t\tcm.addOverlay(findOverlay);\n\t\t}\n\n\t\tfunction harlowe3Replace(newStr, all) {\n\t\t\tvar _cm2 = cm,\n\t\t\t\tdoc = _cm2.doc;\n\t\t\tvar match = matches[matchIndex];\n\n\t\t\tif (!all && match) {\n\t\t\t\tfindFromIndex = doc.indexFromPos(match.start) + newStr.length - 1;\n\t\t\t\tdoc.replaceRange(newStr, match.start, match.end);\n\t\t\t} else if (matches.length) {\n\t\t\t\t/*\n      \tDue to the slow, buggy nature of bundling multiple replaceRange() calls into a CodeMirror operation(),\n      \tthis full replacement is done with a single replaceRange() that re-computes the matches using the original query RegExp.\n      */\n\t\t\t\tvar veryStart = matches[0].start;\n\t\t\t\tvar veryEnd = matches[matches.length - 1].end;\n\t\t\t\tdoc.replaceRange(\n\t\t\t\t\tdoc\n\t\t\t\t\t\t.getValue()\n\t\t\t\t\t\t.slice(doc.indexFromPos(veryStart), doc.indexFromPos(veryEnd))\n\t\t\t\t\t\t.replace(currentQuery.regExp, newStr),\n\t\t\t\t\tveryStart,\n\t\t\t\t\tveryEnd\n\t\t\t\t);\n\t\t\t} // Since this triggers change(), nothing more needs to be done to refresh the overlay.\n\t\t}\n\t\t/*\n    \tBecause mode() can be called multiple times by TwineJS, special preparation must be done before attaching event handlers.\n    \tEach event handler here is a named function with \"harlowe3\" in their name, so that their copies can be spotted in the _handlers array.\n    \tReminder that function name properties are well-specified since 2015.\n    */\n\n\t\tvar on = function on(target, name, fn) {\n\t\t\treturn (\n\t\t\t\t(!target._handlers ||\n\t\t\t\t\t!(target._handlers[name] || []).some(function (e) {\n\t\t\t\t\t\treturn e.name === fn.name;\n\t\t\t\t\t})) &&\n\t\t\t\ttarget.on(name, fn)\n\t\t\t);\n\t\t};\n\n\t\tvar _init = function init(doc) {\n\t\t\tif (!cm) {\n\t\t\t\tcm = doc.cm;\n\t\t\t\tcm.addOverlay({\n\t\t\t\t\ttoken: function token(s) {\n\t\t\t\t\t\ts.skipToEnd();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t/*\n        \tThis (along with the arrow-function binding above) is used to provide line numbers\n        \tfor everything except TwineJS 2.4.\n        */\n\n\t\t\t\tif (_this.window || _this.modules) {\n\t\t\t\t\tcm.setOption('lineNumbers', true);\n\t\t\t\t\tcm.setOption('lineNumberFormatter', function () {\n\t\t\t\t\t\treturn '\\u2022';\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n      \tInstall the toolbar, if it's been loaded. (This function will early-exit if the toolbar's already installed.)\n      */\n\n\t\t\ttoolbar && toolbar(cm);\n\t\t\t/*\n      \tUse the Harlowe lexer to compute a full parse tree.\n      */\n\n\t\t\trefreshTree(doc);\n\t\t\t/*\n      \tAttach the all-important beforeChanged event, but make sure it's only attached once.\n      \tNote that this event is removed by TwineJS when it uses swapDoc to dispose of old docs.\n      */\n\n\t\t\ton(doc, 'beforeChange', function harlowe3beforeChange(_, change) {\n\t\t\t\t/*\n        \tDo nothing if this is detached from the DOM.\n        */\n\t\t\t\tif (!doc.cm.display.wrapper.parentNode) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar oldText = doc.getValue();\n\t\t\t\tforceFullChange(change, oldText);\n\t\t\t});\n\t\t\ton(doc, 'change', function harlowe3Change() {\n\t\t\t\t/*\n        \tDo nothing if this is detached from the DOM.\n        */\n\t\t\t\tif (!doc.cm.display.wrapper.parentNode) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trefreshTree(doc);\n\t\t\t\t/*\n        \tRe-compute the current search query, if there is one.\n        */\n\n\t\t\t\tif (currentQuery && matches[matchIndex]) {\n\t\t\t\t\t/*\n          \tDon't reset findFromIndex if harlowe3Replace() changed it.\n          */\n\t\t\t\t\tif (findFromIndex === -1) {\n\t\t\t\t\t\tfindFromIndex = doc.indexFromPos(matches[matchIndex].start) - 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tharlowe3Find(currentQuery);\n\t\t\t\t}\n\t\t\t});\n\t\t\ton(doc, 'cursorActivity', function harlowe3CursorActivity() {\n\t\t\t\tcursorMarking(doc);\n\t\t\t\ttooltips && tooltips(doc, docData(doc));\n\t\t\t});\n\t\t\t/*\n      \tPerform specific style alterations based on certain specific token types.\n      */\n\n\t\t\ton(cm, 'renderLine', function harlowe3RenderLine(_, __, lineElem) {\n\t\t\t\tArray.from(lineElem.querySelectorAll('.cm-harlowe-3-colour')).forEach(\n\t\t\t\t\tfunction (elem) {\n\t\t\t\t\t\t/*\n          \tIt may be a bit regrettable that the fastest way to get the HTML colour of a Harlowe\n          \tcolour token is to re-lex it separately from the tree, but since it's a single token, it should nonetheless be quick enough.\n          \t(Plus, colour tokens are relatively rare in most passage prose).\n          */\n\t\t\t\t\t\tvar _lex$tokenAt = lex(elem.textContent, '', 'macro').tokenAt(0),\n\t\t\t\t\t\t\tcolour = _lex$tokenAt.colour;\n\t\t\t\t\t\t/*\n          \tThe following CSS produces a colour stripe below colour literals, which doesn't interfere with the cursor border.\n          */\n\n\t\t\t\t\t\telem.setAttribute(\n\t\t\t\t\t\t\t'style',\n\t\t\t\t\t\t\t'background:linear-gradient(to bottom,transparent,transparent 80%,'\n\t\t\t\t\t\t\t\t.concat(colour, ' 80.1%,')\n\t\t\t\t\t\t\t\t.concat(colour, ')')\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}); // Remove the tooltip, if it exists.\n\t\t\t// This can't actually be in the Tooltips module because it must only be installed once.\n\n\t\t\ton(cm, 'scroll', function harlowe3Scroll() {\n\t\t\t\tvar tooltip = document.querySelector('.harlowe-3-tooltip');\n\t\t\t\ttooltip && tooltip.remove();\n\t\t\t});\n\t\t\t/*\n      \tThese are signalled only by the Find/Replace Toolbar panel.\n      */\n\n\t\t\ton(cm, 'harlowe-3-find', harlowe3Find);\n\t\t\ton(cm, 'harlowe-3-findNext', harlowe3FindNext);\n\t\t\ton(cm, 'harlowe-3-replace', harlowe3Replace);\n\t\t\ton(cm, 'harlowe-3-findDone', function harlowe3FindDone() {\n\t\t\t\tcm.removeOverlay(findOverlay);\n\t\t\t});\n\t\t\t/*\n      \tUnset this function, now that this is all done.\n      */\n\n\t\t\t_init = null;\n\t\t};\n\n\t\treturn {\n\t\t\tstartState: function startState() {\n\t\t\t\treturn {\n\t\t\t\t\tpos: 0,\n\t\t\t\t\tdisconnected: null\n\t\t\t\t};\n\t\t\t},\n\t\t\tblankLine: function blankLine(state) {\n\t\t\t\tstate.pos++;\n\t\t\t},\n\t\t\ttoken: function token(stream, state) {\n\t\t\t\tvar doc = stream.lineOracle.doc;\n\t\t\t\t/*\n        \tIf the CM doc is disconnected from the DOM (somehow), don't bother doing anything.\n        */\n\n\t\t\t\tif (\n\t\t\t\t\tstate.disconnected === null\n\t\t\t\t\t\t? (state.disconnected = !doc.cm.display.wrapper.parentNode)\n\t\t\t\t\t\t: state.disconnected\n\t\t\t\t) {\n\t\t\t\t\tstate.pos++;\n\t\t\t\t\tstream.next();\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t/*\n        \tInstall the event handlers, if they haven't already been.\n        */\n\n\t\t\t\t_init && _init(doc);\n\t\t\t\t/*\n        \tFetch the tree for this doc.\n        */\n\n\t\t\t\tvar _docData = docData(doc),\n\t\t\t\t\ttree = _docData.tree;\n\t\t\t\t/*\n        \tWe must render each token using the cumulative styles of all parent tokens\n        \tabove it. So, we obtain the full path.\n        */\n\n\t\t\t\tvar currentBranch = tree.pathAt(state.pos); // The path is deepest-first - the bottom token is at 0.\n\n\t\t\t\tvar currentToken = currentBranch[0];\n\t\t\t\t/*\n        \tIf, say, the doc had no text in it, the currentToken would be null.\n        \tIn which case, quit early.\n        */\n\n\t\t\t\tif (!currentToken) {\n\t\t\t\t\tstate.pos++;\n\t\t\t\t\tstream.next();\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t/*\n        \tAdvance pos until the end of this token. This is determined by either:\n        \t- the pos reaching the current token's end,\n        \t- the currentToken's children suddenly appearing as the deepest\n        \ttoken at the pos.\n        \t- the pos reaching the line's end,\n        \tcurrentToken.tokenAt() handles the first and second cases.\n        */\n\n\t\t\t\twhile (\n\t\t\t\t\tcurrentToken === currentToken.tokenAt(state.pos) &&\n\t\t\t\t\t!stream.eol()\n\t\t\t\t) {\n\t\t\t\t\tstate.pos++;\n\t\t\t\t\tstream.next();\n\t\t\t\t}\n\n\t\t\t\tif (stream.eol()) {\n\t\t\t\t\tstate.pos++;\n\t\t\t\t}\n\t\t\t\t/*\n        \tFor performance paranoia, this is a plain for-loop.\n        */\n\n\t\t\t\tvar counts = {};\n\t\t\t\tvar ret = '';\n\n\t\t\t\tfor (var i = 0; i < currentBranch.length; i += 1) {\n\t\t\t\t\tvar _currentBranch$i = currentBranch[i],\n\t\t\t\t\t\ttype = _currentBranch$i.type,\n\t\t\t\t\t\ttext = _currentBranch$i.text; // If the type is \"verbatim\", erase all of the class names before it.\n\n\t\t\t\t\tif (type === 'verbatim') {\n\t\t\t\t\t\tret = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tvar name = 'harlowe-3-' + type;\n\t\t\t\t\tcounts[name] = (counts[name] || 0) + 1; // If this name has been used earlier in the chain, suffix\n\t\t\t\t\t// this name with an additional number.\n\n\t\t\t\t\tif (counts[name] > 1) {\n\t\t\t\t\t\tname += '-' + counts[name];\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t/*\n            \tIt's an error if a text node appears inside a macro, but not inside a code hook.\n            */\n\t\t\t\t\t\tcase 'text': {\n\t\t\t\t\t\t\tif (text.trim()) {\n\t\t\t\t\t\t\t\tvar insideMacro = currentBranch\n\t\t\t\t\t\t\t\t\t.slice(i + 1)\n\t\t\t\t\t\t\t\t\t.reduce(function (a, t) {\n\t\t\t\t\t\t\t\t\t\treturn a === undefined\n\t\t\t\t\t\t\t\t\t\t\t? t.type === 'macro'\n\t\t\t\t\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t\t\t\t\t: t.type === 'hook'\n\t\t\t\t\t\t\t\t\t\t\t\t? false\n\t\t\t\t\t\t\t\t\t\t\t\t: a\n\t\t\t\t\t\t\t\t\t\t\t: a;\n\t\t\t\t\t\t\t\t\t}, undefined);\n\n\t\t\t\t\t\t\t\tif (insideMacro) {\n\t\t\t\t\t\t\t\t\tname += ' harlowe-3-error';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/*\n            \tUse the error style if the macro's name doesn't match the list of\n            \texistant Harlowe macros.\n            */\n\n\t\t\t\t\t\tcase 'macroName': {\n\t\t\t\t\t\t\tvar firstGlyph = currentBranch[i].text[0];\n\n\t\t\t\t\t\t\tif (firstGlyph === '_' || firstGlyph === '$') {\n\t\t\t\t\t\t\t\tname +=\n\t\t\t\t\t\t\t\t\t' harlowe-3-customMacro harlowe-3-' +\n\t\t\t\t\t\t\t\t\t(firstGlyph === '_' ? 'tempV' : 'v') +\n\t\t\t\t\t\t\t\t\t'ariable';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar macroName = insensitiveName(\n\t\t\t\t\t\t\t\tcurrentBranch[i].text.slice(0, -1)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (!hasOwnProperty.call(validMacros, macroName)) {\n\t\t\t\t\t\t\t\tname += ' harlowe-3-error';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t/*\n                  \tColourise macro names based on the macro's return type.\n                  \tThis is done by concatenating the cm-harlowe-3-macroName class\n                  \twith an additional modifier containing the return type.\n                  */\n\t\t\t\t\t\t\t\tname += '-' + validMacros[macroName].returnType.toLowerCase();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tret += name + ' ';\n\t\t\t\t}\n\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t};\n\t};\n\n\tif (window.CodeMirror) {\n\t\tCodeMirror.defineMode('harlowe-3', mode);\n\t} else {\n\t\tthis.editorExtensions = {\n\t\t\ttwine: {\n\t\t\t\t'2.4 || 2.4.0-beta3': {\n\t\t\t\t\tcodeMirror: {\n\t\t\t\t\t\tmode: mode,\n\t\t\t\t\t\ttoolbar: toolbar,\n\t\t\t\t\t\tcommands: commands\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\t/*\n  \tIn order to provide styling to the Harlowe mode, CSS must be dynamically injected\n  \twhen the mode is defined. This is done now, by creating a <style> element with ID\n  \t\"cm-harlowe\" and placing our CSS in it.\n  */\n\n\t/*\n  \tIf the style element already exists, it is reused. Otherwise, it's created.\n  */\n\n\tvar harloweStyles = document.querySelector('style#cm-harlowe-3');\n\n\tif (!harloweStyles) {\n\t\tharloweStyles = document.createElement('style');\n\t\tharloweStyles.setAttribute('id', 'cm-harlowe-3');\n\t\tdocument.head.appendChild(harloweStyles);\n\t}\n\t/*\n  \tThe CODEMIRRORCSS string is replaced with the output of the script \"codemirrorcss.js\".\n  */\n\n\tharloweStyles.innerHTML =\n\t\t\".cm-harlowe-3-root:not([class^='cm-harlowe-3-text']):not([class^='cm-harlowe-3-verbatim']) { font-family:var(--font-monospaced); }.cm-harlowe-3-cursor:not([class^='cm-harlowe-3-verbatim']):not([class^='cm-harlowe-3-text cm-harlowe-3-root']) { border-bottom: 2px solid darkgray; }.cm-harlowe-3-findResult { background-color: hsla(280,100%,70%,0.4) !important; } .cm-harlowe-3-findResultCurrent { background-color: hsla(320,100%,70%,0.6) !important; }.CodeMirror {padding: 0 !important}.CodeMirror-linenumber {color: hsla(0,0%,80%,1.0);}.CodeMirror-gutters {left: 0px !important;}.cm-harlowe-3-root{box-sizing:border-box;}.cm-harlowe-3-hook{background-color: hsla(40,100%,50%,0.05);}.theme-dark .cm-harlowe-3-hook{background-color: hsla(40,100%,50%,0.05);}[data-app-theme=dark] .cm-harlowe-3-hook{background-color: hsla(40,100%,50%,0.05);}.cm-harlowe-3-hook-2{background-color: hsla(40,100%,50%,0.1);}.theme-dark .cm-harlowe-3-hook-2{background-color: hsla(40,100%,50%,0.1);}[data-app-theme=dark] .cm-harlowe-3-hook-2{background-color: hsla(40,100%,50%,0.1);}.cm-harlowe-3-hook-3{background-color: hsla(40,100%,50%,0.15);}.theme-dark .cm-harlowe-3-hook-3{background-color: hsla(40,100%,50%,0.15);}[data-app-theme=dark] .cm-harlowe-3-hook-3{background-color: hsla(40,100%,50%,0.15);}.cm-harlowe-3-hook-4{background-color: hsla(40,100%,50%,0.2);}.theme-dark .cm-harlowe-3-hook-4{background-color: hsla(40,100%,50%,0.2);}[data-app-theme=dark] .cm-harlowe-3-hook-4{background-color: hsla(40,100%,50%,0.2);}.cm-harlowe-3-hook-5{background-color: hsla(40,100%,50%,0.25);}.theme-dark .cm-harlowe-3-hook-5{background-color: hsla(40,100%,50%,0.25);}[data-app-theme=dark] .cm-harlowe-3-hook-5{background-color: hsla(40,100%,50%,0.25);}.cm-harlowe-3-hook-6{background-color: hsla(40,100%,50%,0.3);}.theme-dark .cm-harlowe-3-hook-6{background-color: hsla(40,100%,50%,0.3);}[data-app-theme=dark] .cm-harlowe-3-hook-6{background-color: hsla(40,100%,50%,0.3);}.cm-harlowe-3-hook-7{background-color: hsla(40,100%,50%,0.35);}.theme-dark .cm-harlowe-3-hook-7{background-color: hsla(40,100%,50%,0.35);}[data-app-theme=dark] .cm-harlowe-3-hook-7{background-color: hsla(40,100%,50%,0.35);}.cm-harlowe-3-hook-8{background-color: hsla(40,100%,50%,0.4);}.theme-dark .cm-harlowe-3-hook-8{background-color: hsla(40,100%,50%,0.4);}[data-app-theme=dark] .cm-harlowe-3-hook-8{background-color: hsla(40,100%,50%,0.4);}[class^='cm-harlowe-3-hook '], [class^='cm-harlowe-3-hook-']{font-weight:bold;}.cm-harlowe-3-unclosedHook{background-color: hsla(40,100%,50%,0.05);font-weight:bold;}.theme-dark .cm-harlowe-3-unclosedHook{background-color: hsla(40,100%,50%,0.05);font-weight:bold;}[data-app-theme=dark] .cm-harlowe-3-unclosedHook{background-color: hsla(40,100%,50%,0.05);font-weight:bold;}.cm-harlowe-3-error:not([class*='cm-harlowe-3-string']){background-color: hsla(17,100%,50%,0.5) !important;}.theme-dark .cm-harlowe-3-error:not([class*='cm-harlowe-3-string']){background-color: hsla(17,100%,50%,0.5) !important;}[data-app-theme=dark] .cm-harlowe-3-error:not([class*='cm-harlowe-3-string']){background-color: hsla(17,100%,50%,0.5) !important;}[class^='cm-harlowe-3-macroName']{font-style:italic;}.cm-harlowe-3-macroName-boolean{color:hsla(0,0%,30%,1.0)}.theme-dark .cm-harlowe-3-macroName-boolean{color:hsla(0,0%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-boolean{color:hsla(0,0%,70%,1.0)}.cm-harlowe-3-macroName-array{color:hsla(0,100%,30%,1.0)}.theme-dark .cm-harlowe-3-macroName-array{color:hsla(0,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-array{color:hsla(0,100%,70%,1.0)}.cm-harlowe-3-macroName-dataset{color:hsla(30,100%,40%,1.0)}.theme-dark .cm-harlowe-3-macroName-dataset{color:hsla(30,100%,60%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-dataset{color:hsla(30,100%,60%,1.0)}.cm-harlowe-3-macroName-datatype{color:hsla(220,100%,30%,1.0)}.theme-dark .cm-harlowe-3-macroName-datatype{color:hsla(220,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-datatype{color:hsla(220,100%,70%,1.0)}.cm-harlowe-3-macroName-number{color:hsla(30,100%,30%,1.0)}.theme-dark .cm-harlowe-3-macroName-number{color:hsla(30,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-number{color:hsla(30,100%,70%,1.0)}.cm-harlowe-3-macroName-datamap{color:hsla(60,100%,30%,1.0)}.theme-dark .cm-harlowe-3-macroName-datamap{color:hsla(60,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-datamap{color:hsla(60,100%,70%,1.0)}.cm-harlowe-3-macroName-changer{color:hsla(90,100%,30%,1.0)}.theme-dark .cm-harlowe-3-macroName-changer{color:hsla(90,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-changer{color:hsla(90,100%,70%,1.0)}.cm-harlowe-3-macroName-string{color:hsla(180,100%,30%,1.0)}.theme-dark .cm-harlowe-3-macroName-string{color:hsla(180,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-string{color:hsla(180,100%,70%,1.0)}.cm-harlowe-3-macroName-colour, .cm-harlowe-3-macroName-gradient{color:hsla(280,100%,30%,1.0)}.theme-dark .cm-harlowe-3-macroName-colour, .theme-dark .cm-harlowe-3-macroName-gradient{color:hsla(280,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-colour, [data-app-theme=dark] .cm-harlowe-3-macroName-gradient{color:hsla(280,100%,70%,1.0)}.cm-harlowe-3-macroName-command, .cm-harlowe-3-macroName-instant, .cm-harlowe-3-macroName-metadata{color:hsla(240,100%,20%,1.0)}.theme-dark .cm-harlowe-3-macroName-command, .theme-dark .cm-harlowe-3-macroName-instant, .theme-dark .cm-harlowe-3-macroName-metadata{color:hsla(240,100%,80%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-command, [data-app-theme=dark] .cm-harlowe-3-macroName-instant, [data-app-theme=dark] .cm-harlowe-3-macroName-metadata{color:hsla(240,100%,80%,1.0)}.cm-harlowe-3-macroName-custommacro, .cm-harlowe-3-macroName-macro, .cm-harlowe-3-macroName-any{color:hsla(320,80%,30%,1.0)}.theme-dark .cm-harlowe-3-macroName-custommacro, .theme-dark .cm-harlowe-3-macroName-macro, .theme-dark .cm-harlowe-3-macroName-any{color:hsla(320,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-macroName-custommacro, [data-app-theme=dark] .cm-harlowe-3-macroName-macro, [data-app-theme=dark] .cm-harlowe-3-macroName-any{color:hsla(320,100%,70%,1.0)}[class^='cm-harlowe-3-macro ']{font-weight:bold;color:hsla(320,80%,30%,1.0)}.theme-dark [class^='cm-harlowe-3-macro ']{font-weight:bold;color:hsla(320,100%,70%,1.0)}[data-app-theme=dark] [class^='cm-harlowe-3-macro ']{font-weight:bold;color:hsla(320,100%,70%,1.0)}.cm-harlowe-3-comma, .cm-harlowe-3-spread{color:hsla(320,80%,30%,1.0)}.theme-dark .cm-harlowe-3-comma, .theme-dark .cm-harlowe-3-spread{color:hsla(320,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-comma, [data-app-theme=dark] .cm-harlowe-3-spread{color:hsla(320,100%,70%,1.0)}.cm-harlowe-3-addition{color:hsla(320,80%,30%,1.0)}.theme-dark .cm-harlowe-3-addition{color:hsla(320,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-addition{color:hsla(320,100%,70%,1.0)}.cm-harlowe-3-subtraction, .cm-harlowe-3-multiplication, .cm-harlowe-3-division{color:hsla(30,100%,30%,1.0)}.theme-dark .cm-harlowe-3-subtraction, .theme-dark .cm-harlowe-3-multiplication, .theme-dark .cm-harlowe-3-division{color:hsla(30,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-subtraction, [data-app-theme=dark] .cm-harlowe-3-multiplication, [data-app-theme=dark] .cm-harlowe-3-division{color:hsla(30,100%,70%,1.0)}.cm-harlowe-3-is, .cm-harlowe-3-and, .cm-harlowe-3-or, .cm-harlowe-3-not, .cm-harlowe-3-isNot, .cm-harlowe-3-contains, .cm-harlowe-3-doesNotContain, .cm-harlowe-3-isIn, .cm-harlowe-3-isA, .cm-harlowe-3-isNotA, .cm-harlowe-3-isNotIn, .cm-harlowe-3-matches, .cm-harlowe-3-doesNotMatch{color:hsla(0,0%,30%,1.0)}.theme-dark .cm-harlowe-3-is, .theme-dark .cm-harlowe-3-and, .theme-dark .cm-harlowe-3-or, .theme-dark .cm-harlowe-3-not, .theme-dark .cm-harlowe-3-isNot, .theme-dark .cm-harlowe-3-contains, .theme-dark .cm-harlowe-3-doesNotContain, .theme-dark .cm-harlowe-3-isIn, .theme-dark .cm-harlowe-3-isA, .theme-dark .cm-harlowe-3-isNotA, .theme-dark .cm-harlowe-3-isNotIn, .theme-dark .cm-harlowe-3-matches, .theme-dark .cm-harlowe-3-doesNotMatch{color:hsla(0,0%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-is, [data-app-theme=dark] .cm-harlowe-3-and, [data-app-theme=dark] .cm-harlowe-3-or, [data-app-theme=dark] .cm-harlowe-3-not, [data-app-theme=dark] .cm-harlowe-3-isNot, [data-app-theme=dark] .cm-harlowe-3-contains, [data-app-theme=dark] .cm-harlowe-3-doesNotContain, [data-app-theme=dark] .cm-harlowe-3-isIn, [data-app-theme=dark] .cm-harlowe-3-isA, [data-app-theme=dark] .cm-harlowe-3-isNotA, [data-app-theme=dark] .cm-harlowe-3-isNotIn, [data-app-theme=dark] .cm-harlowe-3-matches, [data-app-theme=dark] .cm-harlowe-3-doesNotMatch{color:hsla(0,0%,70%,1.0)}.cm-harlowe-3-bold, .cm-harlowe-3-strong{font-weight:bold;}.cm-harlowe-3-italic, .cm-harlowe-3-em{font-style:italic;}.cm-harlowe-3-sup{vertical-align: super;font-size:0.8em;}.cm-harlowe-3-strike{text-decoration: line-through;}.cm-harlowe-3-verbatim{background-color: hsla(0,0%,50%,0.1);font:var(--font-monospaced)}.theme-dark .cm-harlowe-3-verbatim{background-color: hsla(0,0%,50%,0.1);font:var(--font-monospaced)}[data-app-theme=dark] .cm-harlowe-3-verbatim{background-color: hsla(0,0%,50%,0.1);font:var(--font-monospaced)}[class^='cm-harlowe-3-bold'], [class^='cm-harlowe-3-strong'], [class^='cm-harlowe-3-italic'], [class^='cm-harlowe-3-em'], [class^='cm-harlowe-3-sup'], [class^='cm-harlowe-3-verbatim'], [class^='cm-harlowe-3-strike']{font-weight:100; color: hsla(0,0,0,0.5)}[class^='cm-harlowe-3-collapsed']{font-weight:bold; color: hsla(201,100%,30%,1.0);}.theme-dark [class^='cm-harlowe-3-collapsed']{font-weight:bold; color: hsla(201,100%,70%,1.0);}[data-app-theme=dark] [class^='cm-harlowe-3-collapsed']{font-weight:bold; color: hsla(201,100%,70%,1.0);}.cm-harlowe-3-unclosedCollapsed{background-color: hsla(220,100%,50%,0.025);font-weight:bold; color: hsla(201,100%,30%,1.0);}.theme-dark .cm-harlowe-3-unclosedCollapsed{background-color: hsla(220,100%,50%,0.025);font-weight:bold; color: hsla(201,100%,70%,1.0);}[data-app-theme=dark] .cm-harlowe-3-unclosedCollapsed{background-color: hsla(220,100%,50%,0.025);font-weight:bold; color: hsla(201,100%,70%,1.0);}.cm-harlowe-3-collapsed{background-color: hsla(220,100%,50%,0.025);}.theme-dark .cm-harlowe-3-collapsed{background-color: hsla(220,100%,50%,0.025);}[data-app-theme=dark] .cm-harlowe-3-collapsed{background-color: hsla(220,100%,50%,0.025);}.cm-harlowe-3-collapsed.cm-harlowe-3-hook{background-color: hsla(220,100%,50%,0.05);}.theme-dark .cm-harlowe-3-collapsed.cm-harlowe-3-hook{background-color: hsla(220,100%,50%,0.05);}[data-app-theme=dark] .cm-harlowe-3-collapsed.cm-harlowe-3-hook{background-color: hsla(220,100%,50%,0.05);}.cm-harlowe-3-collapsed.cm-harlowe-3-hook-2{background-color: hsla(220,100%,50%,0.1);}.theme-dark .cm-harlowe-3-collapsed.cm-harlowe-3-hook-2{background-color: hsla(220,100%,50%,0.1);}[data-app-theme=dark] .cm-harlowe-3-collapsed.cm-harlowe-3-hook-2{background-color: hsla(220,100%,50%,0.1);}.cm-harlowe-3-collapsed.cm-harlowe-3-hook-3{background-color: hsla(220,100%,50%,0.15);}.theme-dark .cm-harlowe-3-collapsed.cm-harlowe-3-hook-3{background-color: hsla(220,100%,50%,0.15);}[data-app-theme=dark] .cm-harlowe-3-collapsed.cm-harlowe-3-hook-3{background-color: hsla(220,100%,50%,0.15);}.cm-harlowe-3-collapsed.cm-harlowe-3-hook-4{background-color: hsla(220,100%,50%,0.2);}.theme-dark .cm-harlowe-3-collapsed.cm-harlowe-3-hook-4{background-color: hsla(220,100%,50%,0.2);}[data-app-theme=dark] .cm-harlowe-3-collapsed.cm-harlowe-3-hook-4{background-color: hsla(220,100%,50%,0.2);}.cm-harlowe-3-collapsed.cm-harlowe-3-hook-5{background-color: hsla(220,100%,50%,0.25);}.theme-dark .cm-harlowe-3-collapsed.cm-harlowe-3-hook-5{background-color: hsla(220,100%,50%,0.25);}[data-app-theme=dark] .cm-harlowe-3-collapsed.cm-harlowe-3-hook-5{background-color: hsla(220,100%,50%,0.25);}.cm-harlowe-3-collapsed.cm-harlowe-3-hook-6{background-color: hsla(220,100%,50%,0.3);}.theme-dark .cm-harlowe-3-collapsed.cm-harlowe-3-hook-6{background-color: hsla(220,100%,50%,0.3);}[data-app-theme=dark] .cm-harlowe-3-collapsed.cm-harlowe-3-hook-6{background-color: hsla(220,100%,50%,0.3);}.cm-harlowe-3-collapsed.cm-harlowe-3-hook-7{background-color: hsla(220,100%,50%,0.35);}.theme-dark .cm-harlowe-3-collapsed.cm-harlowe-3-hook-7{background-color: hsla(220,100%,50%,0.35);}[data-app-theme=dark] .cm-harlowe-3-collapsed.cm-harlowe-3-hook-7{background-color: hsla(220,100%,50%,0.35);}.cm-harlowe-3-collapsed.cm-harlowe-3-hook-8{background-color: hsla(220,100%,50%,0.4);}.theme-dark .cm-harlowe-3-collapsed.cm-harlowe-3-hook-8{background-color: hsla(220,100%,50%,0.4);}[data-app-theme=dark] .cm-harlowe-3-collapsed.cm-harlowe-3-hook-8{background-color: hsla(220,100%,50%,0.4);}.cm-harlowe-3-twineLink:not(.cm-harlowe-3-text){color:hsla(240,100%,20%,1.0)}.theme-dark .cm-harlowe-3-twineLink:not(.cm-harlowe-3-text){color:hsla(240,100%,80%,1.0)}[data-app-theme=dark] .cm-harlowe-3-twineLink:not(.cm-harlowe-3-text){color:hsla(240,100%,80%,1.0)}.cm-harlowe-3-tag, .cm-harlowe-3-scriptStyleTag, .cm-harlowe-3-comment{color: hsla(240,34%,25%,1.0);}.theme-dark .cm-harlowe-3-tag, .theme-dark .cm-harlowe-3-scriptStyleTag, .theme-dark .cm-harlowe-3-comment{color: hsla(240,51%,75%,1.0);}[data-app-theme=dark] .cm-harlowe-3-tag, [data-app-theme=dark] .cm-harlowe-3-scriptStyleTag, [data-app-theme=dark] .cm-harlowe-3-comment{color: hsla(240,51%,75%,1.0);}.cm-harlowe-3-boolean{color:hsla(0,0%,30%,1.0)}.theme-dark .cm-harlowe-3-boolean{color:hsla(0,0%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-boolean{color:hsla(0,0%,70%,1.0)}.cm-harlowe-3-string{color:hsla(180,100%,30%,1.0)}.theme-dark .cm-harlowe-3-string{color:hsla(180,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-string{color:hsla(180,100%,70%,1.0)}.cm-harlowe-3-number{color:hsla(30,100%,30%,1.0)}.theme-dark .cm-harlowe-3-number{color:hsla(30,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-number{color:hsla(30,100%,70%,1.0)}.cm-harlowe-3-variable{color:hsla(200,100%,30%,1.0)}.theme-dark .cm-harlowe-3-variable{color:hsla(200,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-variable{color:hsla(200,100%,70%,1.0)}.cm-harlowe-3-tempVariable{color:hsla(200,70%,20%,1.0)}.theme-dark .cm-harlowe-3-tempVariable{color:hsla(200,100%,80%,1.0)}[data-app-theme=dark] .cm-harlowe-3-tempVariable{color:hsla(200,100%,80%,1.0)}.cm-harlowe-3-hookName{color:hsla(160,100%,30%,1.0)}.theme-dark .cm-harlowe-3-hookName{color:hsla(160,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-hookName{color:hsla(160,100%,70%,1.0)}.cm-harlowe-3-datatype{color:hsla(220,100%,30%,1.0)}.theme-dark .cm-harlowe-3-datatype{color:hsla(220,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-datatype{color:hsla(220,100%,70%,1.0)}.cm-harlowe-3-colour{color:hsla(280,100%,30%,1.0)}.theme-dark .cm-harlowe-3-colour{color:hsla(280,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-colour{color:hsla(280,100%,70%,1.0)}.cm-harlowe-3-cssTime{color:hsla(30,100%,30%,1.0)}.theme-dark .cm-harlowe-3-cssTime{color:hsla(30,100%,70%,1.0)}[data-app-theme=dark] .cm-harlowe-3-cssTime{color:hsla(30,100%,70%,1.0)}.cm-harlowe-3-variableOccurrence, .cm-harlowe-3-hookOccurrence{background: hsla(159,50%,75%,1.0) !important;}.theme-dark .cm-harlowe-3-variableOccurrence, .theme-dark .cm-harlowe-3-hookOccurrence{background: hsla(159,75%,25%,1.0) !important;}[data-app-theme=dark] .cm-harlowe-3-variableOccurrence, [data-app-theme=dark] .cm-harlowe-3-hookOccurrence{background: hsla(159,75%,25%,1.0) !important;}[class^='cm-harlowe-3-where'], [class^='cm-harlowe-3-via'], [class^='cm-harlowe-3-with'], [class^='cm-harlowe-3-making'], [class^='cm-harlowe-3-each'], [class^='cm-harlowe-3-when']{color:hsla(120,100%,40%,1.0); font-style:italic;}.theme-dark [class^='cm-harlowe-3-where'], .theme-dark [class^='cm-harlowe-3-via'], .theme-dark [class^='cm-harlowe-3-with'], .theme-dark [class^='cm-harlowe-3-making'], .theme-dark [class^='cm-harlowe-3-each'], .theme-dark [class^='cm-harlowe-3-when']{color:hsla(120,100%,60%,1.0); font-style:italic;}[data-app-theme=dark] [class^='cm-harlowe-3-where'], [data-app-theme=dark] [class^='cm-harlowe-3-via'], [data-app-theme=dark] [class^='cm-harlowe-3-with'], [data-app-theme=dark] [class^='cm-harlowe-3-making'], [data-app-theme=dark] [class^='cm-harlowe-3-each'], [data-app-theme=dark] [class^='cm-harlowe-3-when']{color:hsla(120,100%,60%,1.0); font-style:italic;}.cm-harlowe-3-heading{font-weight:bold;}.cm-harlowe-3-hr{background-image: linear-gradient(0deg, transparent, transparent 45%, hsla(0,0%,75%,1.0) 45%, transparent 55%, transparent);}.theme-dark .cm-harlowe-3-hr{background-image: linear-gradient(0deg, transparent, transparent 45%, hsla(0,0%,25%,1.0) 45%, transparent 55%, transparent);}[data-app-theme=dark] .cm-harlowe-3-hr{background-image: linear-gradient(0deg, transparent, transparent 45%, hsla(0,0%,25%,1.0) 45%, transparent 55%, transparent);}.cm-harlowe-3-align{color: hsla(14,99%,37%,1.0); background-color: hsla(14,99%,87%,0.1);}.theme-dark .cm-harlowe-3-align{color: hsla(14,100%,63%,1.0); background-color: hsla(14,100%,13%,0.1);}[data-app-theme=dark] .cm-harlowe-3-align{color: hsla(14,100%,63%,1.0); background-color: hsla(14,100%,13%,0.1);}.cm-harlowe-3-column{color: hsla(204,99%,37%,1.0); background-color: hsla(204,99%,87%,0.1);}.theme-dark .cm-harlowe-3-column{color: hsla(204,100%,63%,1.0); background-color: hsla(204,100%,13%,0.1);}[data-app-theme=dark] .cm-harlowe-3-column{color: hsla(204,100%,63%,1.0); background-color: hsla(204,100%,13%,0.1);}.cm-harlowe-3-escapedLine{font-weight:bold; color: hsla(51,100%,30%,1.0);}.theme-dark .cm-harlowe-3-escapedLine{font-weight:bold; color: hsla(51,100%,70%,1.0);}[data-app-theme=dark] .cm-harlowe-3-escapedLine{font-weight:bold; color: hsla(51,100%,70%,1.0);}.cm-harlowe-3-identifier, .cm-harlowe-3-property, .cm-harlowe-3-belongingProperty, .cm-harlowe-3-itsProperty, .cm-harlowe-3-belongingItProperty, .cm-harlowe-3-belongingItOperator, .cm-harlowe-3-possessiveOperator, .cm-harlowe-3-belongingOperator{color:hsla(200,80%,40%,1.0)}.theme-dark .cm-harlowe-3-identifier, .theme-dark .cm-harlowe-3-property, .theme-dark .cm-harlowe-3-belongingProperty, .theme-dark .cm-harlowe-3-itsProperty, .theme-dark .cm-harlowe-3-belongingItProperty, .theme-dark .cm-harlowe-3-belongingItOperator, .theme-dark .cm-harlowe-3-possessiveOperator, .theme-dark .cm-harlowe-3-belongingOperator{color:hsla(200,100%,60%,1.0)}[data-app-theme=dark] .cm-harlowe-3-identifier, [data-app-theme=dark] .cm-harlowe-3-property, [data-app-theme=dark] .cm-harlowe-3-belongingProperty, [data-app-theme=dark] .cm-harlowe-3-itsProperty, [data-app-theme=dark] .cm-harlowe-3-belongingItProperty, [data-app-theme=dark] .cm-harlowe-3-belongingItOperator, [data-app-theme=dark] .cm-harlowe-3-possessiveOperator, [data-app-theme=dark] .cm-harlowe-3-belongingOperator{color:hsla(200,100%,60%,1.0)}@keyframes harlowe-3-appear{0%{opacity:0}to{opacity:1}}@keyframes harlowe-3-fade-in-out{0%,to{opacity:0}50%{opacity:1}}@keyframes harlowe-3-rumble{25%{top:-0.1em}75%{top:.1em}0%,to{top:0px}}@keyframes harlowe-3-shudder{25%{left:.1em}75%{left:-0.1em}0%,to{left:0px}}@keyframes harlowe-3-buoy{25%{top:.25em}75%{top:-0.25em}0%,to{top:0px}}@keyframes harlowe-3-sway{25%{left:.25em}75%{left:-0.25em}0%,to{left:0px}}@keyframes harlowe-3-pulse{0%{transform:scale(0, 0)}20%{transform:scale(1.2, 1.2)}40%{transform:scale(0.9, 0.9)}60%{transform:scale(1.05, 1.05)}80%{transform:scale(0.925, 0.925)}to{transform:scale(1, 1)}}@keyframes harlowe-3-zoom-in{0%{transform:scale(0, 0)}to{transform:scale(1, 1)}}@keyframes harlowe-3-shudder-in{0%,to{transform:translateX(0em)}5%,25%,45%{transform:translateX(-1em)}15%,35%,55%{transform:translateX(1em)}65%{transform:translateX(-0.6em)}75%{transform:translateX(0.6em)}85%{transform:translateX(-0.2em)}95%{transform:translateX(0.2em)}}@keyframes harlowe-3-rumble-in{0%,to{transform:translateY(0em)}5%,25%,45%{transform:translateY(-1em)}15%,35%,55%{transform:translateY(1em)}65%{transform:translateY(-0.6em)}75%{transform:translateY(0.6em)}85%{transform:translateY(-0.2em)}95%{transform:translateY(0.2em)}}@keyframes harlowe-3-fidget{0%,8.1%,82.1%,31.1%,38.1%,44.1%,40.1%,47.1%,74.1%,16.1%,27.1%,72.1%,24.1%,95.1%,6.1%,36.1%,20.1%,4.1%,91.1%,14.1%,87.1%,to{left:0px;top:0px}8%,82%,31%,38%,44%{left:-1px}40%,47%,74%,16%,27%{left:1px}72%,24%,95%,6%,36%{top:-1px}20%,4%,91%,14%,87%{top:1px}}@keyframes harlowe-3-slide-right{0%{transform:translateX(-100vw)}}@keyframes harlowe-3-slide-left{0%{transform:translateX(100vw)}}@keyframes harlowe-3-slide-up{0%{transform:translateY(100vh)}}@keyframes harlowe-3-slide-down{0%{transform:translateY(-100vh)}}@keyframes harlowe-3-fade-right{0%{opacity:0;transform:translateX(-1em)}to{opacity:1}}@keyframes harlowe-3-fade-left{0%{opacity:0;transform:translateX(1em)}to{opacity:1}}@keyframes harlowe-3-fade-up{0%{opacity:0;transform:translateY(1em)}to{opacity:1}}@keyframes harlowe-3-fade-down{0%{opacity:0;transform:translateY(-1em)}to{opacity:1}}@keyframes harlowe-3-flicker{0%,29%,31%,63%,65%,77%,79%,86%,88%,91%,93%{opacity:0}30%{opacity:.2}64%{opacity:.4}78%{opacity:.6}87%{opacity:.8}92%,to{opacity:1}}@keyframes harlowe-3-blur{0%{filter:blur(2rem);opacity:0}25%{opacity:1}to{filter:blur(0rem);opacity:1}}\\\n.harlowe-3-toolbarPanel{transition:max-height .8s;overflow-y:auto;margin-bottom:4px}.harlowe-3-minimised .harlowe-3-toolbarPanel>:not(:last-child){display:none}.harlowe-3-toolbarPanel code:not(:empty){font-size:1rem;border:1px dotted hsl(0, 0%, 50%)}.harlowe-3-toolbarPanel [type=radio][disabled]~*{opacity:.5}.harlowe-3-stylePreview{text-align:center;user-select:none;background:black;color:white;font-family:\\\"Georgia\\\",serif;padding:8px;font-size:1.5rem;margin:8px auto;width:60%;position:sticky;top:0;z-index:1}.harlowe-3-stylePreview textarea{background:black;color:white}.harlowe-3-stylePreview>span{display:inline-block}.harlowe-3-stylePreview>span:first-child{position:absolute}.harlowe-3-stylePreview>span:last-child{position:relative}.harlowe-3-toolbarPanel>button{border-radius:.8rem;margin:0px 2px;padding:0px 4px;height:36px;font-size:1.2rem;min-width:28px}.harlowe-3-toolbarPanel>button:not(:active):not(.active):not(:last-child){border:1px solid hsla(0, 0%, 50%, 0.5);border-top:none;border-left:none}.harlowe-3-toolbarCheckboxes{border-bottom:1px solid hsla(0, 0%, 50%, 0.5);position:relative;padding-bottom:8px;margin-bottom:8px}.harlowe-3-toolbarPanel label:not(.harlowe-3-radioRow){white-space:nowrap}.harlowe-3-toolbarCheckboxes>label{min-width:20%;display:inline-block}.harlowe-3-swatch{width:24px;height:24px;display:inline-block;cursor:pointer;border-bottom:1px solid hsla(0, 0%, 50%, 0.5);border-right:1px solid hsla(0, 0%, 50%, 0.5)}.harlowe-3-labeledInput{position:relative;padding-bottom:8px}.harlowe-3-labeledInput>input[type=text]{display:inline-block;font-size:1rem}.harlowe-3-labeledInput>input[type=range]{vertical-align:middle}.harlowe-3-labeledInput>input[type=number]{box-shadow:0 1px 0 hsla(0, 0%, 50%, 0.5);background:transparent;color:inherit;border:none;font-family:\\\"Source Code Pro\\\",monospace;font-family:var(--font-monospaced);width:4rem;margin:0 .5rem;display:inline-block;font-size:1rem}.harlowe-3-radioRow{margin:8px 0px;display:block}.harlowe-3-radioRow .harlowe-3-radioRow{margin-left:2rem}.harlowe-3-toolbarPanel>*>.harlowe-3-radioRow{border-bottom:1px solid hsla(0, 0%, 50%, 0.5);padding-bottom:8px}.harlowe-3-confirmButtons>span{display:inline-block;align-items:center}.harlowe-3-resultCode{max-width:50%;overflow-x:auto;white-space:pre;display:inline-block;padding:1px 0px}.harlowe-3-resultCode *{white-space:nowrap}.harlowe-3-toolbarBullet{padding:0px 2px;color:hsla(0, 0%, 50%, 0.5)}.harlowe-3-toolbarBullet::before{content:\\\"•\\\"}.harlowe-3-bgColourButton{display:inline-block;border-radius:8px;width:16px;height:16px;margin-bottom:-2px;background:linear-gradient(to right, hsla(0, 100%, 50%, 0.5), hsla(30, 100%, 50%, 0.5), hsla(60, 100%, 50%, 0.5), hsla(120, 100%, 50%, 0.5), hsla(180, 100%, 50%, 0.5), hsla(240, 100%, 50%, 0.5), hsla(300, 100%, 50%, 0.5), hsla(320, 100%, 50%, 0.5))}.harlowe-3-gradientBar{display:inline-block;position:relative;width:75%;height:32px;margin:12px 8px 96px 40px;border:1px solid hsla(0, 0%, 50%, 0.5);border-radius:5px}.harlowe-3-gradientBar+button{position:absolute;top:8px;right:8px}.harlowe-3-colourStop{position:absolute;height:48px;width:16px;background:hsla(0, 0%, 50%, 0.5);border-radius:5px;cursor:grab}.harlowe-3-colourStop:active{cursor:grabbing}.harlowe-3-colourStopButtons{display:none;position:relative;top:64px;width:540px;background:hsla(0, 0%, 50%, 0.5);padding:8px;cursor:auto}.harlowe-3-colourStop[selected]{border-bottom-right-radius:0px;border-bottom-left-radius:0px;height:64px}.harlowe-3-colourStop[selected]>.harlowe-3-colourStopButtons{display:block}.harlowe-3-singleColourPicker{display:inline-block}.harlowe-3-singleColourPicker select{position:relative;top:-4px;font-size:1rem;margin-left:8px}.harlowe-3-directionPicker{width:48px;height:48px;border-radius:24px;border:1px solid hsla(0, 0%, 50%, 0.5);display:inline-block}.harlowe-3-hideCode .cm-harlowe-3-root:not(.cm-harlowe-3-text):not(.cm-harlowe-3-string){opacity:.25}.harlowe-3-hideTooltip .harlowe-3-tooltip{display:none}.harlowe-3-tooltip{font-family:var(--font-system);max-width:20vw;position:absolute;border:1px solid hsla(0, 0%, 50%, 0.5);padding:8px;display:block;z-index:8}[data-version^=\\\"2.3\\\"] .harlowe-3-tooltip{font-family:\\\"Source Sans Pro\\\",sans-serif}.theme-light .harlowe-3-tooltip,[data-app-theme=light] .harlowe-3-tooltip{background:white}.theme-dark .harlowe-3-tooltip,[data-app-theme=dark] .harlowe-3-tooltip{background:black}.harlowe-3-tooltipMacroSignature{display:block;padding-top:.5em;margin-top:.5em;border-top:1px solid hsla(0, 0%, 50%, 0.5)}.harlowe-3-tooltipTail{position:absolute;height:0;width:0;border:12px solid transparent;border-bottom-color:hsla(0, 0%, 50%, 0.5)}.harlowe-3-tooltipTail::after{content:\\\"\\\";position:absolute;height:0;width:0;left:-12px;top:-10px;border:12px solid transparent}.theme-light .harlowe-3-tooltipTail::after,[data-app-theme=light] .harlowe-3-tooltipTail::after{border-bottom-color:white}.theme-dark .harlowe-3-tooltipTail::after,[data-app-theme=dark] .harlowe-3-tooltipTail::after{border-bottom-color:black}.harlowe-3-dataEmptyRow:not(:last-child){display:none}.harlowe-3-dataRow .harlowe-3-dropdownRowLabel{font-family:\\\"Source Code Pro\\\",monospace;font-family:var(--font-monospaced)}.harlowe-3-textareaRows{margin-bottom:.5em}.harlowe-3-nonZeroRows>:first-child>.harlowe-3-rowMinus{display:none}.harlowe-3-datavalueRows{margin-left:6px;padding-left:6px;border-left:1px solid hsla(0, 0%, 50%, 0.5)}.harlowe-3-toolbarPanel [invalid]::after{display:block;position:absolute;content:attr(invalid);background-color:hsla(17, 100%, 50%, 0.5);right:0px;bottom:8px}.harlowe-3-datavalueRows .harlowe-3-datavalueRows .harlowe-3-datavalueRowHint{display:none}.story-format-toolbar .icon>img:only-child{margin-right:0px}.harlowe-3-toolbarPanel .harlowe-3-confirmButtons{display:flex;justify-content:end}.passage-edit-dialog.collapsed .harlowe-3-toolbarPanel{display:none}.harlowe-3-scrollWrapper{overflow:hidden scroll;max-height:60vh}.harlowe-3-toolbarPanel a[href]{color:var(--dark-blue);font-weight:bold}.harlowe-3-toolbarPanel.card{position:absolute;width:576px;height:auto;top:0px;padding:8px}.story-format-toolbar+.harlowe-3-toolbarPanel .harlowe-3-confirmButtons{justify-content:start;flex-flow:row-reverse}.harlowe-3-toolbarPanel textarea,.harlowe-3-toolbarPanel [type=text]{background:var(--white-translucent);border-radius:var(--corner-round);border:1px solid var(--faint-gray);color:var(--dark-gray)}html:not([data-version^=\\\"2.3\\\"]) .harlowe-3-toolbarPanel [type=checkbox]{background:transparent;border:2px solid var(--dark-gray);width:16px;height:16px;appearance:none;position:relative;border-radius:2px;vertical-align:middle}html:not([data-version^=\\\"2.3\\\"]) .harlowe-3-toolbarPanel [type=checkbox]:checked::before{content:\\\"✔\\\";position:absolute;right:-2px;top:-4px;margin-right:3px}.harlowe-3-radioRow{padding-left:0px;padding-right:0px;user-select:none;position:relative}.harlowe-3-radioRow>:first-child,.harlowe-3-radioRow>:nth-child(2){cursor:pointer}.harlowe-3-radioRow>div{padding:var(--grid-size)}.harlowe-3-toolbarPanel select{padding:var(--grid-size)}\\\n\";\n\t/*\n  \tClean up the scope if this is Twine 2.4.\n  */\n\n\tif (!this.modules) {\n\t\tdelete this.Markup;\n\t\tdelete this.Toolbar;\n\t\tdelete this.ToolbarCommands;\n\t\tdelete this.Tooltips;\n\t\tdelete this.ShortDefs;\n\t}\n}.call(eval('this')));\n"})